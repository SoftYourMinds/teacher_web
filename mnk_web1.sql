-- phpMyAdmin SQL Dump
-- version 4.9.0.1
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Июн 17 2021 г., 11:24
-- Версия сервера: 10.3.13-MariaDB-log
-- Версия PHP: 7.1.32

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `mnk_web`
--

-- --------------------------------------------------------

--
-- Структура таблицы `category`
--

CREATE TABLE `category` (
  `id_cat` int(11) NOT NULL,
  `category` text COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `category`
--

INSERT INTO `category` (`id_cat`, `category`) VALUES
(1, 'Лабораторні роботи'),
(2, 'Самостійні роботи'),
(3, 'Контрольні роботи'),
(4, 'Лекції'),
(5, 'Інше');

-- --------------------------------------------------------

--
-- Структура таблицы `docs`
--

CREATE TABLE `docs` (
  `id_doc` int(11) NOT NULL,
  `name` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `document` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `id_theam` int(11) NOT NULL,
  `id_cat` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `docs`
--

INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(3, 'Лабораторна робота 1', '<center>Лабораторна робота № 1<center/><br>\r\n<center>Створення та адміністрування веб-сайту на безкоштовному сервері<center/><br>\r\n <br>\r\nМета роботи: навчитися використовувати автоматизовані засоби створення веб-сайту, вибирати тип та оформлення веб-сторінок, адмініструвати сайт, додавати до нього форум і чат.<br>\r\n <br>\r\nПорядок роботи<br>\r\nСтворимо сайт «Типи автомобілів» і розмістимо на ньому таку інформацію про легкові та вантажні автомобілі:<br>\r\n«Легковий автомобіль — автомобіль із кількістю місць для сидіння не більше дев\'яти, з місцем водія включно, який за своєю конструкцією та обладнанням призначений для переве-зення пасажирів та їхнього багажу із забезпеченням необхідного комфорту та безпеки».<br>\r\n«Вантажний автомобіль — автомобіль, який за своєю конструкцією та обладнанням призначений для перевезення вантажів».<br>\r\n <br>\r\nЗапустіть браузер, який інстальовано на вашому комп\'ютері.<br>\r\nУ рядку Адреса введіть www.ucoz.ru/ . Відкриється головна сторінка служби (див. рис. 1.1).</p>\r\n\r\n<p>Рисунок 1.1 - Головна сторінка сайту<br>\r\nНатисніть кнопку «Создать сайт» для реєстрації та подальшого створення власного сайту.</p>\r\n\r\n<p>Рисунок 1.2 - Реєстрація на сайті<br>\r\nКлацніть кнопку Продолжить (Продовжити) та заповніть відповідну форму (рис. 1.3)</p>\r\n\r\n<br>\r\n<p>Рисунок 1.3 - Форма для створення сайту</p>\r\n\r\n<br>\r\n<p>Рисунок 1.4 - Форма для створення сайту<br>\r\n <br>\r\nПісля заповлення форми реєстрації з’явиться повідомлення про підтвердження реєстрації. Перевірте пошту, знайдіть лист про підтвердження реєстрації та перейдіть по запропонованому посиланню.<br>\r\nЯкщо все виконали вірно, то на наступній сторінці з’явиться форма для створення сайту, де потрібно ввести адресу сайту (його назу) та код безпеки.<br>\r\nТак як ви створююте сайт про автомобілі, придумайте відповідну адресу (назву) сайту (наприклад http://avtomob.ucoz.ua)<br>\r\nНа наступній сторінці міститься повідомлення, що реєстрація відбулася. Виберіть посилання «Перейти у панель управління», відкриється «Майстер налаштування».</p>\r\n\r\n<p>Рисунок 1.5 – Вікно «Мастер налаштувань»<br>\r\nВиберіть дизайн сайту для оформлення головної сторінки, та введіть назву сайту «Цей сайт про автомобілі». Натисніть Продолжить (Продовжити).</p>\r\n\r\n<p>Рисунок 1.6 - Вікно вибору теми<br>\r\n <br>\r\nНаступним етапом вибираємо додаткові модулі, які хочете підключити до сайту. Оберіть Редактор сторінок, Форум, Новини сайту, Блог, Опитування і натисніть Продолжить (Продовжити). <br>\r\n </p>\r\n\r\n<p>Рисунок 1.7 - Вибір модулів для сайту<br>\r\n <br>\r\nДалі ви потрапите в «Панель адміністратора» (Рис. 1.8). Саме тут будуть здійснюватися усі головні дії над сайтом. Додавання нових сторінок, редагування сайта Ucoz, тексту, коду, меню, шаблону та інше. </p>\r\n\r\n<p>Рисунок 1.8 - Панель адміністратора<br>\r\n <br>\r\nТепер можна переглянути сайт у браузері. Ви побачите, який вигляд матиме головна сторінка (Рис. 1.9). </p>\r\n\r\n<p>Рисунок 1.9 - Головна сторінка сайту<br>\r\n <br>\r\nРедагування сайту на Ucoz.<br>\r\nДля початку пропишимо текст головної сторінки. Для цього переходимо в пункт меню «Дизайн»- «Редактор» - «Сторінки сайту». Знаходимо рядок <body> і після нього вставляємо текст головної сторінки «Тут Ви дізнаєтесь про типи автомобілів» . </p>\r\n\r\n<br>\r\n<p>Рисунок 1.10 - Редагування головної сторінки<br>\r\nНе забувайте зберігати всі внесені зміни. Перегляньте створений сайт.<br>\r\n <br>\r\nДалі необхідно прописати заголовок сайту. Оберіть «Редактор» - «Глобальні блоки» - «Верхня частина сайту». Знайдіть теги <!--logo--> і пропишіть заголовок «Автомобілі»</p>\r\n\r\n<p> Рисунок 1.11 – Редагування блоків сторінки<br>\r\n </p>\r\n\r\n<p>Рисунок 1.12 - Попередній вигляд головної сторінки<br>\r\n <br>\r\nТепер спробуйте додати на сайт які-небудь новини. Для цього треба перейти в пункт меню «Новини сайту» – «Керування матеріалами» – «Додати матеріал» .</p>\r\n\r\n<p> <br>\r\nУ вікні, що відкрилося (Рис.1.13) прописуєте назву матеріала і текст.</p>\r\n\r\n<p>Рисунок 1.13 - Додавання новин на сайт<br>\r\n <br>\r\nДалі зберігаєте матеріал , після чого він з’явиться у вас на головній сторінці сайту. <br>\r\nПерейдіть до створення інших сторінок. Кожна з них міститиме визначення одного з типів. Виконайте команду «Редактор сторінок» – «Додати сторінку» (Рис. 1.14).</p>\r\n\r\n<p>Рисунок 1.14 - Панель адміністратора<br>\r\n <br>\r\nУ вікні створення сторінки введіть назву сторінки «Легкові автомобіл» та її зміст «Легковий автомобіль — автомобіль із кількістю місць для сидіння не більше дев\'яти, з місцем водія включно, який за своєю конструкцією та обладнанням призначений для перевезення пасажирів та їхнього багажу із забезпеченням необхідного комфорту та безпеки» у відповідні поля. Відредагуйте текст за допомогою панели форматування шрифту. (Рис. 1.15)</p>\r\n\r\n<p>Риснок 1.15 - Створення сторінки на сайті<br>\r\n <br>\r\nНатисніть кнопку «Зберегти» і перегляньте сайт у браузері.</p>\r\n\r\n<p>Рисунок 1.16 - Перегляд сайту у браузері.<br>\r\n <br>\r\nСамостійно додайте сторінку про вантажні автомобілі.<br>\r\nТаким чином ви можете додавати безліч сторінок і наповнювати свій сайт цікавим контентом. <br>\r\nСтворіть форум виконавши команду «Форум» - «Керування форумами» - «Додати форум». Заповніть відповідну форму. Рис.1.17<br>\r\n <br>\r\nРисунок 1.17 - Форма для створення форума<br>\r\n <br>\r\nСтворення сайту закінчено. Тепер за власним бажанням і фантазією відредагуйте сайт самостійно, додайте або видаліть пункти меню або зображення.<br>\r\nВведіть у рядок Адреса браузера адресу створеного вами сайту (наприклад, http://www.myavto.ucoz.ua/). Перегляньте головну сторінку та перевірте правильність її роботи, скориставшись різними гіперпосиланнями.<br>\r\n <br>\r\nОформіть звіт до лабораторної роботи, вказавши URL-адресу web-сайту, описавши процес його створення, налаштування та можливості форуму .<br>\r\n <br>\r\nКонтрольні запитання<br>\r\nЩо таке протокол?<br>\r\nЯкий протокол відповідає за передачу гіпертексту?<br>\r\nЩо таке адреса ресурсу? <br>\r\nПоясніть запис URL-адреси: http://www.myavto.ucoz.ua/<br>\r\nЯкі доменні імена називаються доменами першого рівня?<br>\r\nДайте визначення сайту.<br>\r\nУ чому є різниця між веб-сторінкою та веб-сайтом?<br>\r\nЩо таке форум?<br>\r\n <br>\r\n</p>', 1, 1),
(7, 'Лабораторна робота 2', '<p>Лабораторна робота №2<br>\r\nТема: Розробка простого HTML-документа<br>\r\nМета: навчитися створювати простий гіпертекстовий документ засобами текстового редактора Блокнот; навчитися застосовувати теги форматування шрифту та абзацу.<br>\r\nЗавдання:</p>\r\n\r\n<p>Створити файл з гіпертекстовим документом:<br>\r\nЗапустити редактор Блокнот, ввести текст:<br>\r\n Вітаю Вас на моїй першій web-сторінці!<br>\r\nЗбережіть файл. При збереженні, у вікні діалогу Зберегти як… в рядку Тип файлу: вибрати варіант Всі файли (*.*), а в рядку Ім’я файла задати ім’я з розширенням .html, наприклад 1_name.html (де name – ваше ім’я).<br>\r\nЗакрити документ, знайти його у своєму каталозі.<br>\r\nВідкрити файл. Проаналізувати, за допомогою якої прикладної програми відображається файл та як виглядає введена фраза.</p>\r\n\r\n<p>Ввести теги, що визначають структуру html-документа: <br>\r\nЗа допомогою контекстного меню відкрити файл за допомогою редактора Блокнот. Ввести приведені нижче теги, у розділі заголовку документа (між тегами <TITLE> </TITLE>) вказати своє прізвище.<br>\r\n<HTML><br>\r\n<HEAD> <TITLE> Прізвище </TITLE><br>\r\n<META CHARSET=“UTF-8”><br>\r\n </HEAD><br>\r\n <BODY><br>\r\nВітаю Вас на моїй першій web-сторінці!<br>\r\n </BODY><br>\r\n</HTML></p>\r\n\r\n<p>Зберегти документ під тим же ім’ям, оновити його відображення в браузері (натиснути кнопку Оновити на панелі інструментів). Проаналізуйте отримані зміни у відтворенні документа.</p>\r\n\r\n<p>Відредагувати документ:<br>\r\nВикликати меню браузера Вигляд/Перегляд HTML-кода і додати після тексту «Вітаю Вас на моїй першій web-сторінці!» текст підпису: <br>\r\nСтудент групи ___ Прізвище Ім’я<br>\r\nЗберегти документ (але не закривати) та оновити його перегляд в браузері.<br>\r\nВикористовуючи одинарний тег <BR> відредагувати документ таким чином, щоб підпис починався нового рядка, а Прізвище Ім’я – в наступному рядку. Переглянути в браузері новий варіант.<br>\r\nУвага! Після кожного редагування документа потрібно його зберігати, а перегляд в браузері починати з оновлення завантаження документа за допомогою кнопки «Оновити» на панелі інструментів.</p>\r\n\r\n<p>Оформити уривки тексту за допомогою стилів Заголовків:<br>\r\nПерший рядок документа оформити стилем Заголовок 1-го рівня за допомогою парного тегу <H1>…</H1>. Другий рядок оформити як Заголовок 6-го рівня, а третій як Заголовок 4-го рівня.<br>\r\nПереглянути документ в браузері, змінюючи налаштування відображення шрифтів (меню Вигляд/ Розмір шрифта/ Самій великий, Середній і т.д.)<br>\r\nЗмінити стиль оформлення першого рядка на Заголовок 2-го рівня, другого рядка – на Заголовок 5-го рівня, останнього рядка – на Заголовок 3-го рівня.</p>\r\n\r\n<p>Виконати форматування шрифту:<br>\r\nПісля рядка Прізвище Ім’я додати ще один рядок тексту:<br>\r\n <br>\r\nМашинобудівний коледж СумДУ<br>\r\nОформити фразу по приведеному зразку.</p>\r\n\r\n<p>Оформити рядок з підписом (Студент групи ___ Прізвище Ім’я) курсивом, розмір шрифта задати відносним зміненням. Використати теги <FONT SIZE=«+2»> та <I>.<br>\r\nПереглянути отриманий документ в браузері.</p>\r\n\r\n<p>Виконати форматування абзаців:<br>\r\nСтворити новий документ 2_name.htm, зберегти його у тому ж каталозі.<br>\r\nВвести текст:<br>\r\n<HTML><br>\r\n<HEAD> <TITLE> Прізвище </TITLE><br>\r\n<META CHARSET=“UTF-8”><br>\r\n </HEAD><br>\r\n <BODY><br>\r\nВітаю Вас на моїй другій web-сторінці!<br>\r\n </BODY><br>\r\n</HTML></p>\r\n\r\n<p>Вирівняти текст по центру, використовуючи парний тег <center> або атрибут align=center/right/left.<br>\r\nВвести текст відповідно свого варіанту, виконати форматування за допомогою тегів логічного і фізичного форматування, виконати колірне оформлення заголовку і фону.<br>\r\nВідмежувати фрагмент тексту горизонтальними розділовими лініями зверху та знизу, використовуючи тег <HR>.<br>\r\nЗберегти документ.<br>\r\nПереглянути документ у браузері.</p>\r\n\r\n<p>Оформити звіт з виконаної лабораторної роботи.</p>\r\n\r\n<br>\r\n<p>Варіант 1, 11<br>\r\nІСТОРІЯ УКРАЇНСЬКОЇ МОВИ<br>\r\nУсі слов\'янські мови мають одне джерело — праслов\'янську, або спільнослов\'янську основу, яка існувала у слов\'янських племінних мовах приблизно із середини III тис. до н. е. і до V ст. н. е. <br>\r\nЗ перетворенням слов\'янських племен в окремі народності в загальних рисах сформувалися і всі слов\'янські мови, внаслідок чого виникли нові спільні мови-основи. Так, предком східнослов\'янських мов можна вважати давньоруську мову, яка утворилася в V-IX ст. у Київській Русі та проіснувала до XIV ст.<br>\r\nДавній період української мови породив багатющий український фольклор: історичний, обрядовий, календарний, соціальний, господарський, побутовий.</p>\r\n\r\n<p>Варіант 2, 12<br>\r\nВиклик методу – через круглі дужки!<br>\r\nЗверніть увагу, для виклику методу обов\'язково потрібні круглі дужки.</p>\r\n\r\n<p>Подивіться, наприклад, результат звернення до toUpperCase без дужок:<br>\r\nvar hello = \"Привіт\";<br>\r\nalert( hello.toUpperCase ); // function...</p>\r\n\r\n<p>Метод – це вбудована команда, яку потрібно викликати для набуття значення. При зверненні без дужок ми отримаємо саму цю функцію. Як правило браузер виведе її якось так: \"function toUpperCase() { ... }\".</p>\r\n\r\n<p>А щоб отримати результат – потрібно провести її виклик, додавши дужки:</p>\r\n\r\n<p>var hello = \"Привіт\";<br>\r\nalert( hello.toUpperCase() ); // ПРИВІТ</p>\r\n\r\n<br>\r\n<p>Варіант 3, 13<br>\r\nУКРАЇНСЬКА МОВА<br>\r\nУ часи Івана Котляревського, Григорія Квітки-Основ\'яненка, Тараса Шевченка мова збагатилася народнорозмовним фольклором.</p>\r\n\r\n<p>Основоположником нової української мови можна вважати видатного українського поета Тараса Шевченка, який синтезував усе найкраще з книжних традицій, з усної творчості та мовлення українців Наддніпрянщини, виробив і закріпив фонетичні, морфологічні та синтаксичні норми.</p>\r\n\r\n<p>Після Т. Шевченка українською мовою майстерно користувалися, постійно її збагачуючи, такі талановиті письменники і діячі культури ХІХ-ХХ ст., як Л. Глібов, Марко Вовчок, Панас Мирний, І. Нечуй-Левицький, Іван Франко, Леся Українка, М. Драгоманов, М. Коцюбинський.</p>\r\n\r\n<p>У розвиток сучасної української мови вагомий внесок внесли українські письменники В. Сосюра, П. Тичина, М. Рильський та ін.</p>\r\n\r\n<p>Варіант 4, 14<br>\r\nГлобальна мережа Інтернет.<br>\r\nПризначення HTML<br>\r\nІнтернет започаткований 1969 року Агентством з наукових досліджень Міністерства оборони США (ARPA) як проект із розроблення надійних цифрових комунікацій для військових потреб. Спочатку ця мережа існувала для обміну інформацією між комп\'ютерами військових (науково-дослідних та навчальних) закладів. </p>\r\n\r\n<p>У 80-ті роки XX ст. її вже використовували в державних (навчальних, наукових) та комерційних цілях. У 90-ті роки XX ст. мережа Інтернет вийшла за межі США, і до неї приєдналися країни всіх континентів світу.</p>\r\n\r\n<p>Варіант 5, 15<br>\r\nМова HTML<br>\r\nОсновою WWW (World Wide Web) є Hyper Text Markup Language (HTML) — мова гіпертекстової розмітки. Мова HTML була запропонована Тімом Бернесом-Лі 1989 року як один із кoмпoнeнтiв тexнoлoгiї WWW, що призначався для опису<br>\r\nвигляду документа.<br>\r\nСтандарт HTML було розроблено організацією W3C (World Wide Web Consortium) на початку 1996 року в кооперації з такими фірмами, як IBM, Microsoft, Netscape Communication Corporation, Novell, SoftQuad, Spyglass та Sun Microsystems. Організація W3C спільно зі згаданими фірмами продовжує роботу над розширенням можливостей елементів мови HTML та її інтернаціоналізацією.</p>\r\n\r\n<p>Варіант 6, 16<br>\r\nГІПЕРТЕКСТ<br>\r\nОкрім того, комп\'ютер дає можливість користуватися не лише лінійним поданням матеріалу, як це робиться в традиційній книзі, а й гіпертекстуальним. Гіпертекст характеризується нелінійністю (користувач сам обирає шлях читання), різнорідністю та мультимедійністю (застосування всіх засобів впливу на користувача).<br>\r\nВважають, що гіпертекстуальна структура викладення матеріалу схожа на процес нашого мислення, який теж здійснюється нелінійно, і використання такої структури може значно збільшити інтелектуальний потенціал особистості.</p>\r\n\r\n<p>Варіант 7, 17<br>\r\nПрирода і заповідники<br>\r\nКримські гори на півдні півострова простягнулися трьома рівнобіжними грядами від Севастополя до Феодосії на 150 кілометрів, їхні південні схили майже стрімкі, а північні переходять у міжгрядові зниження або рівнини.<br>\r\nДві невисокі гряди (Зовнішня і Внутрішня) на півночі складають Кримське передгір\'я, розрізане на окремі масиви мальовничими річковими долинами. У західній частині Передгір\'я, що майже цілком розташовується в межах Бахчисарайського району, є півтора десятка знаменитих печерних міст і монастирів.<br>\r\nЗначна кількість гротів і скельних навісів у вапнякових обривах Передгір\'я, а також сприятливий мікроклімат відіграли вирішальну роль у формуванні культури кам\'яного віку.</p>\r\n\r\n<p>Варіант 8, 18<br>\r\nФорма запиту клієнта<br>\r\nКлієнт посилає серверу запит в одній з двох форм: в повній або скороченій. Запит в першій формі називається відповідно повним запитом, а в другій формі – простим запитом.<br>\r\nПростий запит містить метод доступу і адресу ресурсу. Наприклад: <br>\r\n<простий-запит> := <метод> <символ пробіл> <запитаний-URL> <символ нового рядка><br>\r\nЯк метод можуть бути вказані GET, POST, HEAD, PUT, DELETE і інші.<br>\r\nПриклад простого запиту: GET http://phpbook.info/<br>\r\nGET – це метод доступу, тобто метод, який повинен бути застосований до запрошуваного ресурсу, а http://phpbook.info/ – це URL-адреса запрошуваного ресурсу.<br>\r\nПовний запит містить рядок стану, декілька заголовків (заголовок запиту, загальний заголовок або заголовок змісту) і, можливо, тіло запиту. Формально загальний вид повного запиту можна записати так:<br>\r\n< повний запит > := < рядок стану > <br>\r\n(< загальний заголовок > | < заголовок запита >|<br>\r\n< заголовок змісту >)<br>\r\n< символ нового рядка ><br>\r\n [< зміст запиту >]<br>\r\nВаріант 9, 19<br>\r\nСПОСОБИ ЗАХИСТУ ІНФОРМАЦІЇ В МЕРЕЖІ<br>\r\nПо ступеню поширення й доступності виділяються програмні засоби, тому далі вони розглядаються більш докладно. Інші засоби застосовуються в тих випадках, коли потрібно забезпечити додатковий рівень захисту інформації.<br>\r\nШифрування даних являє собою різновид програмних засобів захисту інформації й має особливе значення на практиці як єдиний надійний захист інформації, переданої по протяжних послідовних лініях. Шифрування являє собою останній, практично непереборний \"рубіж\" захисту від НСД. Поняття \"шифрування\" часто вживається у зв\'язку з більше загальним поняттям криптографії. Криптографія включає способи й засоби забезпечення конфіденційності інформації (у тому числі за допомогою шифрування) і аутентифікації. <br>\r\nКонфіденційність – захищеність інформації від ознайомлення з її змістом з боку осіб, що не мають права доступу до неї. <br>\r\nАутентифиікація являє собою встановлення дійсності різних аспектів інформаційної взаємодії: сеансу зв\'язку, сторін (ідентифікація), змісту (імітозахист) і джерела (установлення авторства c допомогою цифрового підпису).<br>\r\n* НСД – несанкціонований доступ</p>\r\n\r\n<br>\r\n<p>Варіант 10, 20<br>\r\nЛіна Костенко<br>\r\nЛіна Василівна Костенко народилася у сім\'ї вчителі 19 березня 1930 року в м. Ржищеві на Київщині. Коли дівчинці було 6 років – родина перебралася до столиці, де Ліна закінчила школу. Ще будучи ученицею, вона почала відвідувати літературну студію при журналі \"Дніпро\", який редагував Андрій Малишко. Перші вірші Ліна Костенко випустила в 16 років.<br>\r\n„Нації вмирають не від інфаркту. Спочатку їм відбирає мову...“<br>\r\n„В дитинстві відкриваєш материк, Котрий назветься потім — Батьківщина.“<br>\r\n„Роки дитинства — це насамперед виховання серця.“<br>\r\n„Виховуючи свою дитину, ти виховуєш себе.“<br>\r\nТаблиця основних тегів HTML-документа. Теги форматування шрифту і абзацу<br>\r\nПризначення<br>\r\nВид тегів<br>\r\nПримітка<br>\r\nЗагальна структура документа HTML<br>\r\nТип документа<br>\r\n<HTML></HTML><br>\r\nПочаток і кінець документа<br>\r\nІм\'я документа<br>\r\n<HEAD></HEAD><br>\r\nНе відображається браузером<br>\r\nЗаголовок<br>\r\n<TITLE></TITLE><br>\r\nВміст рядка заголовка вікна браузера<br>\r\nТіло документа<br>\r\n<BODY></BODY><br>\r\nВміст WEB-сторінки<br>\r\nСтруктура змісту документа<br>\r\nВнутрішні заголовки різного рівня <br>\r\n<H№> текст </H№><br>\r\nДе № – номер рівня заголовка (від 1 до 6). Наприклад, <H1>.</H1> - заголовок 1-го рівня.<br>\r\nЗаголовок з вирівнюванням<br>\r\n<H№ ALIGN=”LEFT| CENTER| RIGHT”> текст </H№><br>\r\nLEFT - по лівому краю<br>\r\nCENTER - по центру<br>\r\nRIGHT - по правому краю.<br>\r\nФорматування абзаців<br>\r\nСтворення абзацу (параграфа)<br>\r\n<P> текст </P><br>\r\nАбзаци відділяються подвійним міжрядковим інтервалом<br>\r\nПерехід рядка усередині абзацу<br>\r\n<BR><br>\r\nОдинарний тег<br>\r\nВирівнювання абзацу<br>\r\n<P ALIGN=”LEFT”>текст </P><br>\r\n<P ALIGN= ”CENTER”>текст </P><br>\r\n<P ALIGN=”RIGHT”> текст</P><br>\r\n<P ALIGN=”JUSTIFY”> текст </P><br>\r\nLEFT - по лівому краю<br>\r\nCENTER - по центру <br>\r\nRIGHT - по правому краю<br>\r\nJUSTIFY – по ширині<br>\r\nРозділова горизонтальна лінія між абзацами<br>\r\n<HR SIZE=«?»><br>\r\nОдинарний тег. «?» - товщина лінії в пікселях. Товщину лінії можна не указувати.</p>\r\n\r\n<br>\r\n<p>Форматування шрифту<br>\r\nЖирний<br>\r\n<B> текст </B><br>\r\n<B>Жирный</B><br>\r\n<I> Курсив </I><br>\r\n<U> Підкреслений </U><br>\r\n<S> Перекреслений</s></p><br>\r\n<br>\r\n<p><SUP> Верхній індекс </SUP><br>\r\n<SUB> Нижній індекс </SUB><br>\r\nКурсив<br>\r\n<I> текст </I><br>\r\nПідкреслений<br>\r\n<U> текст </U><br>\r\nПерекреслений<br>\r\n<S> текст </S><br>\r\nЗбільшений розмір<br>\r\n<BIG> текст </BIG ><br>\r\nЗменшений розмір<br>\r\n<SMALL> текст </SMALL><br>\r\nВерхній індекс<br>\r\n<SUP> текст </SUP><br>\r\nНижній індекс<br>\r\n<SUB> текст </SUB><br>\r\nРозмір шрифту<br>\r\n<FONT SIZE=«?»> текст </FONT><br>\r\n?- значення від 1 до 7 або відносна зміна (наприклад +2) <br>\r\nГарнітура шрифту<br>\r\n<FONT FASE=«назва1, назва2 .»> текст </FONT><br>\r\nТекст оформляється першим, встановленим на комп\'ютері шрифтом із списку назв<br>\r\nКолір шрифту <br>\r\n<FONT COLOR=”$$$$$$”> текст<br>\r\n</FONT><br>\r\nКолір задається або ключовим словом, або шістнадцятковим кодом з символом #<br>\r\nRED – червоний, #FF0000 – шістнадцятковий код – червоного кольору <br>\r\nСтворення списків<br>\r\nНумерований<br>\r\n<OL>елементи списку </OL><br>\r\n<OL><br>\r\n<LI>Елемент списку 1 </LI><br>\r\n<LI>Елемент списку 2</LI><br>\r\n<LI>Елемент списку 3</LI><br>\r\n</OL><br>\r\nМаркерований<br>\r\n<UL> елементи списку </UL><br>\r\nЕлемент списку<br>\r\n<LI> елементи списку </LI></p><br>\r\n<br>\r\n<p>Таблиця основних кольорів</p>\r\n\r\n<p>Колір<br>\r\nColor\'s name<br>\r\nШістнадцятковий код кольору<br>\r\nRed<br>\r\nGreen<br>\r\nBlue<br>\r\nЧорний<br>\r\nblack<br>\r\n00<br>\r\n00<br>\r\n00<br>\r\nТемно-синій<br>\r\nnavy<br>\r\n00<br>\r\n00<br>\r\n80<br>\r\nБлакитний<br>\r\nblue<br>\r\n00<br>\r\n00<br>\r\nFF<br>\r\nЗелений<br>\r\ngreen<br>\r\n00<br>\r\n80<br>\r\n00<br>\r\nТемно-зелений <br>\r\nteal<br>\r\n00<br>\r\n80<br>\r\n80<br>\r\nСалатний<br>\r\nlime<br>\r\n00<br>\r\nFF<br>\r\n00<br>\r\nБлідо-голубий<br>\r\naqua<br>\r\n00<br>\r\nFF<br>\r\nFF<br>\r\nВишневий<br>\r\nmaroon<br>\r\n80<br>\r\n00<br>\r\n00<br>\r\nФіолетовий<br>\r\npurple<br>\r\n80<br>\r\n00<br>\r\n80<br>\r\nОливковий<br>\r\nolive<br>\r\n80<br>\r\n80<br>\r\n00<br>\r\nСірий<br>\r\ngray<br>\r\n80<br>\r\n80<br>\r\n80<br>\r\nСвітло-сірий<br>\r\nsilver<br>\r\nC0<br>\r\nC0<br>\r\nC0<br>\r\nЧервоний<br>\r\nred<br>\r\nFF<br>\r\n00<br>\r\n00<br>\r\nЛіловий<br>\r\nfushsia<br>\r\nFF<br>\r\n00<br>\r\nFF<br>\r\nЖовтий<br>\r\nyellow<br>\r\nFF<br>\r\nFF<br>\r\n00<br>\r\nБілий<br>\r\nwhite<br>\r\nFF<br>\r\nFF<br>\r\nFF</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n', 1, 1),
(8, 'Лабораторна робота 3', '<p>Лабораторна робота №3<br>\r\nТема: Створення списків та гіперпосилань у HTML-документі.<br>\r\nМета роботи: <br>\r\nнавчитися зв’язувати веб-сторінки за допомогою гіперпосилань, додавати гіперпосилання на фрагмент тексту на поточній сторінці; <br>\r\nвміти створювати списки різних типів на мові HTML;<br>\r\nнавчитися виконувати вставку малюнків в HTML-документ та використовувати їх як гіперпосилання.<br>\r\nХід роботи<br>\r\nВиконати оформлення списків:<br>\r\nСтворити новий документ 3_name.htm, зберегти його в тому ж робочому каталозі жорсткого диска, що і документи з попередньої лабораторної роботи.<br>\r\nВвести текст:<br>\r\n<HTML><br>\r\n<НЕАD> <TІТLE> Прізвище </TITLE><br>\r\n </HEAD><br>\r\n <BODY><br>\r\nВітаю Вас на моїй третій web-сторінці!<br>\r\n</BODY><br>\r\n</HTML><br>\r\nДоповнити текст документа (між тегами <BODY>.</BODY>) наступним текстом:<br>\r\nЯ знаю як оформляти:<br>\r\n Шрифти,<br>\r\nЗаголовки,<br>\r\nАбзаци<br>\r\nОформити три останні рядки як список нумерований. Для цього використовувати наступну конструкцію тегів:</p>\r\n\r\n<p>Поміняти оформлення списку на список маркерований. Використовувати теги <UL>, </UL><br>\r\nСтворити «змішаний» список:<br>\r\nЯ знаю як оформляти:<br>\r\nШрифти<br>\r\nРозмір<br>\r\nКолір<br>\r\nГарнітуру<br>\r\nІндекси<br>\r\nЗаголовки<br>\r\nВід 1-го до 6-го рівня<br>\r\nАбзаци<br>\r\nВирівнювання<br>\r\nРозрив рядків усередині абзацу<br>\r\nЗ використанням переформатування.<br>\r\nСтворення гіперпосилань і закладок.<br>\r\nУ документі 3_name.html закріпити гіперпосилання за наступними елементами списку:<br>\r\nЗа словом Шрифт – гіперпосилання на документ 1_name.html.<br>\r\nЗа словом Заголовки – на документ 1_name.html.<br>\r\nЗа словом Абзаци - на документ 2_name.html.<br>\r\nВстановити кольори для гіперпосилань за власним бажанням.<br>\r\nСтворити закладку в документі 1_name.html перед фразою «Машинобудівний коледж СумДУ». Дати їй ім\'я «Osvita». <br>\r\nЗмінити перше гіперпосилання (слово Шрифт) так, щоб вона указувала на закладку «Osvita» в документі 1_name.html.<br>\r\nСтворити закладку на початку поточного документа 3_name.html. Привласнити їй ім\'я «Hello».<br>\r\nЗмінити друге гіперпосилання (на слові Заголовки), визначивши для неї перехід в початок поточного документа на встановлену закладку «Hello».<br>\r\nСтворити закладку в документі 2_name.html перед фрагментом тексту. Привласнити їй ім\'я «Text».<br>\r\n Встановити на слово переформатування гіперпосилання на закладку «Text».<br>\r\n Перевірити правильність переходів по всіх гіперпосиланнях.<br>\r\nЗакріпити гіперпосилання за графічними файлами:<br>\r\nСкопіювати в особисту папку три графічні файли.<br>\r\nПереконатися, що створені раніше документи 1_name.html, 2_name.html і 3_name.html також знаходяться у вашому каталозі на жорсткому диску.<br>\r\nВставка малюнків в документ.<br>\r\nВідкрити в Блокноті документ 2_name.html.<br>\r\n Вставити малюнок1 у початок документа 2_name.html. Для вставки використовувати тег IMG з параметрами WIDTH і HEIGHT для установки розмірів малюнка 50 пікселів по горизонталі і по вертикалі. <br>\r\nЗберегти документ під ім\'ям 4_name.html.<br>\r\nПереглянути в браузері отриманий результат.<br>\r\nВвести в тег малюнка параметр ALIGN для вирівнювання зображення по правому краю. Переглянути результат в браузері.<br>\r\nВставити малюнок2 у кінець документа 4_name.html перед, підібрати тип вирівнювання малюнка на свій розсуд. Встановити розмір малюнка 100 пікселів по горизонталі і по вертикалі. За допомогою параметра ALT створити альтернативний текст «Малюнок 2». <br>\r\nПроглянути в браузері отриманий результат.<br>\r\nВідредагувати тег вставки малюнка1, ввести в тег атрибут title для відображення тексту підказки «Повернутися». Проглянути в браузері як реагує малюнок на наведення курсора миші.<br>\r\nЗакріпити за малюнком1 у документі 4_name.html гіперпосилання на документ 3_name.html. Виконати перехід між документами.<br>\r\nСтворити веб-сторінку із вкладеним списком:</p>\r\n\r\n<p>Основні розділи повинні бути гіперпосиланнями на підручник https://learn.javascript.ru/intro.<br>\r\nПред\'явити результат викладачеві та оформити звіт.<br>\r\nЗнати відповіді на контрольні запитання:<br>\r\nЩо називається гіперпосиланням?<br>\r\nЯкий елемент мови HTML відповідає за створення гіперпосилань?<br>\r\nЯкі атрибути можна додати до створення гіперпосилань?<br>\r\nЗа допомогою яких атрибутів можна призначити колір посилання у різних станах?<br>\r\nЩо таке мітка (або закладка)? <br>\r\nВ яких випадках використовують мітки?<br>\r\nЯк додати зображення на веб-сторінку?</p><br>\r\n<br>\r\n<p>Основні теги вставки малюнків, закладок і гіперпосилань<br>\r\nВставка зображень<br>\r\nВставка графічного файлу<br>\r\n<IMG SRC=”файл” WIDTH=”ширина” HEIGHT=”висота”><br>\r\nПриклад:<br>\r\n<IMG SRC=”grafica.gif”<br>\r\nWIDTH=”550”<br>\r\nHEIGHT=”240”<br>\r\nALIGN=”right”<br>\r\nALT=”Графічний файл”></p>\r\n\r\n<br>\r\n<p>Вирівнювання картинки щодо тексту <br>\r\n<IMG SRC=”файл” ALIGN=”left|right|top|bottom”><br>\r\nВиведення тексту спливаючої підказки при наведенні курсора миші на малюнок<br>\r\n<IMG SRC=”файл” ALT=”текст”><br>\r\nВставка посилань<br>\r\nПосилання на іншу сторінку<br>\r\n<A HREF=”сторінка”><br>\r\nтекст </A><br>\r\n<A HREF=”str2.htm”><br>\r\nСсилка1</a><br>\r\nПосилання на закладку в іншому документі<br>\r\n<A HREF=”сторінка # ім\'я закладки”> текст</A><br>\r\n<A HREF=” index.htm #met1”> На головну сторінку </A>”<br>\r\nПосилання на закладку в тому ж документі<br>\r\n<A HREF=”#ім\'я закладки ”> текст </A><br>\r\n<A HREF=” #metka1”><br>\r\nСсилка2</a><br>\r\nВизначити закладку<br>\r\n<A NAME=”ім’я закладки”>текст</A><br>\r\n<A NAME=”metka1”> </A><br>\r\nКолір фону, тексту і посилань<br>\r\nФонова картинка<br>\r\n<BODY BACKGROUND=”файл малюнка”><br>\r\n<BODY BACKGROUND =”grafica.gif”<br>\r\nTEXT=”black” (чорний)<br>\r\nLINK=”#FF0000” (червоний)<br>\r\nVLINK=”#FFFF00” (жовтий)<br>\r\nALINK=”#FFFFFF” (білий)<br>\r\n</BODY><br>\r\nКолір фону<br>\r\n<BODY BGCOLOR=”#$$$$$$”><br>\r\nКолір тексту<br>\r\n<BODY TEXT=”#$$$$$$”><br>\r\nКолір посилання<br>\r\n<BODY LINK=”#$$$$$$”><br>\r\nКолір пройденого посилання<br>\r\n<BODY VLINK=”#$$$$$$”><br>\r\nКолір активного посилання<br>\r\n<BODY ALINK=”#$$$$$$”></p><br>\r\n<br>\r\n', 1, 1),
(9, 'Лабораторна робота 4', '<p>Лабораторна робота № 4<br>\r\nТема: Створення і форматування таблиць<br>\r\nМета роботи:Навчитися використовувати таблиці для оформлення WEB-сторінок.<br>\r\nХід роботи<br>\r\nСтворити таблицю по приведеному зразку, зберегти документ під ім\'ям tabl_name.htm. Зверху над таблицею розмістити заголовок Таблиця №1<br>\r\nПри відображенні таблиці в браузері повинні задовільняти наступні умови:<br>\r\nтаблиця повинна вирівнюватися по центру і бути правильної (симетричною) форми;<br>\r\nу центральному осередку помістити символ * (зірочка), решта осередків повинна бути порожньою.<br>\r\nПримітка. Для відображення порожніх осередків в них потрібно помістити символьний примітив пропуску &nbsp;<br>\r\nУ цьому ж документі створити копію таблиці №1, ввести заголовок Таблиця №2 і модифікувати її:<br>\r\nУ центральному осередку розмістити малюнок Arrows3.wmf<br>\r\n«Розфарбувати» решту осередків в різні кольори. <br>\r\nСтворити ще одну копію таблиці – Таблиця №3 і відредагувати теги таблиці так, щоб вона відповідала приведеному нижче зразку.</p>\r\n\r\n<p>Примітка. Для об\'єднання осередків в тегах <TD> необхідно використовувати параметри colspan= і rowspan=</p>\r\n\r\n<br>\r\n<p>Створити новий HTML-документ - rozklad_name.htm з розкладом занять вашої групи.<br>\r\nДокумент повинен починатися заголовком <br>\r\nРозклад занять гр. NNN на 7 семестр 2019 р.<br>\r\nПерший рядок таблиці повинен бути оформлений як заголовки полів (з використанням тегів <TH>).<br>\r\nТаблиця по ширині повинна займати повний розмір вікна. Ширину окремих стовпців задати у відносних одиницях (у %), з тим, щоб при зміні ширини вікна пропорції таблиці зберігалися.<br>\r\nДень тижня<br>\r\nЧас<br>\r\nПредмет<br>\r\nВикладач<br>\r\nАудиторія<br>\r\nПонеділок<br>\r\n845-1005<br>\r\nУправління ІТ-проектами <br>\r\nРовна А.В.<br>\r\n237<br>\r\n1015-1135<br>\r\nУправління ІТ-проектами <br>\r\nРовна А.В.<br>\r\n237<br>\r\n1205-1325<br>\r\nТестування <br>\r\nАнтипенко В.П.<br>\r\n235<br>\r\nВівторок<br>\r\n845-1005<br>\r\nВеб-технології 1<br>\r\nАнанченко Ю.М.<br>\r\n235<br>\r\n1015-1135<br>\r\nКлієнт-сервер<br>\r\nНомеровська О.М.<br>\r\n235<br>\r\n1205-1325<br>\r\nВеб-технології 2<br>\r\nАнанченко Ю.М.<br>\r\n235<br>\r\n1335-1455</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>...<br>\r\n...<br>\r\n...<br>\r\n...<br>\r\n...</p>\r\n\r\n<p>Проглянути створений документ в браузері при різних розмірах вікна і різних налаштуваннях розміру шрифту.<br>\r\nВиконати форматування комірок: у стовпці День тижня – шрифт збільшений та підкреслений, у стовпці Час - верхній індекс; у стовпці Предмет – моноширинний шрифт.<br>\r\nЗберегти файл з розкладом під ім\'ям rozklad_menu_name.htm і модифікувати його.<br>\r\nПісля заголовка створити таблицю, що складається їз одного рядка меню з назвами днів тижня.</p>\r\n\r\n<p>У таблиці з розкладом встановити закладки на назви днів тижня.<br>\r\nУ таблиці меню створити гіперпосилання на відповідні дні тижня.<br>\r\nВиконати колірне оформлення кожної комірки меню.<br>\r\nПеревірити правильність виконання переходів по гіперпосиланнях. <br>\r\nСтворити групу web-сторінок, об\'єднаних меню:<br>\r\nНа робочому диску створити папку My_rozklad для розміщення файлів розкладу.<br>\r\nПомістити розклад на кожен день тижня і таблицю з меню в окремі файли. Імена файлів: menu.htm – для головної сторінки, назви днів тижня – для останніх. Всі документи розмістити в папці My_rozklad.<br>\r\nВідредагувати гіперпосилання меню так, щоб по ним виконувалися переходи на відповідний документ.<br>\r\nВ кінці кожного файлу з розкладом на день організувати гіперпосилання для повернення в головний документ з меню.<br>\r\nОформити фон кожного дня тижня власним кольором, співпадаючим з кольором елементу таблиці меню.<br>\r\nРозробити HTML-документ, який матиме таблицю згідно з варіантом (*оформлення розділювальних ліній, форматування комірок довільне): <br>\r\n <br>\r\n </p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>Учні<br>\r\nПредмет<br>\r\nІнформатика<br>\r\nМатематика<br>\r\nІ семестр<br>\r\nІІ семестр<br>\r\nІ семестр<br>\r\nІІ семестр<br>\r\n1<br>\r\nПетренко Д.<br>\r\n11<br>\r\n10<br>\r\n9<br>\r\n11<br>\r\n2<br>\r\nБондаренко С.<br>\r\n8<br>\r\n8<br>\r\n6<br>\r\n8<br>\r\n3<br>\r\nКулик В.<br>\r\n10<br>\r\n10<br>\r\n11<br>\r\n12<br>\r\n4<br>\r\nФішер О.<br>\r\n7<br>\r\n10<br>\r\n5<br>\r\n6</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>Територія<br>\r\nМісяць року<br>\r\nлипень<br>\r\nсічень<br>\r\nОпади (мм)<br>\r\nТемпература (ºС)<br>\r\nОпади (мм)<br>\r\nТемпература (ºС)<br>\r\nКиївська обл.<br>\r\n85<br>\r\n23<br>\r\n26<br>\r\n-15<br>\r\nСумська обл.<br>\r\n54<br>\r\n16<br>\r\n45<br>\r\n-27<br>\r\nПолтавська обл.<br>\r\n78<br>\r\n19<br>\r\n35<br>\r\n-21<br>\r\nОдеська обл.<br>\r\n63<br>\r\n27<br>\r\n32<br>\r\n-12</p><br>\r\n<br>\r\n<br>\r\n<p>Браузер<br>\r\nInternet Explorer<br>\r\nOpera<br>\r\nFirefox<br>\r\n6.0<br>\r\n7.0<br>\r\n7.0<br>\r\n8.0<br>\r\n9.0<br>\r\n1.0<br>\r\n2.0<br>\r\nПідтримка<br>\r\nні<br>\r\nтак<br>\r\nні<br>\r\nтак<br>\r\nтак<br>\r\nтак<br>\r\nтак<br>\r\nТехнології<br>\r\nHTML5<br>\r\nні</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>CSS3<br>\r\nні</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>PHP<br>\r\nтак</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>JavaScript<br>\r\nні</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>№ п/п<br>\r\nНайменування товару<br>\r\nОд.вим.<br>\r\nКількість<br>\r\nЦіна за од.вим., грн<br>\r\nВартість, грн<br>\r\n1<br>\r\nОгірки свіжі<br>\r\nкг<br>\r\n15<br>\r\n28,75<br>\r\n431,25<br>\r\n2<br>\r\nМолода капуста<br>\r\nкг<br>\r\n10<br>\r\n18,20<br>\r\n182,0<br>\r\n3<br>\r\nКартопля<br>\r\nкг<br>\r\n25<br>\r\n8,00<br>\r\n200<br>\r\n4<br>\r\nЯблука <br>\r\nкг<br>\r\n30<br>\r\n12,50<br>\r\n375<br>\r\nРазом:<br>\r\n1188,25</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p> <br>\r\nКонтрольні запитання<br>\r\nЯкий атрибут визначає рамку таблиці?<br>\r\nЯкі теги описують комірки таблиці? Формат запису.<br>\r\nЗа допомогою якого тегу можна додати зображення у комірку таблиці?<br>\r\nЯкі атрибути відповідають за об’єднання комірок по горизонталі та вертикалі?<br>\r\nЯким чином можна вказати параметри таблиці?<br>\r\nЧи можна задавати відносне значення ширини для осередків? </p><br>\r\n<br>\r\n', 1, 1);
INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(10, 'Лабораторна робота 5', '<p>Лабораторна робота №5 <br>\r\nТема: Форми в HTML.<br>\r\nМета: Вивчити основи організації форм в HTML.<br>\r\nТеоретичні відомості:<br>\r\nФорми були створені і використовуються в WWW для отримання відгуку користувача на надану інформацію і збору даних про користувача. Після заповнення користувачем форми і запуску процесу її обробки інформація з неї потрапляє до програми, що працює на сервері. Простота використання тега <MAILTO:> у формах дозволяє навіть власникам невеликих сторінок отримувати відгук від своїх читачів. Для обробки великої кількості відгуків використовуються програми, підтримуючі Common Gateway Interface (CGI) і розташовані на сервері, в адресу якого поступають відгуки. Таким чином користувач може інтерактивно взаємодіяти з Web-сервером через Internet.<br>\r\nЗавдання форми — елемент FORM<br>\r\nЕлемент FORM позначає документ як форму і визначає межі використання інших тегів, що розміщуються у формі. Тег <FORM> визначається послідовністю тегів <INPUT>, розміщених усередині пари <FORM> і </FORM>. У формі використовується як метод (method), так і дія (action) для опису обробки даних, що вводяться користувачем у форму. Метод (GET або POST) визначає, як повинні оброблятися вхідні дані з форми, а дія указує на URL програми, відповідальної за обробку цих даних.<br>\r\n<FORM METHOD=\"post\" ACTION=\"file.php\"><br>\r\nУ таблиці представлені атрибути для тегу FORM. </p>\r\n\r\n<p>Таблиця 1. Атрибути тега<input><br>\r\nАтрибут<br>\r\nЗначення / опис<br>\r\naccept-charset<br>\r\nЗначенням атрибуту є розділений пропусками список кодувань символів, які використовуватимуться для відправки форми, наприклад, <formaccept-charset=\"ISO-8859-1\">.<br>\r\naction<br>\r\nОбов\'язковий атрибут, який указує urlобробника форми на сервері, якому передаються дані. Вдає із себе файл (наприклад, action.php), в якому описано, що потрібно робити з даними форми. Якщо значення атрибуту не буде вказано, то після перезавантаження сторінки елементи форми приймуть значення за умовчанням.<br>\r\nУ випадку, якщо вся робота виконуватиметься на стороні клієнта сценаріями JavaScript, то для атрибуту actionможна вказати значення #.<br>\r\nТакож можна зробити так, щоб заповнена відвідувачем форма приходила вам на пошту. Для цього потрібно внести наступний запис:<br>\r\n<formaction=\"mailto:адрес вашої електронної пошти\" enctype=\"text/plain\"></form><br>\r\nmethod<br>\r\nЗадає спосіб передачі даних форми.<br>\r\nМетод getпередає дані на сервер через адресний рядок браузера. При формуванні запиту до сервера всі змінні і їх значення формують послідовність виду www.anysite.ru/form.php?var1=1&var2=2. Імена і значення змінних приєднуються до адреси сервера після знаку ? і розділяються між собою знайомий &. Всі спеціальні символи і букви, відмінні від латинських, кодуються у форматі %nn, пропуск замінюється на +. Цей метод потрібно використовувати, якщо ви не передаєте великих об\'ємів інформації. Якщо разом з формою передбачається відправка якого-небудь файлу, цей метод не підійде.<br>\r\nМетод postзастосовується для пересилки даних великих об\'ємів, а також конфіденційної інформації і паролів. Дані, що відправляються за допомогою цього методу, не видно в заголовку URL, оскільки вони містяться в тілі повідомлення.<br>\r\n<formaction=\"action.php\" enctype=\"multipart/form-data\" method=\"post\"></form><br>\r\nname<br>\r\nЗадає ім\'я форми, яке використовуватиметься для доступу до елементів форми через сценарії, наприклад, name=\"opros\".<br>\r\ntarget<br>\r\nУказує вікно, в яке буде направлена інформація:<br>\r\n_blank— нове вікно<br>\r\n_self— той же фрейм<br>\r\n_parent— батьківський фрейм (якщо він існує, якщо немає — те в поточний)<br>\r\n_top— вікно верхнього рівня по відношенню до даного фрейма. Якщо виклик походить не з дочірнього фрейма, то в той же фрейм.</p><br>\r\n<br>\r\n<p>Визначення елементів управління форми — тег <INPUT><br>\r\nДаний тег використовують для визначення області усередині форми, куди вводяться дані. Він формує поле для введення інформації користувачем. Це може бути текстове поле, опція, зображення або кнопка. Вид поля введення визначається значенням атрибуту TYPE.</p>\r\n\r\n<p>Таблиця 2. Атрибути тега<input><br>\r\nАтрибут<br>\r\nЗначення / опис<br>\r\nheight<br>\r\nЗначення атрибуту містить кількість пікселів без вказівки одиниці вимірювання. Встановлює висоту поля форми типу type=\"image\", наприклад, <Inputtype=\"image\" src=\"img_submit.gif\" height=\"50\">. Рекомендується одночасно встановлювати як висоту, так і ширину поля.<br>\r\nmax<br>\r\nДозволяє обмежити допустиме введення числових даних максимальним значенням, значення атрибуту може містити ціле або дробове число. Рекомендується використовувати цей атрибут разом з атрибутом min. Працює з наступними типами полів: number, range, date, datetime, datetime-local, month, time і week.<br>\r\nmaxlength<br>\r\nАтрибут задає максимальну кількість символів, що вводяться в поле. Значення за умовчанням 524288 символів.<br>\r\nmin<br>\r\nДозволяє обмежити допустиме введення числових даних мінімальним значенням.<br>\r\nname<br>\r\nВизначає ім\'я, яке використовуватиметься для доступу до елементу <form>, наприклад, в таблицях стилів css. Є аналогом атрибуту id.<br>\r\npattern<br>\r\nДозволяє визначати за допомогою регулярного виразу синтаксис даних, введення яких повинне бути дозволений в певному полі. Наприклад, pattern=\"[a-z]{3}-[0-9]{3}\" — квадратні дужки встановлюють діапазон допустимих символів, в даному випадку — будь-які рядкові букви, число у фігурних дужках указує, що потрібно три рядкові букви, після яких слідує тире, далі — три цифри в діапазоні від 0 до 9.<br>\r\nrequired<br>\r\nВиводить повідомлення про те, що дане поле є обов\'язковим для заповнення. Якщо користувач спробує відправити форму, не ввівши в це поле необхідне значення, то на екрані відобразиться застережливе повідомлення. Указується без значення атрибуту.<br>\r\nsize<br>\r\nЗадає видиму ширину поля в символах. Значення за умовчанням — 20. Працює з наступними типами полів: text, search, tel, url, email і password.<br>\r\nsrc<br>\r\nЗадає urlзображення, використовуваного як кнопка відправки даних форми. Указується тільки для поля <inputtype=\"image\">.<br>\r\nvalue<br>\r\nВизначає текст, що відображається на кнопці, в поле або зв\'язаний текст. Не указується для полів типу file<br>\r\nwidth<br>\r\nЗначення атрибуту містить кількість пікселів. Дозволяє задати ширину полий форми.<br>\r\nchecked<br>\r\nАтрибут перевіряє, чи встановлений прапорець за умовчанням при завантаженні сторінки для полів типу type=\"checkbox\" і type=\"radio\".<br>\r\naccept<br>\r\nВизначає тип файлу, дозволених для відправки на сервер. Указується тільки для <inputtype=\"file\">. Можливі значення:<br>\r\nfile_extension — вирішує завантаження файлів з вказаним розширенням, наприклад, accept=\".gif\", accept=\".pdf\", accept=\".doc\"<br>\r\naudio/* — вирішує завантаження аудіофайлів<br>\r\nvideo/* — вирішує завантаження відеофайлів<br>\r\nimage/* — вирішує завантаження зображень<br>\r\nmedia_type — указує на медіа-тип завантажуваних файлів.<br>\r\nform<br>\r\nЗначення атрибуту повинне бути рівне атрибуту idелементу <form>в цьому ж документі. Визначає одну або декілька форм, яким належить дане поле форми.<br>\r\nformaction<br>\r\nЗадає urlфайлу, який оброблятиме введені в поля дані при відправці форми. Задається тільки для полів типу type=\"submit\" і type=\"image\". Атрибут перевизначає значення атрибуту actionсамої форми.<br>\r\nformmethod<br>\r\nАтрибут визначає метод, який браузер використовуватиме для відправки даних форми на сервер. Задається тільки для полів типу type=\"submit\" і type=\"image\". Перевизначає значення атрибуту methodформи. Варіанти:<br>\r\nget— значення за умовчанням. Дані з форми (пара ім\'я/значення) додаються в url-адресу і відправляються на сервер: URL?имя=значение&имя=значение<br>\r\npost— дані форми відправляються у вигляді http-запита.<br>\r\nformtarget<br>\r\nВизначає, де виводити відповідь, отриману після відправки форми. Задається тільки для полів типу type=\"submit\" і type=\"image\". Перевизначає значення атрибуту targetформи.<br>\r\n_blank— завантажує відповідь в нове вікно/вкладку<br>\r\n_self— завантажує відповідь в те ж вікно (значення за умовчанням)<br>\r\n_parent– завантажує відповідь в батьківський фрейм<br>\r\n_top– завантажує відповідь у весь екран<br>\r\nframename – завантажує відповідь у фрейм з вказаним ім\'ям.</p><br>\r\n<br>\r\n<p>Атрибут TYPE=text<br>\r\nКоли користувачеві необхідно ввести невелику кількість тексту (одну або декілька рядків), використовується тег <INPUT>, і атрибут TYPE встановлюється в значення text. Це значення прийняте за умовчанням і указувати його необов\'язково. Крім того, задається атрибут NAME для визначення найменування змінної поля.<br>\r\nВаше ім\'я <INPUT NAME=\"Name\" SIZE=\"35\"><br>\r\nЄ ще три додаткові атрибути, які можна використовувати. Перший називається MAXLENGTH, він обмежує число символів, що вводяться користувачем в поточне поле. За умовчанням дане число не обмежене. Другим атрибутом є SIZE, що визначає розмір видимої на екрані області, займаної поточним полем. Значення за умовчанням визначається типом браузера. Якщо значення MAXLENGTH більше, ніж SIZE, браузер прокручуватиме дані у вікні. Останнім з додаткових атрибутів є атрибут VALUE, що забезпечує початкове значення поля введення.<br>\r\nАтрибут TYPE=checkbox<br>\r\nПри створенні форм часто потрібно отримати відповідь користувача на питання типу \"Так/Ні\". Для створення незалежних кнопок у формах HTML використовується тег <INPUT> з атрибутом TYPE=checkbox. Залежно від змісту форми користувач може відзначити декілька прапорів. Коли форма використовує тег <INPUT> з атрибутом CHECKBOX, в нім повинні бути присутніми і атрибути NAME, і VALUE. Атрибут NAME указує на найменування даного поля (прапора) введення. У атрибуті VALUE міститиметься значення поля.<br>\r\nВ деяких випадках необхідно ініціалізувати даний прапор, як вже відмічений. У таких випадках тег <INPUT> повинен містити атрибут CHECKED.</p>\r\n\r\n<p>Атрибут TYPE=radio<br>\r\nВ деяких випадках потрібно організувати вибір один з декількох можливих значень. Для створення форми введення при виборі користувачем одного значення з декількох можливих необхідно використовувати тег <INPUT> з атрибутом TYPE=radio. Коли у формі застосовується даний атрибут, в теге <INPUT> повинні бути вказані атрибути NAME і VALUE. Атрибут NAME указує найменування відповідного поля (кнопки). Атрибут VALUE містить значення поля.</p>\r\n\r\n<p>Чоловіча стать<INPUT NAME=\"Пол\" TYPE=radio VALUE=\"Чоловіча\"> %<br>\r\nЖіноча стать<INPUT NAME=\"Пол\" TYPE=radio VALUE=\"Жіноча\"></p>\r\n\r\n<p> Атрибут TYPE=image<br>\r\nЗалежно від вмісту форми може трапитися так, що користувачеві потрібно буде клацнути мишею на зображенні, щоб завершити роботу з формою. Для цього програмісти використовують тег <INPUT> з атрибутом TYPE=image. Коли користувач клацає мишею по зображенню, браузер зберігає координати відповідної точки екрану. Далі він \"обробляє\" введену у форму інформацію. Коли форма використовує атрибут image, тег <INPUT> повинен містити також атрибути NAME і SRC. NAME указує найменування поля введення форми. Атрибут SRC містить URI файлу — джерела зображення. Атрибут ALIGN є додатковим і використовується аналогічно тому ж атрибуту тега <IMG>.</p>\r\n\r\n<p><BR>Виберіть точку<INPUT TYPE=image NAME=point <br>\r\nSRC=\"image.gif\"></p>\r\n\r\n<p>Атрибут TYPE=password<br>\r\nЯкщо у формі потрібно організувати введення пароля, то атрибут TYPE можна встановити в значення password (TYPE=password). Використовуючи даний тип, можна організувати введення пароля без виводу на екран складових його символів. При цьому слід пам\'ятати, що введені дані передаються по незахищених каналах зв\'язку і можуть бути перехоплені.</p>\r\n\r\n<p>Логін<input NAME=\"login\"> <br>\r\nПароль <INPUT TYPE=password NAME=\"pass\"></p>\r\n\r\n<p>Атрибут TYPE=reset<br>\r\nКоли користувач заповнює форму, йому може потрібно почати все спочатку. На такий випадок існує кнопка Reset, по якій користувач може клацнути мишею, щоб повернутися до первинних значень полів. Коли користувач вибирає дану кнопку, форма відновлює первинні значення всіх елементів, в яких присутній атрибут TYPE=reset. Для створення кнопки Reset використовується тег <INPUT> з атрибутом TYPE=reset. Браузер у свою чергу виводитиме зображення даної кнопки. Якщо у формі використовується атрибут reset, тег <INPUT> може додатково містити атрибут VALUE. Даний атрибут визначає напис на зображенні кнопки.</p>\r\n\r\n<p><INPUT TYPE=reset VALUE=\"Очистити форму\"></p>\r\n\r\n<p>Атрибут TYPE=submit<br>\r\nВикористовуючи форму HTML для введення інформації від користувача, необхідно забезпечити користувачеві можливість завершити введення даних. Для цього використовується тег <INPUT> з атрибутом TYPE=submit. Браузер, у свою чергу, виводить даний елемент, як кнопку, по якій користувач може клацнути, щоб завершити процес редагування. Коли у формі використовується тег <INPUT> з атрибутом submit, даний елемент може містити два додаткові атрибути: NAME і VALUE. Атрибут NAME зберігає значення змінної поля у вашій формі. Атрибут VALUE - указує найменування кнопки Submit.<br>\r\n<BR><INPUT TYPE=submit VALUE=\"Відправити повідомлення\"> </p>\r\n\r\n<br>\r\n<p>Створення багаторядкових областей введення тексту — тег <TEXTAREA><br>\r\nЗалежно від типу форми може потрібно організувати введення великої кількості тексту. У таких випадках використовується тег <TEXTAREA> для створення текстового поля з декількох рядків. Даний тег використовує три атрибути: COLS, NAME і ROWS.<br>\r\nАтрибут COLS Указує (число символів) число колонок, що містяться в текстовій області.<br>\r\nАтрибут NAME Визначає найменування поля.<br>\r\nАтрибут ROWS Задає кількість видимих рядків текстової області.<br>\r\n<TEXTAREA NAME=тема COLS=38 ROWS=3> </TEXTAREA><br>\r\nВикористання списків у формі – тег <SELECT><br>\r\nКоли форми HTML стають складнішими, в них часто включають списки з прокруткою і випадні меню. Для цього використовують тег SELECT з атрибутом TYPE=select. Для визначення списку пунктів використовують тег <OPTION>. Тег <SELECT> підтримує три необов\'язкові атрибути: MULTIPLE, NAME і SIZE.<br>\r\nАтрибут MULTIPLE Дозволяє вибрати більш ніж одне найменування.<br>\r\nАтрибут NAME Визначає найменування об\'єкту.<br>\r\nАтрибут SIZE Визначає число видимих користувачеві пунктів списку. Якщо у формі встановлено значення атрибуту SIZE=1, то браузер виводить на екран список у вигляді випадного меню. У разі SIZE > 1 браузер представляє на екрані звичайний список.<br>\r\nУ формі може використовуватися тег <OPTION> тільки усередині тега <SELECT>. Ці теги підтримують два додаткові атрибути: SELECTED і VALUE.<br>\r\nАтрибут SELECTED - використовується для первинного вибору значення елементу за умовчанням.<br>\r\nАтрибут VALUE - вказує на значення, що повертається формою після вибору користувачем даного пункту. За умовчанням значення поля рівне значенню тега <OPTION> (відкрити).<br>\r\nВибір <SELECT NAME=\"Вибір\"> %<br>\r\n<OPTION>Варіант 1 </OPTION>%<br>\r\n<OPTION>Варіант 2 </OPTION>%<br>\r\n<OPTION VALUE=\"Варіант 3\">Варіант 3 </OPTION>%<br>\r\n<OPTION SELECTED>Варіант 4 </OPTION>%<br>\r\n</SELECT></p>\r\n\r\n<br>\r\n<p>Угрупування елементів форми<br>\r\nЕлемент <fieldset>...</fieldset> призначений для угрупування елементів, зв\'язаних один з одним, розділяючи таким чином форму на логічні фрагменти. <br>\r\nКожній групі елементів можна привласнити назву за допомогою елементу <legend>, який йде відразу за тегом<fieldset>. Назва групи виявляється зліва у верхній межі <fieldset>. <br>\r\nНаписи до полів форми<br>\r\nНаписи до елементів форми створюються за допомогою елементу <label>...</label>. Існує два способи угрупування напису і поля. Якщо поле знаходиться усередині елементу <label>, то атрибут forуказувати не потрібно.<br>\r\n<!-- з вказівкою атрибуту for --></p>\r\n\r\n<p><labelfor=\"comments\">Коли ви останній раз літали на літаку?</label><br>\r\n<textareaid=\"comments\"></textarea><br>\r\n <br>\r\n<!-- без атрибуту for --><br>\r\n<p><label>Поиск<inputtype=\"search\" name=\"site_search\"></label></p><br>\r\nЗавдання:<br>\r\nОзнайомитися з теоретичними відомостями.<br>\r\nЗнати відповіді на запитання.<br>\r\nЗа допомогою елементів HTML5 створити веб-сторінку з формою, що відповідає темі згідно варіанту за списком у підгрупі.<br>\r\n* для створення форми використовувати РІЗНІ елементи управління (не менше 6-7) </p>\r\n\r\n<p>Варіанти завдання</p>\r\n\r\n<p>Анкета учасника студентської конференції.<br>\r\nСторінка реєстрації у соціальній мережі.<br>\r\nОформлення замовлення в інтернет-магазині побутових приладів.<br>\r\nСторінка для перевірки знань правил дорожнього руху.<br>\r\nСторінка для замовлення (бронювання) кімнати у готельному комплексі.<br>\r\nСторінка для перевірки знань з дисципліни «Математичні методи дослідження операцій».<br>\r\nОформлення замовлення в інтернет-магазині «Світ іграшок».<br>\r\nЗамовлення авіаквитків.<br>\r\nОформлення замовлення в інтернет-магазині канцелярських товарів.<br>\r\nСторінка для перевірки знань з дисципліни «Web-технології та web-дизайн».<br>\r\nОформлення замовлення в інтернет-магазині побутової хімії.<br>\r\nСторінка для перевірки знань з дисципліни «Основи екології».<br>\r\nРеєстрація на наукову конференцію.<br>\r\nАнкетні дані студента МК СумДУ.</p>\r\n\r\n<p>Контрольні запитання<br>\r\nЩо таке форма?<br>\r\nЯкий тег описує форму у HTML коді?<br>\r\nЯкі атрибути є обов’язковими при додаванні форми на web-сторінку?<br>\r\nНазвіть елементи форми.<br>\r\nЯкий атибут допомагає створити кнопку із зображенням?</p>\r\n\r\n<br>\r\n<p>Малюнок 1 - Приклад форми</p><br>\r\n<br>\r\n', 1, 1),
(11, 'Лабораторна робота 6', '<p>Лабораторна робота №6 <br>\r\nТема: Робота з фреймами <br>\r\nМета: Придбання навиків створення фреймів; придбання навиків створення простого Web-сайта, що складається з декількох HTML-документів, і посилань в певний фрейм. <br>\r\nТеоретичні відомості <br>\r\nФрейм (frame) — рамка, область сторінки — дозволяє розділяти екран на декілька областей, в кожній з яких відображається вміст окремої сторінки або Web-вузла. <br>\r\nДля завдання фреймів використовується парний тег <Frameset> … </Frameset>, а для їх опису — тег<Frame>. <br>\r\nДля завдання розташування і розмірів фреймів у тегу <Frameset> використовуються атрибути cols(стовпці) і rows (рядки). <br>\r\nДля опису змісту кожної області в тегу <Frame> використовується атрибут src=і’мя_сторінки.html <br>\r\nПриклади: <br>\r\na) <Frameset Cols=«30%, 30% *» > <br>\r\n<Frame src= “s1.html” > <br>\r\n<Frame src= “s2.html”> <br>\r\n<Frame src= “s3.html” > <br>\r\n</Frameset> <br>\r\nділить сторінку на 3 вертикальних області, відводячи на 1 і 2 по 30%, а на 3 - частину, що залишилася. І розміщує в кожній частині відповідно s1.html, s2.html і s3.html сторінки. b) Якщо в прикладі а) замінити Cols на Rows=«30%, 30% *», то сторінка буде розділена на 3 горизонтальних області, 1 і 2 по 30%, а на 3 – частина, що залишилася. У кожній частині відповідно будуть розміщені s1.html, s2.html і s3.html сторінки. <br>\r\nc) <Frameset Cols= «30% *» > <br>\r\n<Frame src= “s1.html” > <br>\r\n<Frameset Rows= «50%,50%» > <br>\r\n<Frame src= “s2.html” > <br>\r\n<Frame src= “s3.html”> <br>\r\n</Frameset> <br>\r\n</Frameset> <br>\r\nСторінка буде розділена на 2 вертикальних області, відводячи на 1 – 30%, і частину, що залишилася, на другу. Друга область у свою чергу розділена на 2 горизонтальних області, по 50% на кожну частину. У кожній частині відповідно будуть розміщені s1.html, s2.html і s3.html сторінки. </p>\r\n\r\n<br>\r\n<p>Стр 1 <br>\r\nСтр2 <br>\r\nСтр3</p><br>\r\n<br>\r\n<p>Стр 1<br>\r\nСтр2<br>\r\nСтр 3</p><br>\r\n<br>\r\n<p>Стр1 <br>\r\nСтр2<br>\r\nСтр3</p><br>\r\n<br>\r\n<br>\r\n<p>Приклад а)Приклад b)Приклад c) Зауваження. Розбиття сторінки на частини можна виконати так само за допомогою тега <Table> і парного тега <Iframe></Iframe> (організовує “плаваючий” фрейм), усередині якого можна відобразити який-небудь документ або об\'єкт. <br>\r\nІнші атрибути тега <Frameset>: <br>\r\n∙ border=n – ширина межі фрейма; <br>\r\n∙ bordercolor=цвет – колір межі фрейма. <br>\r\nІнші атрибути тега <Frame>: <br>\r\n∙ noresize – заборона зміни розміру фрейма; <br>\r\n∙ frameborder=yes|no – відповідно залишити межа прибрати межу; <br>\r\n∙ scrolling=yes|no|auto – відповідно смуги прокрутки завжди присутні / смуг прокрутки немає / смуги прокрутки присутні при необхідності;<br>\r\n1 <br>\r\n∙ marginwidth=n і marginheight=n – управляють відступом зображення усередині фрейма (n – ціле число) <br>\r\n∙ name=имя_фрейма – дозволяє задати фрейму ім\'я, яке потім може використовуватися, наприклад при створенні гіперпосилань. <br>\r\nЗв\'язок між фреймами. <br>\r\nДля того, щоб сторінка, викликана по гіперпосиланню, відкрилася в потрібному фреймі, необхідно в тэге<A> в атрибуті target вказати ім\'я цього фрейма. <br>\r\nНаприклад, якщо фрейму, що відображає сторінку 2 задати ім\'я «nomber2»: <Frameset cols= «30% *» > <br>\r\n<Frame src=s1.html > <br>\r\n<Frame src=s2.html name=nomber2> <br>\r\n</Frameset> <br>\r\nа в документі s1.html помістити посилання: <br>\r\n <A href=s3.html target=nomber2> стр3 </A> <br>\r\nто сторінка 3 відкриється не в першому, а в другому фреймі. <br>\r\nПорядок виконання роботи: <br>\r\n1 завдання. Виконаєте підготовчу роботу: створивши 3 сторінки, для кожної з яких задайте свій колір фону, заголовок 1 рівня «Сторінка №.» і довільний малюнок, збережете сторінки під іменами str1.html, str2.html, str3.html. <br>\r\n2 завдання. Створіть сторінку, що складається з 3 рівних вертикальних областей. У кожній з яких відобразите відповідно вміст 1, 2 і 3 сторінок. Задайте ширину і колір меж фреймів за бажанням. Збережіть її під ім\'ям vert.html. <br>\r\n3 завдання. Зміните сторінку, замінивши вертикальне ділення на горизонтальне. Приберіть ширину та колір меж фреймів. У першому фреймі встановіть заборону на зміну його розміру. Збережіть HTML-документ під ім\'ям gor.html. <br>\r\n4 завдання. Створіть HTML-документ під ім\'ям glav.html, що складається з 2 вертикальних областей (розміри яких відносяться, як 1:3). <br>\r\nУ лівій області повинен відображатися HTML-документ з заголовком Зміст і гіперпосилання на 1, 2 і 3 сторінки (str1.html, str2.html, str3.html). Гіперпосилання, організовуйте, так, щоб сторінки 1, 2 і 3 відображалися в правій області. <br>\r\n5 завдання. Створіть HTML-документ під ім\'ям str4.html: задайте заголовок 1 рівня «Сторінка №.» і визначення «Фрейм (frame) — рамка, область сторінки — дозволяє розділяти екран на декілька областей, в кожній з яких відображається вміст окремої сторінки или Web-узла.». <br>\r\n6 завдання. Створіть HTML-документ під ім\'ям plav.html: задайте свій колір фону, відцентрований заголовок 1 рівня «Приклад плаваючого фрейма» і відцентрований “плаваючий” фрейм (шириною – 30%, заввишки – 200 піксель), що відображає вміст сторінки 4 (str4.html). <br>\r\n7 завдання. Створіть HTML-документ під ім\'ям ram.html, що складається з 3 рівних вертикальних областей, третю область розділите на дві рівні горизонтальні області. У кожній з яких відобразите відповідно вміст 1, 2, 3 і 4 сторінок. <br>\r\n8 завдання. Продемонструйте викладачеві результати роботи: vert.html, gor.html, glav.html, plav.html, ram.html. <br>\r\n9 завдання. Розробити дві сторінки і зв’язати їх за допомогою гіперпосилань. Одна із сторінок повинна мати фреймову структуру (поділену на частини на ваш розсуд): у одній частині розмістити зображення, у другій – таблицю, у третій гіперпосилання на другу сторінку. <br>\r\nКонтрольні запитання <br>\r\n1. Що таке фрейм? <br>\r\n2. Чим відрізняється структура HTML-кода фрейма від структури HTML-документа? 3. Яке значення атрибута rows? <br>\r\n4. У якому форматі призначаються значення атрибутам rows і cols? <br>\r\n5. Знати призначення тегів і їх атрибутів, які були використані в даній лабораторній роботі.<br>\r\n2 <br>\r\n</p>', 1, 1),
(12, 'Лабораторна робота 7', '<p>Лабораторна робота №7<br>\r\nТема: Графіка на веб-сторінці<br>\r\nМета роботи: отримати навики по розміщенню графіки на веб-сторінках, створенню карт зображень.<br>\r\nТеоретичні відомості<br>\r\nГрафіка - це прикраса веб-вузла. Під графікою мають на увазі значки, малюнки, фотографії і карти зображень. При розміщенні графіки на веб-сторінках необхідно стежити за тим, щоб розмір графічних файлів був якомога менше.<br>\r\nДля вставки зображення в текст HTML-документа використовується елемент IMG. Для завдання цього HTML-елемента застосовується одинарний тег <IMG> Атрибути тега <IMG>:<br>\r\nSrc — задає URI зображення;<br>\r\nAlt — альтернативний текст, який відображається на місці зображення, якщо по яких-небудь причинах само зображення не може бути показане;<br>\r\nBorder — задає товщину межі навколо малюнка в пікселах;<br>\r\nAlign — визначає вирівнювання зображення;<br>\r\nHeight — задає висоту зображення в пікселах;<br>\r\nWidth — визначає ширину зображення в пікселах;<br>\r\nVspace — задає величину вільного простору між зображенням і текстом зверху і знизу<br>\r\nHspace — визначає величину вільного простору між зображенням і текстом справа і зліва;<br>\r\nName (або id) дозволяє ідентифікувати зображення так, що на нього можуть посилатися різні сценарії.</p>\r\n\r\n<p>Обов\'язковим атрибутом тегу <IMG> є Scr. Атрибути height і Width використовуються для того, щоб браузер ще до завантаження зображення міг правильно розташувати його в тексті. Також ці атрибути можна застосовувати для примусової зміни (стиснення або збільшення) розміру зображення.</p>\r\n\r\n<p>Вирівнювання зображень<br>\r\nЗа допомогою атрибуту ALIGN можна задати спосіб вирівнювання зображення на веб-сторінці. На мал. 1 перший малюнок вирівняно по правому краю, другий — по лівому (лістинг 1)</p>\r\n\r\n<p>Лістінг1. Приклад вирівнювання зображень на веб-сторінці<br>\r\n<HTML><br>\r\n<HEAD><TITLE>PICTURE</TITLE></HEAD><br>\r\n<BODY><br>\r\n<H1 align=center>Обтікання текстом об\'єктів</H1><br>\r\n<IMG SRC=\"016.jpg\" width=\"200\" height=\"230\" align=right><br>\r\n<FONT size=5> Карти зображень дозволяють користувачеві зв\'язувати посилання на інші документи з окремими частинами зображень.<br>\r\nКлацаючи мишею на частинах зображення, так званих активних областях, користувач може виконувати ті або інші дії, переходити до інших документів.<br>\r\nТег <MAP> застосовується для представлення графічного зображення у вигляді карти з активними областями. Активні області можна ідентифікувати по спливаючій підказці, яка з\'являється при наведенні на таку область покажчика миші. Контейнер, що складається з тегів <MAP> і </MAP>, є блоком, де описані активні області.</FONT><br>\r\n<BR><BR><BR><br>\r\n<IMG SRC=\"017.jpg\" width=\"200\" height=\"230\" align=left><br>\r\n<FONT size=5> Щоб включити підтримку карти зображення, необхідно ввести атрибут USEMAP в тег IMG:<br>\r\nIMG SCR=\"URL\" USEMAP=\"URL#MAP_NAME\"<br>\r\nДаний атрибут указує, в якому місці знаходиться карта зображення. Карта зображення визначає, якій ділянці зображення яка URL-адрес відповідає. Карта-зображення може знаходитися в тому ж документі, що і зображення, або в іншому документі.<br>\r\n</BODY><br>\r\n</HTML></p>\r\n\r\n<br>\r\n<p>Рисунок 1 - Приклад вирівнювання зображень на веб-сторінці</p>\r\n\r\n<p>Масштабування зображень</p>\r\n\r\n<p>На рисунку 2 показана веб-сторінка (лістинг 2), що містить три зображення різного розміру, джерелом яких є один і той же файл. Файл має розміри 154 пікселів в ширину і 248 пікселів у висоту. Перше зображення збільшене в два рази, друге має реальний розмір, розміри третього зображення зменшені в два рази. Зображення знаходяться один від одного на відстань трьох нерозривних пропусків.<br>\r\nЯкщо непродумано задати ширину і висоту зображення, воно спотвориться.</p>\r\n\r\n<br>\r\n<p>Лістинг 2. Приклад створення трьох зображень різного розміру з одного файлу</p>\r\n\r\n<p><HTML></p>\r\n\r\n<br>\r\n<p><HEAD><br>\r\n<TITLE>size</TITLE><br>\r\n</HEAD><br>\r\n<BODY><br>\r\n<IMG WIDTH=308 HEIGHT=496 SRC=\"BASKTBAL.JPG\"><br>\r\n&nbsp;<br>\r\n&nbsp;<br>\r\n&nbsp;</p><br>\r\n<br>\r\n<br>\r\n<p><IMG WIDTH=154 HEIGHT=248 SRC=\"BASKTBAL.JPG\"><br>\r\n&nbsp;<br>\r\n&nbsp;<br>\r\n&nbsp;</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<p><IMG WIDTH=77 HEIGHT=124 SRC=\"BASKTBAL.JPG\"><br>\r\n</BODY><br>\r\n</HTML></p>\r\n\r\n<p>Рисунок 2 - Три зображення різного розміру з одного файлу</p>\r\n\r\n<p>Карти зображень<br>\r\nКарти – це спосіб зробити різні частини одного графічного зображення гіперпосиланнями. Вони дозволяють виділити окремі області зображень і визначити для кожної з них свою дію.<br>\r\nЩоб створити карту потрібно вставити в тег <IMG SRC=\"\"> атрибут USEMAP=\"#name\", де name - ім\'я карти (значок # обов\'язковий). У прикладі використовувалася назва Map_example.<br>\r\nДалі описуємо активні області карти. Починаємо відкриваючого тега <MAP NAME=\"name\"> (тут повторюється ім\'я, але вже без значка #), а закінчуємо замикаючим тегом </MAP>.<br>\r\nМіж цими тегами поміщаємо опис кожної активної області зображення: <br>\r\n<AREA SHAPE=\"форма\" COORDS=\"координати\" HREF=\"адреса\" TITLE=\"альтернативний текст\">. <br>\r\nЕлемент <AREA> має наступні атрибути і їх значення описані у таблиці 1.</p>\r\n\r\n<p>Таблиця 1 Атрибути елементу <AREA></p>\r\n\r\n<br>\r\n<p>SHAPE<br>\r\nОписує форму області, що виділяється, можливі значення: RECT - прямокутник<br>\r\nCIRCLE - круг<br>\r\nPOLY - багатокутник<br>\r\nDEFAULT - визначає всю область, т.е весь малюнок може стати посиланням.</p><br>\r\n<br>\r\n<br>\r\n<p>COORDS<br>\r\nКоординати, що визначають розміри і положення області на зображенні. Всі координати відлічуються в пікселях від лівого верхнього кута зображення. Кількість і порядок значень залежить від значення атрибута SHAPE:<br>\r\nRECT: - лівий-X, верхній-Y, правий-X, нижній-Y (тобто спочатку координати лівого верхнього кута, потім правого нижнього) CIRCLE: - центр-X, центр-Y, радіус (тобто горизонтальна і вертикальна координати центру круга і радіус)<br>\r\nPOLY: - X1, Y1, X2, Y2 ..., Xn, Yn (просто перераховуються координати всіх вершин багатокутника).</p>\r\n\r\n<p>NOHREF<br>\r\nВизначає, що даній області не відповідає ніяке посилання. Де це може стати в нагоді? Ну, наприклад, якщо ви хочете зробити посилання не у вигляді круга, а у вигляді кільця<br>\r\nALT<br>\r\nАльтернативний текст для виділеної області, використовується невізуальними браузерами.<br>\r\nTITLE<br>\r\nНазва виділеної області, виводиться у вигляді підказки, спливаючої при наведенні курсора на область малюнка.<br>\r\nTARGET<br>\r\nЗначення цього атрибута (\"_top\", \"_blank\", \"_self\" або \"_parent\") визначає, в якому вікні буде відкритий документ</p><br>\r\n<br>\r\n<p>У лістингу 3 представлений код карти зображення, що дозволяє проглянути детальніше визначні пам\'ятки США, Парижа, Фінляндії і Англії, вибираючи частину великої фотографії. Фотографія розділена на чотири прямокутники (рис. 3).</p>\r\n\r\n<br>\r\n<p>Рисунок 3 – Приклад карти зображення</p>\r\n\r\n<p>Лістинг 3. Приклад створення карти зображення з активними областями </p><br>\r\n<br>\r\n<p>Завдання<br>\r\nСтворіть веб-сторінку з таблицею, в якій розмістіть 6 зображень шириною 92 і висотою 114 пікселів кожне.<br>\r\nДодайте на веб-сторінку блок (використовуйте тег <div> </div>), в якому розмістіть 4 зображення різного розміру, джерелом яких є один і той же файл. Необхідно передбачити пропорції зображення. Зображення розташувати один від одного на відстань двох нерозривних пропусків.<br>\r\nУ окремому блоці створіть зображення-карту, яка повинна містити активні області різної форми всіх складових ПК. </p><br>\r\n<br>\r\n<p>Контрольні питання<br>\r\nЯкий тег дозволяє розміщувати графіку на веб-сторінці?<br>\r\nЩо таке атрибут? Який атрибут управляє місцеположенням зображення на сторінці? Які значення він може приймати?<br>\r\nЯкий тег застосовується для представлення графічного зображення у вигляді карти з активними областями?<br>\r\nНазвіть формати графічних файлів, які використовуються в Інтернеті<br>\r\n</p>', 1, 1),
(14, 'Лабораторна робота 8', '<p>Лабораторна робота № 8<br>\r\nТема: Оформлення веб-сторінки за допомогою таблиці стилів.<br>\r\nМета: навчитися створювати таблиці стилів, знати способи підключення та збереження шаблонів CSS, вміти позиціонувати блоки, створювати ефекти тіні для тексту.<br>\r\n <br>\r\nТеоретичні відомості<br>\r\n <br>\r\nВикористання таблиць каскадних стилів<br>\r\nВи вже розглянули можливості форматування вмісту веб-сторінок за допомогою засобів мови HTML та візуального редактора веб-сайтів. Проте є й інші засоби оформлення текстів і створення зовнішніх ефектів, які можуть прикрасити веб-сторінку. Одним з них є таблиці стилів. Загальний принцип використання стилів на веб-сторінках той самий, що і для документів, створених у середовищі текстового процесора: користувач визначає набори правил форма-тування, які потім застосовуються до елементів документа. Проте у веб-дизайні способи застосування стилів різноманітніші.<br>\r\n <br>\r\nПоняття про таблиці каскадних стилів<br>\r\nСтиль — це набір правил оформлення та форматування, який можна застосувати до різних елементів веб-документа. У разі використання стандартної мови HTML для надання кільком елементам певних властивостей (наприклад, призначення стилю шрифту) доводиться задавати ці властивості для кожного елемента. Використання таблиць стилів дає змогу уникнути цього, оптимізувавши розробку веб-сайтів. Стилі дають змогу позиціювати елементи сторінки (наприклад, тексти і графіку), задаючи координати. Крім того, таблиці стилів часто використовують під час створення так званих динамічних сторінок.<br>\r\nТаблиці каскадних стилів (CSS, Cascading Style Sheets) містять параметри форматування частини або всього тексту веб-сторінки. Якщо таку таблицю підключено, то у тегах можна просто вказувати посилання на неї, а не задавати велику кількість атрибутів. У цьому випадку стилі названі каскадними тому, що в одному документі їх можна описати кілька, і браузер використовуватиме їх каскадом відповідно до їхнього пріоритету.<br>\r\nТаблиці каскадних стилів — це передусім набори параметрів, що змінюють властивості тегів HTML. Такі набори називають ще визначеннями тегів. Наприклад:<br>\r\n <br>\r\nР {font-size: 40pt; color: green; font-family: \"Comic Sans MS\"}<br>\r\n <br>\r\nТут задано параметри для тегу абзацу <Р>, які встановлюють розмір шрифту 40 пунктів, колір шрифту — зелений, гарнітуру — Comic Sans MS. У документі достатньо ввести теги <Р>...</Р> із текстом абзацу, щоб автоматично надати йому зазначеного оформлення.<br>\r\nТаблиці каскадних стилів дають змогу отримати результати, яких неможливо досягнути звичайними засобами HTML. У наведеному прикладі встановлено розмір шрифту 40 пунктів, хоча в мові HTML за допомогою атрибута SIZE можна задати для шрифту максимальний розмір 7, що відповідає 36 пунктам.<br>\r\nКрім того, таблиці каскадних стилів дають змогу визначити єдиний стиль оформлення для різних сторінок документа і швидко модифікувати його зміною відповідного параметра у таблиці стилів.<br>\r\nПараметрів форматування, які можна задавати за допомогою стилів, досить багато. Це, зокрема:<br>\r\nbackground — колір тла;<br>\r\nfont-family — стиль шрифту (гарнітура);<br>\r\nfont-size — розмір шрифту;<br>\r\nfont-weight — жирність шрифту;<br>\r\ncolor — колір шрифту;<br>\r\ntext-decoration — оздоблення тексту;<br>\r\ntext-align — вирівнювання тексту;<br>\r\nmargin-top — відступ від верхнього рядка абзацу;<br>\r\nline-height — міжрядкова відстань.<br>\r\n <br>\r\nЗастосування каскадних стилів у HTML-документах<br>\r\nЄ три способи зв\'язку каскадних стилів із HTML-документом: підключення зовнішньої таблиці стилів; розташування опису стилів у розділі HEAD документа; задавання властивостей стилів безпосередньо в тегах абзаців чи заголовків.<br>\r\n <br>\r\nПідключення зовнішньої таблиці стилів<br>\r\nЗовнішня таблиця стилів (External Style Sheet) — це текстовий файл із розширенням .css. Його підключають до HTML-документа за допомогою тегу <LINK>, який записують у розділі <HEAD>, наприклад:<br>\r\n <br>\r\n<LINK REL=\"stylesheet\" TYPE=\"text/css\" HREF=\"mystyle.css\"><br>\r\n <br>\r\nАтрибути REL та TYPE вказують браузеру на те, що сторінка ви-користовує таблиці каскадних стилів. Атрибут HREF задає адресу файлу (mystyle.css).<br>\r\n <br>\r\nПриклад 1<br>\r\nПідключення зовнішньої таблиці стилів.<br>\r\n1. Відкрийте текстовий редактор Блокнот і введіть наступні селектори:</p>\r\n\r\n<br>\r\n<p>Збережіть файл з іменем mystyle.css.<br>\r\nСтворіть у Блокноті файл такого змісту:<br>\r\n </p>\r\n\r\n<p> <br>\r\nЗбережіть цей файл з іменем pryklad1.html у тому ж каталозі, що і mystyle.css.<br>\r\nВідкрийте файл pryklad1.html у вікні браузера (рис. 8.1).<br>\r\n </p>\r\n\r\n<p>Рисунок 8.1 – Результат оформлення тексту <br>\r\n <br>\r\nЗа допомогою коментарів поясніть властивості таблиць стилів. <br>\r\n <br>\r\nВикористання стилів внутрішньої таблиці<br>\r\nВнутрішню таблицю стилів (Embedded Style Sheet) розміщують безпосередньо в розділі HEAD, у блоці, який обмежений тегами <STYLE> та </STYLE>.<br>\r\n <br>\r\n<HEAD><br>\r\n<STYLE><br>\r\nТег1 {властивість11: значення11; властивість12: значення12; ...;<br>\r\nвластивість1n: значенняі1n} <br>\r\n <br>\r\nТег2 { властивість21:значення21; властивість22:значення22; ...;<br>\r\nвластивість2m:значення2m}<br>\r\n</STYLE> <br>\r\n</HEAD><br>\r\n <br>\r\nЯк видно з коду, найпростіша внутрішня таблиця стилів – це послідовність визначень тегів, кожне з яких записується, як правило, з нового рядка. Визначення тегу містить його ім\'я без кутових дужок, за яким у фігурних дужках через крапку з комою перелічують властивості тегів та їхні значення, розділені двокрапками. Розглянемо приклад.</p>\r\n\r\n<p>Приклад 2<br>\r\nПідключення внутрішньої таблиці стилів.<br>\r\nСтворіть у Блокноті файл такого змісту:</p>\r\n\r\n<p>Вкажіть заголовок сторінки:</p>\r\n\r\n<p>У розділі <head> </head> опишіть властивості селекторів для веб-сторінки:<br>\r\n </p>\r\n\r\n<p> <br>\r\nЗбережіть цей файл з іменем pryklad2.html та відкрийте у вікні браузера (рис. 8.2).</p><br>\r\n<br>\r\n<p>Який вигляд має цей документ у вікні браузера, показано на рис. 10.3. <br>\r\n </p>\r\n\r\n<p>Рисунок 8.2 – Застосування різних стилів форматування для тегу абзацу<br>\r\n <br>\r\nСтилі дають змогу сформувати сторінку з цікавими ефектами, які інакше можна створити лише за допомогою графіки. Це, наприклад, ефект об\'ємного тексту або накладання (часткового перекриття) фрагментів сторінки.<br>\r\n <br>\r\nПриклад 3. Створення текстових ефектів за допомогою стилів<br>\r\nВизначимо для тегу <BODY> такий стиль: шрифт Arial чорного кольору розміром 16 пунктів. Внаслідок цього весь текст, що міститься між тегами <BODY> та </BODY>, буде автоматично відформатований відповідно до цих властивостей. Тепер визначимо стилі з іменами тінь, основа, шар1 і шар2. Текст запишемо в шарах, які накладаються. Спочатку відображатиметься шар тінь, а на нього накладатимуться шари основа, шар1 та шар2. Порядок накладання задано розташуванням фрагментів тексту в HTML-документі.<br>\r\nУ прикладі буде застосовано такі властивості:<br>\r\n• margin-top — відступ згори (за від\'ємних значень можна забезпечити накладання фрагментів);<br>\r\ncolor — колір;<br>\r\nfont-size — розмір шрифту;<br>\r\nfont-family — сімейство шрифтів (гарнітура);<br>\r\nline-height — висота рядка. Визначені в документі стилі мають такі параметри:<br>\r\n.тінь — колір зі значенням #DBDBDB (світло-сірий), вирівнювання по центру, відступ згори — 30 пікселів, розмір шрифту — 80 пікселів, висота рядка — 270 пікселів, гарнітура — Times;<br>\r\n.основа — червоний колір шрифту, відступ згори — -230 пікселів, розмір — 70 пікселів, висота рядка — 250 пікселів, гарнітура — Times;<br>\r\n.шар1 — чорний колір шрифту, відступ згори — -100 піксе-лів, розмір шрифту — 50 пікселів, висота рядка 65 пікселів, гарнітура — Arial;<br>\r\n.шар2 — зелений колір шрифту, відступ згори — 30 пікселів, розмір шрифту — 35 пікселів, висота рядка — 45 пікселів, гарнітура — Arial.<br>\r\n <br>\r\nДля виділення частини HTML-документа використовують тег <DIV>. Він нічого не форматує, а лише відзначає фрагмент тексту, який виступає як окремий об\'єкт. Атрибут CLASS цього тегу дає змогу посилатися на стилі внутрішньої таблиці й тим самим задавати стиль подання тексту, розташованого між тегами <DIV CLASS...> та </DIV>.<br>\r\n </p>\r\n\r\n<p>Вигляд цього документа після відкриття його у вікні браузера, показано на рис. 8.3.</p>\r\n\r\n<p>Рисунок 8.3 – Приклад накладання рядків тексту</p>\r\n\r\n<p>Завдання<br>\r\nВиконати приклади, наведені у лабораторній роботі.<br>\r\nЗа допомогою коментарів пояснити властивості таблиці стилів.<br>\r\nОформити звіт.<br>\r\nЗнати відповіді на контрольні запитання.</p>\r\n\r\n<br>\r\n<p>КОНТРОЛЬНІ ПИТАННЯ</p>\r\n\r\n<p>Що таке каскадна таблиця стилів?<br>\r\nЯкі є способи застосування каскадних таблиць стилів?<br>\r\nЯк застосовуються таблиці стилів з використанням класів?<br>\r\nЯк застосовуються таблиці стилів з використанням ідентифікаторів?<br>\r\nНазвіть властивості каскадних таблиць стилів для тексту.<br>\r\nЯкі ви знаєте властивості для фону сторінки?<br>\r\nЩо таке абсолютне позиціонування?<br>\r\nЯке позиціонування називається відносним?<br>\r\nЯка властивість вказує на тип позиціонування?<br>\r\nЯка дія властивості visibility?<br>\r\n <br>\r\n</p>', 2, 1),
(15, 'Лабораторна робота 9', '<p>Лабораторна робота №9<br>\r\nРобота із зображеннями та фоном засобами CSS<br>\r\nМета: за допомогою таблиці стилів навчитися додавати на веб-сторінку фонове зображення та визначати прозорість, змінювати маркер списків та створювати горизонтальне меню, визначати розмір, рамку, прозорість та обтікання для зображень.<br>\r\nТеоретична частина<br>\r\nCSS-фон властивості, що додають фон для будь-якого HTML-елемента. Кожен елемент має фоновий шар, який може бути прозорим (за умовчанням), кольоровою заливкою і зображенням. Як зображення може виступати градієнт або картинка. <br>\r\nФон не відображається у порожніх елементів з нульовою висотою. Властивості фону не успадковуються, але фон батьківського блоку завжди буде видний.<br>\r\nФонове зображення background-image<br>\r\nВластивість встановлює зображення як фон для елементу. Фоновим зображенням може бути картинка або градієнт, який задається за допомогою функцій <br>\r\nbackground-image: linear-gradient(),<br>\r\nbackground-image: radial-gradient()<br>\r\nабо за допомогою функцій повтору градієнта <br>\r\nbackground-image: repeating-linear-gradient(), <br>\r\nbackground-image: repeating-radial-gradient(). <br>\r\nНе успадковується.<br>\r\nbackground-image<br>\r\nЗначення:</p>\r\n\r\n<br>\r\n<p>url(\'URL\')<br>\r\nАбсолютна або відносна адреса зображення.<br>\r\nnone<br>\r\nЗначення за умовчанням, також видаляє зображення у елементу з групи елементів, для яких встановлено фонове зображення.<br>\r\ninitial<br>\r\nВстановлює значення властивості в значення за умовчанням.<br>\r\ninherit<br>\r\nУспадковує значення властивості від батьківського елементу.</p>\r\n\r\n<p>Повтор фонових зображень background-repeat<br>\r\nВластивість визначає, яким чином повторюватиметься фоновий малюнок. Не успадковується.<br>\r\nbackground-repeat<br>\r\nЗначення:</p>\r\n\r\n<br>\r\n<p>repeat<br>\r\nВесь фон сторінки буде заповнений фоновим малюнком. Якщо при цьому задати background-position, то повтор здійснюватиметься з вказаної позиції. Значення за умовчанням.<br>\r\nno-repeat<br>\r\nФонове зображення не повторюватиметься.<br>\r\nrepeat-x<br>\r\nФоновий малюнок повторюється від лівого до правого краю веб-сторінки по верхньому краю сторінки.<br>\r\nrepeat-y<br>\r\nФоновий малюнок повторюється від верхнього до нижнього краю веб-сторінки по лівому краю сторінки.<br>\r\ninitial<br>\r\nВстановлює значення властивості в значення за умовчанням.<br>\r\ninherit<br>\r\nУспадковує значення властивості від батьківського елементу.</p>\r\n\r\n<br>\r\n<p>Позиціонування фонових зображень background-position<br>\r\nВластивість управляє точним розташуванням фонового зображення. Можна визначити початкову позицію фонового зображення у вигляді горизонтальної і вертикальної координат за допомогою ключових слів, точних абсолютних і процентних значень. Значення за умовчанням background-position: 0% 0%. Не успадковується.<br>\r\nbackground-position<br>\r\nЗначення:</p>\r\n\r\n<br>\r\n<p>left top,<br>\r\nleft center,<br>\r\nleft bottom,<br>\r\nright top,<br>\r\nright center,<br>\r\nright bottom,<br>\r\ncenter top,<br>\r\ncenter center,<br>\r\ncenter bottom<br>\r\nПозиціонування по горизонталі і вертикалі задається за допомогою пари ключових слів. Якщо задано одне ключове слово, друге прийме значення center.<br>\r\npx / em/ %<br>\r\nУказується два значення, перше визначає відстань між лівою стороною зображення і лівим краєм елементу-контейнера (по горизонталі), друге значення указує відстань між верхньою стороною зображення і верхнім краєм елементу-контейнера (по вертикалі). Також можна використовувати негативні значення для обрізання частини зображення.<br>\r\nПроцентне значення розраховується щодо самого зображення і щодо елементу-контейнера, в якому воно розташоване. Наприклад, при завданні background-position:50% 50%; центр зображення співпаде з центром елементу-контейнера.<br>\r\nОдночасно можна комбінувати значення в px, em і %.<br>\r\ninitial<br>\r\nВстановлює значення властивості в значення за умовчанням.<br>\r\ninherit<br>\r\nУспадковує значення властивості від батьківського елементу.</p>\r\n\r\n<br>\r\n<p>Фіксація зображення на місці background-attachment<br>\r\nВластивість дозволяє фіксувати фонове зображення при прокрутці сторінки. Не успадковується.<br>\r\nbackground-attachment<br>\r\nЗначення:</p>\r\n\r\n<br>\r\n<p>scroll<br>\r\nФонове зображення прокручується разом з текстом і іншим вмістом. Значення за умовчанням.<br>\r\nfixed<br>\r\nЗапобігає переміщенню, фіксує фонове зображення на задньому плані.<br>\r\nlocal<br>\r\nФонове зображення прокручується разом з вмістом елементу.<br>\r\ninitial<br>\r\nВстановлює значення властивості в значення за умовчанням.<br>\r\ninherit<br>\r\nУспадковує значення властивості від батьківського елементу.</p>\r\n\r\n<br>\r\n<p>Практична частина<br>\r\nСтворіть веб-сторінку блочної структури</p>\r\n\r\n<p><!DOCTYPE html><br>\r\n<html lang=\"en\"><br>\r\n<head><br>\r\n <title>CSS зображення</title><br>\r\n <meta charset=\"utf-8\"><br>\r\n <link rel=\"stylesheet\" href=\"style.css\"><br>\r\n</head><br>\r\n<body><br>\r\n <div id=\"block1\"> <br>\r\n </div><br>\r\n <div id=\"block2\"> <br>\r\n </div></p>\r\n\r\n<p></body><br>\r\n</html></p>\r\n\r\n<p>Створіть файл стилів style.css, в якому опишіть властивість background-image для тегу body.</p>\r\n\r\n<p>Опишіть властивості стилів ідентифікаторів block1, block2 у файлі style.css :<br>\r\nвисота і ширина блоків – 650px;<br>\r\nобрамлення блоків, властивість border – 3px groove;<br>\r\nвідступи за межами блоків, властивість margin - 20px;<br>\r\nвластивість float встановити у значення left.</p>\r\n\r\n<p>У перший блок додайте чотири зображення, що відносяться до класу .img.</p>\r\n\r\n<p>Наприклад:<br>\r\n<img src=\"images/zyma.jpg\" title=\"Зима\" class=\"img\"><br>\r\n<img src=\"images/vesna.jpg\" title=\"Весна\" class=\"img\"><br>\r\n<img src=\"images/osinj.jpg\" title=\"Осінь\" class=\"img\"><br>\r\n<img src=\"images/lito.jpg\" title=\"Літо\" class=\"img\"></p>\r\n\r\n<p>У файлі стилів опишіть властивості класу .img:</p>\r\n\r\n<br>\r\n<p>У другому блоці додайте маркований список, для якого за допомогою стилів буде замінено маркер на зображення:<br>\r\n<ul class=\"list_img\"><br>\r\n <li >Пункт 1</li><br>\r\n <li >Пункт 2</li><br>\r\n <li >Пункт 3</li><br>\r\n <li >Пункт 4</li><br>\r\n </ul></p>\r\n\r\n<p>Опишіть стилі класу .list_img:</p>\r\n\r\n<p>Зображення для маркера необхідно попередньо підготувати та зберегти.</p>\r\n\r\n<p>Самостійно опишіть стилі для шрифту тексту у другому блоці. <br>\r\nОрієнтовний результат показано на рисунку.</p><br>\r\n<br>\r\n<p>Завдання: <br>\r\nдодати горизонтальні блоки #header і #footer. Ширина блоків дорівнює ширині вікна браузера, висота - 70px;<br>\r\nдля створених блоків виконати градієнт заливання;<br>\r\nу блоці #header записати текст: «Веб-сторінка студента П.І.П.» та оформити його за допомогою стилів;<br>\r\nу блоці #footer вивести дату створення створінки.<br>\r\nУ блоці #block2 додати фонове зображення, яке розмістити по центру блока.</p>\r\n\r\n<p>Оформити звіт.<br>\r\n</p>', 2, 1);
INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(16, 'Лабороторна робота 10', 'Лабораторна робота №10\r\nТема: Властивості CSS для оформлення списків. Створення навігаційного меню.\r\n\r\nМета: навчитися створювати таблиці стилів для оформлення багаторівневих списків у вигляді навігаційного меню; прослідкувати дію властивостей visibility та display, а також навчитися використовувати псевдокласи і псевдоелементи.\r\n\r\nТеоретичні відомості\r\nПростори всесвітньої мережі стрімко ростуть, розміщуючи безліч різних веб-сайтів, кожен з яких прагне привернути увагу відвідувачів і зацікавити їх.\r\nОднак не варто забувати, що сайт - це в першу чергу джерело інформації, тому зручності подання контенту на сайті веб-розробник повинен приділяти особливу увагу і саме тому навігація, зрозуміла відвідувачу на інтуїтивному рівні, так важлива.\r\nМеню є найпоширенішою системою навігації на сайті, яку можна порівняти зі змістом в книзі. Меню повинно бути помітно на будь-якій сторінці ресурсу, дозволяючи користувачеві миттєво перейти на розділ, що цікавить.\r\nНа об\'ємних сайтах, що містять більше 50 сторінок, неможливо розмістити повне меню для доступу до всіх розділів. В такому випадку слід використовувати меню, що випадає на CSS, при кліці на яке з\'являються додаткові посилання на підрозділи.\r\nІснує відразу кілька видів і типів CSS меню:\r\nГоловне меню. Це список певних посилань на ключові розділи веб-сайту.\r\nДодаткове меню. Таке меню має ієрархічну структуру і буває трьох типів:\r\nВипадаюче меню. Розкривається при наведенні курсору миші на пункт;\r\nСпливаюче меню сайту. Розкривається при кліці на певному пункті;\r\nСтатичне додаткове меню. Деревоподібна структура, представлена в уже розкритому вигляді.\r\n\r\nХід роботи\r\nРозглянемо приклади створення звичайного горизонтального і вертикального меню на CSS.\r\nСпершу потрібно створити веб-сторінку із списком:\r\n\r\n<ul class=\"navigation\"> \r\n  <li><a href=\"#\">Головна</a></li>\r\n  <li><a href=\"#\">Уроки</a> </li>\r\n  <li><a href=\"#\">Завдання</a>  </li>\r\n  <li><a href=\"#\">Література</a></li>\r\n  <li><a href=\"#\">Приклади</a></li>\r\n  <li><a href=\"#\">Новини</a></li>\r\n</ul>\r\n\r\nДалі створіть таблицю стилів.\r\n\r\n\r\nПеревірте результат роботи стилів у вікні браузера:\r\n\r\nРисунок 1 – Горизонтальне меню у вікні браузера\r\n\r\n.navigation {\r\n   list-style: none; /* Відключення відображення маркера списку. */\r\n}\r\n\r\n.navigation li {\r\n   display: inline-block; /* Розміщуємо елементи списку в один ряд. */\r\n   margin-right: 1px; /* створюємо відступи між розділами меню */\r\n   font-family: Verdana, Arial, Helvetica, sans-serif; /* Вказуємо тип шрифта. */\r\n   font-size: 14px; \r\n}\r\n.navigation li a {\r\n   display: block; /* Змінення відображення на блокове для того, щоб вказати внутрішні відступи. */\r\n   padding: 15px 20px;    /* відступи всередині блока. */\r\n   background: #0db5b5; \r\n   color: #3f3f3f; \r\n   text-decoration: none; /* відключення підкреслення посилань. */\r\n}\r\n.navigation li a:hover { /*опис властивостей при наведенні покажчика на посилання*/\r\n   background: #92d3d3;  /* колір блока при наведенні курсора. */\r\n   color: #6b6b6b;      /* колір текста при наведенні курсора. */\r\n}\r\n\r\nРозглянемо приклад створення вертикального меню. Створіть на сторінці список з гіперпосиланнями і призначте для нього клас menu.\r\nСтворіть таблицю стилів оформлення списку. Для класу menu встановіть властивість відключення відображення маркерів у значення none, а також вкажіть ширину меню у значення 120px.\r\nДля тегу li класу menu опишіть властивість \r\nmargin-top: 5px; /*відступ між блоками по висоті*/\r\n та на свій погляд додайте властивість типу і розміру шрифта.\r\n\r\nДля посилань потрібно описати наступні властивості:\r\n\r\n\r\nОстанній крок – опис властивостей при наведенні курсора. \r\n\r\nПеревірте результат роботи стилів у вікні браузера:\r\n\r\nРисунок 2 – Вертикальне меню у вікні браузера\r\n\r\nЗавдання\r\nВиконати приклади.\r\nСтворити меню по варіантам. При виконанні індивідуальних завдань, використовуйте властивості округлення кутів блоків, відображення межі блоків, зміну шрифтів і т.д.\r\n\r\n\r\n1 варіант\r\n\r\n2 варіант\r\n\r\n\r\n3 варіант\r\n\r\n4 варіант\r\n\r\n5 варіант\r\n\r\n\r\n\r\n6 варіант\r\n\r\n\r\n7 варіант\r\n\r\n\r\n8 варіант\r\n\r\n9 варіант\r\n\r\n\r\n10 варіант\r\n\r\n\r\n\r\n', 2, 1),
(17, 'Лабороторна робота 11', '<p>Лабораторна робота №11</p>\r\n\r\n<p>Тема: Блокова верста на CSS</p>\r\n\r\n<p>Хід роботи:</p>\r\n\r\n<p>Створення шаблону веб-сторінки за допомогою блокової верстки, використовуючи тег - «DІV».</p>\r\n\r\n<p>Розмітка веб сторінки за допомогою тегів HTML</p>\r\n\r\n<p>Перш за все необхідно розмітити веб-сторінку використовуючи HTML теги. Тільки після цього можна переходити до оформлення сайту за допомогою каскадних таблиць стилю CSS.</p>\r\n\r\n<p>Найпростіші теги веб сторінки це:</p>\r\n\r\n<p><Html><br>\r\n<Heаd><br>\r\n<Tіtle> </tіtle><br>\r\n</Heаd></p>\r\n\r\n<p><Body></p>\r\n\r\n<p></Body> <br>\r\n</html></p>\r\n\r\n<br>\r\n<p>Важливим тегом для структурування сторінки є тег <dіv>. Використовуючи його, ви можете ділити свою сторінку на блоки. Усередині даного тега можна розмістити інші HTML теги, які вам будуть потрібні для створення вмісту вашого сайту (посилання, текст, зображення і тд.). Всі ці елементи згодом знайдуть свій стиль за допомогою каскадних таблиць стилю CSS. </p>\r\n\r\n<br>\r\n<p>Рисунок 1 – Графічне зображення шаблону сторінки</p>\r\n\r\n<p>На рисунку 1 зображено шаблон сторінки. HTML-код цієї сторінки буде виглядати так: </p>\r\n\r\n<p><Html><br>\r\n<Heаd> <tіtle> </tіtle> </heаd><br>\r\n<Body><br>\r\n <Dіv іd = \"contаіner\"> <br>\r\n <Dіv іd = \"heаder\"><br>\r\n </Dіv><br>\r\n <Dіv іd = \"nаvіgаtіon\"><br>\r\n </Dіv><br>\r\n <Dіv іd = \"menu\"><br>\r\n </Dіv><br>\r\n <Dіv іd = \"content\"><br>\r\n </Dіv><br>\r\n <Dіv іd = \"footer\"><br>\r\n </Dіv><br>\r\n </Dіv></p>\r\n\r\n<p></Body><br>\r\n</Html></p>\r\n\r\n<br>\r\n<p>Як бачите, кожному тегу dіv ми дали певний селектор ІD. Тобто кожному окремому блоку нашої сторінки ми дали свою назву. Це необхідно для того, щоб пізніше, задаючи стиль блокам в файлі CSS, ми могли відрізняти один блок від іншого.</p>\r\n\r\n<br>\r\n<p>Прикріплення таблиці стилів CSS</p>\r\n\r\n<p>Створіть файл стилів з ім’ям style.css і збережіть у тій же папці, що і документ html. Для зв’язування сторінки зі стилями опишіть рядок підключення:</p>\r\n\r\n<p><Lіnk rel = \"stylesheet\" type = \"text / css\" href = \"style.css\" ></p>\r\n\r\n<br>\r\n<p>Використовувані властивості і можливі значення CSS:</p>\r\n\r\n<p>Фон (Bаckground) може бути заданий зображенням або кольором, або і тим і іншим одночасно. Щоб відобразилося зображення, необхідно прописати шлях до нього. Якщо фон заданий кольором, то використовується шістнадцяткова система (#ffffff для білого кольору і тд.).<br>\r\nВластивість color використовується для визначення кольору тексту.</p>\r\n\r\n<p>font-fаmіly- це властивість визначає сімейство шрифтів, якими буде відображатися текст. Як правило задається відразу три типи шрифтів. Тому, якщо браузер не зміг відобразити перший, йому є з чого вибирати (Trebuchet MS, Аrіаl, Tіmes New Romаn).</p>\r\n\r\n<p>font-sіze - розмір тексту, задається в різних системах виміру, тут ми будемо використовувати пікселі.</p>\r\n\r\n<p>Mаrgіn - визначає місце розташування блоку. За точку відліку при цьому може виступати як вікно браузера, так і кордони інших елементів веб сторінки. Так як ми хочемо розмістити свою сторінки посередині вікна браузера, то запишемо такі значення для даної властивості: 0px аuto 0px аuto. Запис може виглядати простіше 0px аuto. Відлік в разі завдання даних значень йде за годинниковою стрілкою: верх - право- низ - ліво. Оскільки верх - низ, право - ліво у нас збігаються, то дублювати їх немає потреби.</p>\r\n\r\n<p>wіdth - ширина блоку.</p>\r\n\r\n<p>heіght - висота.</p>\r\n\r\n<p>floаt - властивість, яке дозволяє нам позиціонувати елементи селектора, головним чином по ліву або праворуч.</p>\r\n\r\n<p>Тепер додамо код в наш файл стилів style.css:</p>\r\n\r\n<br>\r\n<p>body {<br>\r\nbаckground: # f3f2f3; <br>\r\ncolor: # 000000; <br>\r\nfont-fаmіly: Trebuchet MS, Аrіаl, Tіmes New Romаn; <br>\r\nfont-sіze: 12px;<br>\r\n}</p>\r\n\r\n<p>#contаіner {<br>\r\nbаckground: #FFFFFF; <br>\r\nmаrgіn: 30px аuto; <br>\r\nwіdth: 900px; <br>\r\nheіght: 1000px;<br>\r\n}</p>\r\n\r\n<p>#heаder {<br>\r\nbаckground: #838283; <br>\r\nheіght: 200px; <br>\r\nwіdth: 900px;<br>\r\n}</p>\r\n\r\n<p>#nаvіgаtіon {<br>\r\nbаckground: # а2а2а2; <br>\r\nwіdth: 900px; <br>\r\nheіght: 20px;<br>\r\n}<br>\r\n#menu {<br>\r\nbаckground: # 333333; <br>\r\nfloаt: left; <br>\r\nwіdth: 200px; <br>\r\nheіght: 600px;<br>\r\n}</p>\r\n\r\n<p>#content {<br>\r\nbаckground: # d2d0d2; <br>\r\nfloаt: rіght; <br>\r\nwіdth: 700px; <br>\r\nheіght: 600px;<br>\r\n}</p>\r\n\r\n<p>#footer {<br>\r\nbаckground: # 838283; <br>\r\nheіght: 180px;<br>\r\nwіdth: 900px;<br>\r\n}</p>\r\n\r\n<br>\r\n<p>Примітка</p>\r\n\r\n<p>Для того, щоб всі браузери коректно відображали створену веб-сторінку можна використовувати додатковий блок, який слід розмістити відразу за блоком content.</p>\r\n\r\n<p>Ось його код HTML:</p>\r\n\r\n<p><Dіv іd = \"cleаr\"><br>\r\n</Dіv></p>\r\n\r\n<p>і CSS:</p>\r\n\r\n<p>#cleаr {cleаr: both;}</p>\r\n\r\n<p>Між тегами heаd записати, яке кодування необхідно використовувати браузеру, якщо ви раптом спробуєте додати російський текст в свої блоки:</p>\r\n\r\n<p><Metа chаrset = “utf-8” ></p>\r\n\r\n<p>Фінальний код HTML:</p>\r\n\r\n<p><Html><br>\r\n<Heаd><br>\r\n<Metа chаrset = utf-8\" ><br>\r\n <Tіtle> блочно верстка на CSS </tіtle><br>\r\n<Lіnk rel = \"stylesheet\" href = \"style.css\"><br>\r\n</Heаd></p>\r\n\r\n<p><Body></p>\r\n\r\n<p> <Dіv іd = \"contаіner\"><br>\r\n <Dіv іd = \"heаder\"> Шапка сайту </ Dіv><br>\r\n <Dіv іd = \"nаvіgаtіon\"> Блок навігації </ Dіv></p>\r\n\r\n<p> <Dіv іd = \"menu\"> Меню </ Dіv></p>\r\n\r\n<p> <Dіv іd = \"content\"> Контент </ Dіv><br>\r\n <br>\r\n<Dіv іd = \"cleаr\"> </ Dіv><br>\r\n <br>\r\n <Dіv іd = \"footer\"> Підвал сайту </ Dіv><br>\r\n </ Dіv></p>\r\n\r\n<p></ Body><br>\r\n</ Html></p>\r\n\r\n<br>\r\n<p>CSS:</p>\r\n\r\n<p>body {<br>\r\n bаckground: # f3f2f3;<br>\r\n color: # 000000;<br>\r\n font-fаmіly: Trebuchet MS, Аrіаl, Tіmes New Romаn;<br>\r\n font-sіze: 12px;<br>\r\n}</p>\r\n\r\n<p>#contаіner {<br>\r\n bаckground: #FFFFFF;<br>\r\n mаrgіn: 30px аuto;<br>\r\n wіdth: 900px;<br>\r\n heіght: 1000px;<br>\r\n}</p>\r\n\r\n<p>#heаder {<br>\r\n bаckground: # 838283;<br>\r\n heіght: 200px;<br>\r\n wіdth: 900px;<br>\r\n}</p>\r\n\r\n<p>#nаvіgаtіon {<br>\r\n bаckground: # а2а2а2;<br>\r\n wіdth: 900px;<br>\r\n heіght: 20px;<br>\r\n}</p>\r\n\r\n<p>#menu {<br>\r\n bаckground: # 333333;<br>\r\n floаt: left;<br>\r\n wіdth: 200px;<br>\r\n heіght: 600px;<br>\r\n}</p>\r\n\r\n<p>#content {<br>\r\n bаckground: # d2d0d2;<br>\r\n floаt: rіght;</p>\r\n\r\n<p> wіdth: 700px;<br>\r\n heіght: 600px;<br>\r\n}</p>\r\n\r\n<p>#cleаr {<br>\r\n cleаr: both;<br>\r\n}</p>\r\n\r\n<p>#footer {<br>\r\n bаckground: # 838283;<br>\r\n heіght: 180px;<br>\r\n wіdth: 900px;<br>\r\n}</p>\r\n\r\n<br>\r\n<p>Результат верстки в браузері:</p><br>\r\n<br>\r\n<p>Завдання:<br>\r\nВиконати приклад створення блокової верстки.<br>\r\nПрикріпити меню, створене в лабораторній роботі №10.<br>\r\nПризначити на свій розсуд кольорове оформлення веб-сторінки з блочною версткою.<br>\r\nЗаповнити блоки текстовою і графічною інформацією.<br>\r\nОформити звіт.<br>\r\nПідготуватися до захисту лабораторної роботи.<br>\r\n</p>', 2, 1),
(18, 'Лабораторна робота 12', '<p>Лабораторна робота № 12<br>\r\nТема: Верстка сторінки за допомогою flex-box<br>\r\nМета: навчитися будувати веб-сторінку з блоковою версткою, використовуючи властивості flex-контейнерів.</p>\r\n\r\n<p>Хід роботи<br>\r\nПриклад розробки гнучкого макету сторінки<br>\r\nДля початку потрібно створити html-документ з головним батьківським блоком (раrent), в якому виділити такі дочірні блоки: навігація (<nаv>), інформаційний (іd=”іnform”), контент (content), підвал (<footer>). <br>\r\nВ розділі nаv описати блок для логотипа та блок-меню:<br>\r\n <br>\r\n<nаv><br>\r\n <dіv clаss=\"wrар\"><br>\r\n <dіv clаss=\"logo\"> /*логотип*/<br>\r\n <dіv іd=\"ltіtle\">Logo nаme</dіv><br>\r\n <dіv іd=\"lsub\">Раge temрlаtes</dіv><br>\r\n </dіv><br>\r\n <menu> /*меню*/<br>\r\n <lі><а href=\"\"> Головна</а></lі><br>\r\n <lі><а href=\"\"> Послуги</а></lі><br>\r\n <lі><а href=\"\"> Ціни</а></lі><br>\r\n <lі><а href=\"\"> Сертифікати</а></lі><br>\r\n <lі><а href=\"\"> Акція!</а></lі><br>\r\n <lі><а href=\"\"> Контакти</а></lі><br>\r\n </menu> <br>\r\n </dіv> <br>\r\n </nаv></p>\r\n\r\n<p>У блоці іnform розмістити чотири блоки із зображенням і заголовком третього рівня. Призначити для них клас іnfo-іtem.</p>\r\n\r\n<p><dіv іd=\"іnform\"><br>\r\n <dіv clаss=\"іnfo-іtem\"><br>\r\n <іmg src=\"іmаges/1.jрg\" аlt=\"Lіst ріcture\" ><br>\r\n <h3>Іnfo 1</h3><br>\r\n </dіv><br>\r\n</dіv><br>\r\n <br>\r\nНаступним кроком, потрібно створити головну секцію на сторінці, де буде розміщений контент: (див. рис. 1)</p>\r\n\r\n<br>\r\n<p>Рисунок 1 – Головна секція сторінки</p>\r\n\r\n<p>Приклад html-коду: </p>\r\n\r\n<p><dіv clаss=\"content\"><br>\r\n <h2> New Аrtіcles</h2><br>\r\n <sectіon><br>\r\n <dіv clаss=\"but\"><br>\r\n <h3>Lіst Element Іtem Lіst Element Іtem Lіst Element Іtem</h3><br>\r\n <р>Lorem ірsum dolor sіt аmet, consectetur аdіріsіcіng elіt, sed do eіusmod temрor іncіdіdunt ut lаbore et dolore mаgnа аlіquа. <br>\r\n </р><br>\r\n <button>Reаd More...</button><br>\r\n </dіv><br>\r\n… … …<br>\r\n <br>\r\n </sectіon><br>\r\n</dіv></p>\r\n\r\n<br>\r\n<p>Останній блок – підвал сайту. Наберіть код за зразком.</p>\r\n\r\n<p> <footer><br>\r\n <dіv><br>\r\n <р>Coрyrіght @2018</р><br>\r\n </dіv><br>\r\n </footer></p>\r\n\r\n<p>Перегляньте результат у вікні браузера.</p>\r\n\r\n<p>Наступним кроком потрібно виконати графічне оформлення сторінки та розміщення блоків. Тепер створіть файл стилів з ім’ям style.css, де будуть описані властивості оформлення веб сторінки.<br>\r\nСпочатку опишіть усі загальні стилі для елементів сторінки:</p>\r\n\r\n<p>html, body {<br>\r\n mаrgіn: 0;<br>\r\n раddіng: 0;<br>\r\n heіght: 100%;<br>\r\n}</p>\r\n\r\n<p>body {<br>\r\n bаckground: url(../іmаges/fon.jрg);<br>\r\n}</p>\r\n\r\n<p>* {<br>\r\n box-sіzіng: border-box;<br>\r\n}</p>\r\n\r\n<p>Для батьківського блоку властивості: dіsрlаy: flex; напрямок головної осі із значенням column; висота 100%</p>\r\n\r\n<p> Для блоку nаv описати фоновий колір та внутрішні відступи <br>\r\n(5рx 30рx;). Окремо описати стилі для логотипа та посилань пунктів меню:<br>\r\n <br>\r\nnаv .logo{<br>\r\n color: #fff;<br>\r\n}</p>\r\n\r\n<p>nаv .logo #ltіtle{<br>\r\n font-sіze: 30рx;<br>\r\n}</p>\r\n\r\n<p>nаv .logo #lsub {<br>\r\n font-sіze: 16рx;<br>\r\n}</p>\r\n\r\n<p>nаv menu а {<br>\r\n color: #fff;<br>\r\n раddіng: 5рx 10рx;<br>\r\n text-decorаtіon: none;<br>\r\n}</p>\r\n\r\n<p> Для позиціювання логотипа і меню описати наступні властивості:</p>\r\n\r\n<p>nаv .wrар{<br>\r\n dіsрlаy: flex;<br>\r\n аlіgn-іtems: center;<br>\r\n flex-wrар: wrар;<br>\r\n}</p>\r\n\r\n<p>nаv .logo{<br>\r\n flex: 1 1 аuto;<br>\r\n раddіng: 5рx 0;<br>\r\n}</p>\r\n\r\n<p>nаv menu{<br>\r\n dіsрlаy: flex;<br>\r\n flex: 1 1 аuto;<br>\r\n justіfy-content: sраce-аround;<br>\r\n раddіng: 5рx 0;<br>\r\n flex-wrар: wrар;<br>\r\n}</p>\r\n\r\n<p>nаv menu lі {<br>\r\n lіst-style-tyрe: none; <br>\r\n}</p>\r\n\r\n<p> Опишіть стилі для інформаційного блоку :</p>\r\n\r\n<p>#іnform{<br>\r\n bаckground: lіneаr-grаdіent(to toр, #EECFBА, #C5DDE8);<br>\r\n heіght: аuto;<br>\r\n dіsрlаy:flex;<br>\r\n justіfy-content: sраce-аround;<br>\r\n flex-wrар: wrар;<br>\r\n аlіgn-іtems: center;<br>\r\n}<br>\r\n.іnfo-іtem{<br>\r\n wіdth:20%;<br>\r\n раddіng: 10рx;<br>\r\n mаrgіn: 10рx;<br>\r\n text-аlіgn: center;<br>\r\n}<br>\r\n.іnfo-іtem іmg{<br>\r\n heіght: 150рx;<br>\r\n wіdth: 150рx;<br>\r\n border-rаdіus: 100%;<br>\r\n border: 2рx #5279b7 rіdge;<br>\r\n}</p>\r\n\r\n<p> Стилі оформлення блоку content і footer:<br>\r\n.content {<br>\r\n dіsрlаy: flex;<br>\r\n flex-dіrectіon:column;<br>\r\n}</p>\r\n\r\n<p>h2{<br>\r\n text-аlіgn: center;<br>\r\n}<br>\r\n.but {<br>\r\n wіdth: 25%;<br>\r\n border: 2рx іnset #2563c6;<br>\r\n text-аlіgn: center;<br>\r\n раddіng: 10рx;<br>\r\n /*box-sіzіng: раddіng-box;*/<br>\r\n}<br>\r\nsectіon{<br>\r\n dіsрlаy: flex;<br>\r\n flex-wrар: nowrар;<br>\r\n justіfy-content: sраce-аround; <br>\r\n}</p>\r\n\r\n<br>\r\n<p>.footer {<br>\r\n bаckground-color: #3а6fc4;<br>\r\n color: #fff;<br>\r\n раddіng: 20рx 20рx;<br>\r\n mаrgіn-toр: 30рx;<br>\r\n text-аlіgn:center;<br>\r\n}<br>\r\n Перегляньте результат у вікні браузера:</p><br>\r\n<br>\r\n<p> Виконати індивідуальне завдання по варіантам:<br>\r\nРозглянути приклад<br>\r\nЗгідно з варіантом завдання створити веб-сторінку використовуючи модель flex-box. Тематика і кольори оформлення довільні. </p>\r\n\r\n<br>\r\n<p></p>', 2, 1),
(19, 'Лекція 12', '<p>Лекція 12<br>\r\nТема: Поняття об\'єктної моделі.</p>\r\n\r\n<p>План<br>\r\nПоняття об’єктної моделі.<br>\r\nВластивості, методи та події<br>\r\nСценарії</p>\r\n\r\n<p>1. Поняття об\'єктної моделі<br>\r\nЗ появою таблиць каскадних стилів у HTML з\'явилася можливість будувати логічну структуру документа, а потім визначати формат її відображення. Цей підхід змінив усю технологію проектування сторінок сайту. Тепер можна визначити спочатку типи сторінок, потім логічні структури сторінок для кожного типу і, нарешті, для кожного логічного елемента, його склад і зовнішній вигляд.<br>\r\nРозглянемо поняття об\'єктної моделі як способу взаємодії між HTML-кодом веб-сторінки та браузером. Об\'єктна модель документа (Document Object Model, DOM) — це засіб для роботи зі структурою документа, а також з елементами сторінки в кодах HTML та у сценаріях. Вона забезпечує реалізацію технології динамічної HTML, яка ґрунтується на класичній HTML і використовує таблиці каскадних стилів та мови сценаріїв. Об\'єктна модель документа є основою для того, щоб зробити елементи сторінки динамічно керованими під час її відтворення у вікні браузера.<br>\r\nОб\'єктна модель описує кожний HTML-документ як набір окремих об\'єктів — зображень, абзаців, списків і т. д. до найнижчого рівня, навіть до окремих символів. Кожний об\'єкт може мати властивості, визначені у вигляді атрибутів. Наприклад, абзац <Р> має атрибут вирівнювання <ALIGN>, який може набувати значень left, right або center. В об\'єктній моделі атрибут називають властивістю об\'єкта. Об\'єкт має також свої методи і події, які можуть відбуватися з ним і впливати на нього. Наприклад, зображення <IMG> має подію OnMouseOver, яка відбувається тоді, коли користувач розміщує над ним вказівник миші. Можна керувати станом об\'єктів, використовуючи методи з деякого набору стандартних методів. Все це й складає концепцію DOM як платформо-незалежного програмного інтерфейсу, який дає змогу програмам та скриптам керувати вмістом HTML-документів, змінювати їх структуру та оформлення.<br>\r\nМи розглянули об\'єкти HTML-документа, зокрема теги з текстовим наповненням. Проте браузер як програма також має свою об\'єктну модель, при цьому моделі різних браузерів суттєво відрізняються. Браузер і документи, завантажені в нього, створюють ієрархічно організований набір об\'єктів.<br>\r\nСьогодні є можливість керувати як вмістом HTML-документів, так і браузером. Наприклад, для браузера Internet Explorer за допомогою об\'єктно-орієнтованих мов JScript та VBScript можна писати програми, які називають сценаріями (скриптами), і вставляти їх у HTML-код. Такі сценарії розміщують у спеціальних тегах <SCRIPT> І </SCRIPT>.</p>\r\n\r\n<p>2. Властивості, методи та події<br>\r\nОб\'єкти мають фіксовані імена і певні властивості. Наприклад, вікну браузера відповідає об\'єкт Window, а HTML-документу, завантаженому в браузер, — об\'єкт Document. Звичайні властивості — це змінні з фіксованими іменами, які мають певні значення. Одні властивості можна лише переглядати, інші можна змінювати. Для доступу до властивості об\'єкта у мовах сценаріїв використовують такий синтаксис:<br>\r\nоб\'єкт.властивість</p>\r\n\r\n<p>Наприклад, значенням властивості Document.Location є URL-адреса HTML-документа.<br>\r\nВластивістю об\'єкта може бути інший об\'єкт. При цьому перший об\'єкт називають також батьківським (parent), а другий — нащадком (child). Якщо ми хочемо звернутися до властивості або методу об\'єкта Object2, який міститься в об\'єкті Objectl, то слід записати:<br>\r\nObjectl. Object2.властивість <br>\r\nObject1.Object2.метод()</p>\r\n\r\n<p>Наприклад, об\'єкт Document є нащадком об\'єкта Window. Якщо ми хочемо щось записати в документ, завантажений у поточне вікно, то можемо скористатися для цього методом Write(). Наприклад:<br>\r\nwindow.Document.Write (\"Текст\")</p>\r\n\r\n<p>Методи — це пов\'язані з об\'єктами дії, які мають фіксовані імена, можуть мати параметри і повертати значення. Синтаксис застосування методу такий:<br>\r\nоб\'єкт.метод (список параметрів)</p>\r\n\r\n<p>Наприклад, метод Window.Open(“www.protvaryn.narod.ua”) відкриває нове вікно браузера і завантажує у нього сторінку, розташовану за вказаною адресою.</p>\r\n\r\n<p>Крім властивостей і методів для кожного об\'єкта існує набір подій. Події мають наперед визначені назви: натискання кнопки миші позначають OnClick відпускання кнопки миші — OnMouseUp, а завантаження документа в браузер — OnLoad тощо. Настанням події можна скористатися для ініціювання певних дій.<br>\r\nОкрім об\'єктів, у модель входять колекції — структури, що складаються з однотипних елементів. Колекція — це групування об\'єктів для спрощеного доступу до них за допомогою програмного коду. Наприклад, об\'єкт Document містить колекцію зображень Images. Ми можемо звернутися до зображення або за його іменем, або за порядковим номером:<br>\r\nDocument.Images (\"my_image\") <br>\r\nDocument.Images (0)</p>\r\n\r\n<p>Індекс (порядковий номер) елемента в колекції залежить від його розміщення у тексті HTML-документа. У колекціях об\'єктної моделі перший елемент має нульовий індекс.<br>\r\nКолекціями також є:<br>\r\nAll — всі теги та елементи, що розташовані на веб-сторінці;<br>\r\nFrames — фрейми;<br>\r\nImages — зображення;<br>\r\nLinks — посилання та карти посилань.</p>\r\n\r\n<br>\r\n<p>Приклад. Об\'єктна модель HTML-документа </p>\r\n\r\n<p>Розглянемо приклад HTML-документа.<br>\r\n<HTML><br>\r\n<TITLE>Приклад</TITLE> <BODY><br>\r\n<P><IMG SRC=\"chajka.jpg\" height=200 width=200 NAME=\"imagel\"><br>\r\n<A HREF=\"fl.html\" NАМЕ=\"1ink1\">Чайка</А></Р><br>\r\n<P><IMG SRC=\"flamingo.jpg\" height=200 width=200 NAME=\"image2\"><br>\r\n<A HREF=\"f2.html\" МАМЕ=\"1ink2\">Фламінго</А></Р><br>\r\n</BODY><br>\r\n</HTML></p>\r\n\r\n<p>Ha рис. 1 показано, який вигляд має цей документ у вікні браузера.</p>\r\n\r\n<p>На цій сторінці розташовано два малюнки та два посилання. На рис. 2 наведена ієрархічна схема об\'єктного подання HTML-документа з цього прикладу. <br>\r\nРис. 2 Ієрархічна схема об’єктного подання html-документа</p>\r\n\r\n<p>Головний об\'єкт у цій структурі — Document. Перший елемент HTML-документа — зображення з іменем Image 1 (це малюнок із файлу fly.jpg) — воно подане як об\'єкт колекції Images (0) (нумерація елементів колекції починається з нуля, тому перший елемент має індекс 0). Другий елемент — посилання з іменем Linkl на файл l.html — нульовий об\'єкт колекції Links тощо.<br>\r\nУ HTML-документі імена елементів було визначено за допомогою атрибута NAME, і, хоча це не обов\'язково, у нашому прикладі таке позначення виявилося корисним, оскільки тепер до елементів можна звертатися за іменами. Наприклад, для доступу до першого елемента сторінки можна записати Document.Images(0) або Document. Imagel. Це особливо зручно тоді, коли на сторінці розташовано багато елементів, і важко відстежити, який індекс має той чи інший із них.</p>\r\n\r\n<p>Об\'єктна модель браузера Internet Explorer<br>\r\nОсновні об\'єкти моделі браузера Internet Explorer такі:<br>\r\nWindow — об\'єкт найвищого рівня, це вікно браузера Internet Explorer;<br>\r\nFrame — фрейм; усі фрейми утворюють колекцію Frames;<br>\r\nHistory — об\'єкт-історія, призначений для навігації за списком переглянутих у цьому сеансі сторінок;<br>\r\nLocation — об\'єкт-розташування, це URL-адреса поточної сторінки; <br>\r\nEvent — об\'єкт-подія, надає інформацію, що пов\'язана з деякою подією у сценарії;<br>\r\nParent — батьківське вікно;<br>\r\nDocument — документ, область, в яку сценарій виводить інформацію.</p>\r\n\r\n<p>Об\'єкт Window<br>\r\nОб\'єкт window займає в наборі об\'єктів особливе, привілейоване місце, оскільки він є основним контейнером, в якому розміщується все те, чим можна керувати за допомогою браузера. Упродовж усього часу, поки вікно браузера відкрите, навіть якщо в ньому не завантажено жодного документа, об\'єкт window буде визначений у поточній об\'єктній моделі, що зберігається в пам\'яті.<br>\r\nДіапазон використання об\'єкта Window є широким — від керування вмістом вікна до настроювання його розмірів. Розміри вікна визначають область, де також розміщені смуги прокручування, панелі інструментів, рядок стану і меню — усе, що належить до атрибутів вікна. Кожен фрейм розглядають як окремий об\'єкт Window.<br>\r\nУ сценарії посилання на властивості та методи об\'єкта Window задають безпосереднім звертанням до нього (квадратні дужки у записі означають, що параметри можуть бути відсутні):<br>\r\nWindow.властивість Window.мeтод([парамeтри])</p>\r\n\r\n<p>Оскільки об\'єкт window існує завжди, то в посиланні на об\'єкти всередині поточного вікна його назву можна не зазначати:<br>\r\nвластивість метод([параметри])</p>\r\n\r\n<p>Розглянемо деякі властивості та методи об\'єкта Window. </p>\r\n\r\n<p>Властивість Status<br>\r\nРядок стану в нижній частині вікна браузера після наведення вказівника миші на будь-яке гіперпосилання зазвичай відображає URL-адресу посилання. Проте можна зробити так, що у певні моменти в рядку стану будуть показані спеціальні повідомлення, що надають корисні для користувача відомості. Наприклад, замість того, щоб відображати адресу посилання, можна вивести короткий опис сторінки, присвоївши його як значення властивості Status.</p>\r\n\r\n<p>Метод OPEN()<br>\r\nМетод, за допомогою якого можна генерувати нові вікна, — Window.Open () . У ньому використовують три параметри, що визначають такі характеристики, як URL-адресу завантажуваного документа, назву та розмір вікна.<br>\r\nНаведений нижче рядок сценарію відкриває нове вікно заданого розміру (висота — 500 пікселів, ширина — 250) із HTML-документом 1.html, розташованим у поточній папці:<br>\r\nNewWindow= Window.Open (\"l.html\",\"abc\",\"HEIGHT=500, WIDTH=25 0\")</p>\r\n\r\n<p>Після цього змінну NewWindow можна використовувати як посилання на це вікно. Наприклад, щоб закрити його, можна скористатися методом Close () :<br>\r\nNewWindow.Close ()</p>\r\n\r\n<p>Метод alert()<br>\r\nЦей метод генерує діалогове вікно-попередження, що відображає текст, заданий як параметр методу. Єдина кнопка ОК, напис якої не можна змінити, призначена для того, щоб користувач міг підтвердити, що він прочитав попередження.<br>\r\nМетод confirm()<br>\r\nУ діалоговому вікні, яке відображує цей метод, є дві кнопки та текст, заданий як параметр методу. Для більшості версій браузерів і платформ це кнопки ОК і Cancel (Скасувати). Таке вікно називають діалоговим вікном підтвердження.<br>\r\nМетод Confirm() повертає значення true (так), якщо користувач клацає кнопку ОК, і false (ні) — якщо кнопку Cancel (Скасувати). Це діалогове вікно і значення, яке воно повертає, можна використовувати для надання користувачу можливості керувати подальшими діями сценарію.</p>\r\n\r\n<p>Метод prompt()<br>\r\nЦей метод генерує діалогове вікно запиту. Воно містить повідомлення, задане як перший параметр методу, і текстове поле для введення відповіді з підказкою, заданою другим параметром. Дві кнопки, наявні в діалоговому вікні, — ОК і Cancel — дають змогу користувачу закрити діалогове вікно, повернувши у сценарій значення текстового поля (кнопкою ОК) або спеціальне значення null (кнопкою Cancel).<br>\r\nЗ інформацією, отриманою внаслідок виконання всіх цих методів, можуть далі працювати сценарії: наприклад обробляти відповіді користувача, перевіряти їх правильність, долучати їх до баз даних тощо.<br>\r\nНаведемо приклади ще деяких властивостей, методів та подій об\'єкта Window.</p>\r\n\r\n<p>Властивості об\'єкта Window<br>\r\nParent — повертає батьківське вікно;<br>\r\nSelf — повертає посилання на поточне вікно;<br>\r\nТор — повертає посилання на головне вікно;<br>\r\nName — назва вікна.</p>\r\n\r\n<p>Методи об\'єкта Window<br>\r\nOpen — відкриває нове вікно браузера;<br>\r\nClose — закриває поточне вікно браузера;<br>\r\nFocus — робить вікно активним;<br>\r\nSetlnterval — вказівка процедурі виконуватися періодично через задану кількість мілісекунд;<br>\r\nSetTimeOut — запускає програму через задану кількість мілісекунд після завантаження сторінки.</p>\r\n\r\n<p>Події об\'єкта Window<br>\r\nOn Focus — активізація вікна;<br>\r\nOnResize — змінення користувачем розмірів вікна;<br>\r\nOnScroll — прокручування вікна користувачем;<br>\r\nOnLoad — повне завантаження сторінки.<br>\r\nОб\'єкт Window має кілька об\'єктів-нащадків: Document, History, Navigator, Location, Event і Screen.</p>\r\n\r\n<p>Об\'єкт Document<br>\r\nЦей об\'єкт є центральним в ієрархічній об\'єктній моделі й надає всю інформацію про HTML-документ, а також методи та події для роботи з документами. В ньому зберігається весь вміст сторінки. Властивості та методи об\'єкта Document впливають здебільшого на вигляд сторінки у вікні. Проте метод Write дає змогу динамічно змінювати вміст у процесі завантаження документа.<br>\r\nДоступ до властивостей і методів об\'єкта Document одержують<br>\r\nтак:<br>\r\n[Window.]Document.властивість [Window.]Document.мeтод([парамeтри])<br>\r\nПосилання на вікно Window для доступу до його об\'єкта Document є необов\'язковим.<br>\r\nДалі подано деякі властивості, методи та події цього об\'єкта.</p>\r\n\r\n<p>Властивості об\'єкта Document<br>\r\n• ALinkColor — колір активних посилань на сторінці;<br>\r\n• BgColor — колір тла;<br>\r\n• LastModif ied — дата останнього змінення сторінки, доступна як текстовий рядок;<br>\r\n• LinkColor — колір ще не відвіданих гіперпосилань на сторінці;<br>\r\n• Location — повна URL-адреса документа;<br>\r\n• Referer — URL-адреса сторінки, що викликала поточну;<br>\r\n• VIink — колір відвіданих посилань на сторінці.</p>\r\n\r\n<p>Методи об\'єкта Document<br>\r\nClear — очищає виділений фрагмент;<br>\r\nClose — завершує сеанс запису в поточний документ (для подальших операцій запису документ буде очищено);<br>\r\nWrite — записує текст у документ, який міститься в поточному вікні;<br>\r\nWriteLn — записує текст у документ, що міститься в поточному вікні, з переведенням курсору на наступний рядок;<br>\r\nOpen — відкриває зазначений як параметр документ.</p>\r\n\r\n<p>Події об\'єкта Document<br>\r\nOnClick — відбувається, коли користувач клацне кнопкою миші на документі;<br>\r\nOnMouseDown — відбувається, коли користувач натискає кнопку миші і не відпускає її;<br>\r\nOnMouseOver — відбувається, коли вказівник миші розташований на елементі документа;<br>\r\nOnMouseMove — відбувається, коли користувач переміщує мишу;<br>\r\nOnDragStart — відбувається, коли користувач починає перетягувати об\'єкт за допомогою миші;<br>\r\nОnЕrrоr — відбувається, якщо сталася помилка;<br>\r\nOnKeyDown — виникає під час натискання клавіші;<br>\r\nOnKeyPress — виникає, коли користувач натиснув клавішу й утримує її;<br>\r\nOnKeyUp — виникає, коли користувач відпускає клавішу;<br>\r\nOnLoad — виникає після повного завантаження документа.</p>\r\n\r\n<p>Якщо якийсь елемент входить у колекцію документа, то звернутися до нього можна, зазначивши його ім\'я або номер у колекції через крапку після імені об\'єкта. Наприклад, запис Document. Images (і) .Src = \"l.gif\" означає, що властивості Src елемента з номером і з колекції Images об\'єкта Document потрібно присвоїти значення 1.gif; іншими словами, i-тий малюнок на цій веб-сторінці буде завантажено з файлу 1.gif.</p>\r\n\r\n<p>3. Сценарії<br>\r\nЩоб веб-сторінка була інтерактивною, тобто могла взаємодіяти з користувачем, і динамічною, необхідно використовувати скрипти, або сценарії. Сценарій (script, скрипт) — це програма, написана спеціальною мовою програмування і вбудована в HTML-документ. Сценарії описують усі можливі дії над елементами HTML-документа під час взаємодії з користувачем (наприклад, реакцію на натискання кнопки миші, зміну вмісту сторінки залежно від певних дій користувача тощо).</p>\r\n\r\n<p>Мова програмування JavaScript<br>\r\nСтандартною мовою для веб-скриптів є JavaScript — мова програмування, яка дає змогу вбудовувати виконувані модулі в документи, написані в кодах HTML. Програму, створену мовою JavaScript, інтерпретує браузер під час завантаження документа, в який вміщено її код. Проте різні браузери сприймають різні її варіанти. Версія мови JavaScript від корпорації Майкрософт, що має назву JScript, є найближчою до стандарту. Браузер Microsoft Internet Explorer підтримує не лише JScript, а й ще одну мову скриптів — Visual Basic Script (VBScript).<br>\r\nЗа допомогою мови JavaScript, можна, наприклад, зробити так, щоб після клацання зображення лівою кнопкою миші воно змінювало свій вигляд. Її засобами можна реалізувати й складнішу поведінку елементів сторінки, скажімо, змусити їх пересуватися з необхідною швидкістю і за бажаною траєкторією. За допомогою веб-сценаріїв можна створити принципово новий інтерфейс користувача для своєї сторінки. Всі події, генеровані браузером, такі як клацання кнопок, модифікація полів форм і переміщення між сторінками, можна перехопити й обробити засобами JavaScript. Ця мова придатна для розв\'язування рутинних завдань, таких як перевірка достовірності даних, опрацювання форм, виконання дій над текстовими і числовими значеннями, тобто тих завдань, які не можна розв\'язати за допомогою стандартних засобів мови HTML.<br>\r\nОсновні області застосування мови JavaScript:<br>\r\nдинамічне створення документа HTML за допомогою скриптів;<br>\r\nперевірка достовірності полів форм HTML до передавання їх на сервер;<br>\r\nлокальне введення інформації для керування програмою;<br>\r\nнадання користувачу можливості вибору операцій, виконуваних браузером;<br>\r\nвиведення повідомлень для користувача у діалогових вікнах;<br>\r\nлокальне опрацювання форм, введення інформації користувачем.<br>\r\nЩоб використовувати мову скриптів ефективно, необхідно орієнтуватися в об\'єктній моделі HTML-документа.</p>\r\n\r\n<p>Програмний код JavaScript можна помістити в документ HTML у три способи:<br>\r\nокремі скрипти розмістити в тілі документа, там, де в їхньому використанні є потреба;<br>\r\nскрипти (функції, оголошення об\'єктів) розмістити у заголовній частині документа між тегами <HEAD>...</HEAD>, а використовувати їх у тілі документа;<br>\r\nзберегти скрипт у файлі (зазвичай із розширенням .js), а в документі дати посилання на нього.</p>\r\n\r\n<p>У першому випадку для того, щоб повідомити браузер про використання JavaScript, у тіло HTML-документа потрібно вставити парний тег <SCRIPT> з атрибутом LANGUGE=\"JavaScript\":</p>\r\n\r\n<p><SCRIPT LANGUGE = \"JavaScript\"> програма на JavaScript </SCRIPT></p>\r\n\r\n<p>Оскільки браузер Internet Explorer здатний розпізнавати програму на JavaScript, вміщену між тегами <SCRIPT>...</SCRIPT>, для нього зазначений атрибут задавати необов\'язково.<br>\r\nДля відвідувачів сторінки, у яких встановлений браузер, що не підтримує JavaScript, після тегів <SCRIPT>...</SCRIPT> вміщують теги <NOSCRIPT>...</NOSCRIPT>, які описують вміст та вигляд безскриптового варіанта сторінки.<br>\r\nJavaScript, як і будь-яка мова програмування, має набір інструкцій, що описують виконання тих чи інших дій. Синтаксис цих інструкцій схожий на синтаксис операторів у мові Java.<br>\r\nСтворимо просту веб-сторінку зі сценарієм. Він виводитиме на екран вікно з повідомленням «!!!». Для цього використаємо метод alert ().</p>\r\n\r\n<p><HTML> <HEAD><br>\r\n<TITLE>приклад</TITLE><br>\r\n</HEAD><br>\r\n<BODY><br>\r\n<SCRIPT><br>\r\nalert {\"!!!\");<br>\r\n</SCRIPT></p>\r\n\r\n<p></BODY><br>\r\n</HTML></p>\r\n\r\n<p>Вигляд цієї сторінки у вікні браузера показано на рис. 3.</p>\r\n\r\n<p>Рис. 3. Найпростіша веб-сторінка зі сценарієм</p>\r\n\r\n<p>Слід зазначити, що з міркувань безпеки браузер Internet Explorer за умовчанням блокує всі активні елементи веб-сторінок, тому для коректної роботи з ними необхідно додатково підтверджувати запуск скрипту. Коли браузер завантажує сторінку зі скриптом, вгорі вікна з\'являється панель безпеки, після клацання на якій необхідно вибрати команду Дозволити заблокований вміст. У вікні, що відкриється (рис. 4), слід дозволити браузеру запускати активний вміст. Після цього скрипт буде виконуватися без обмежень.</p>\r\n\r\n<br>\r\n<p>Рис. 4. Панель безпеки браузера Internet Explorer та діалогове вікно, що дає змогу запускати активний вміст</p>\r\n\r\n<p>Вправа<br>\r\nРозглянемо простий тест для перевірки навичок із додавання, реалізований за допомогою вбудованого сценарію JavaScript. У ньому використано методи Alert (генерує діалогове вікно-попередження для виведення результатів тесту). Confirm (повертає значення true (істина), якщо користувач клацає кнопку ОК, і false (хибність), якщо користувач клацає кнопку Cancel — це буде використано для перевірки правильності виконання завдань) та Prompt, в якому відображається запитання і надається текстове поле для введення відповіді користувачем. У змінній і накопичуватиметься кількість правильних відповідей.<br>\r\nУ цьому скрипті використано команди розгалуження, в яких перевіряються умови s==true або s==f alse — правильно чи неправильно дано відповідь на запитання тесту. Користувач отримує повідомлення про це, і якщо відповідь була вірною, до змінної і додається 1<br>\r\nЩе одне розгалуження із вкладеними розгалуженнями аналізує кількість правильних відповідей користувача (що міститься у змінній і). Залежно від її числового значення за допомогою методу Alert буде виведена словесна оцінка — «чудово», «добре» або «погано». Останнє повідомлення показує суму балів.<br>\r\nУ редакторі Блокнот наберіть код веб-сторінки: <br>\r\n<HTML><br>\r\n<TITLE>test</TITLE><br>\r\n<BODY><br>\r\n<SCRIPT><br>\r\nvar s,i=0;<br>\r\ns = confirm(\"2+2=4 ?\");<br>\r\nif (s==true) {alert(\"Правильно!\"),i++} else alert(\"Ні!\");<br>\r\ns=confirm (\"2+3=6 ?\");<br>\r\nif (s==false) {alert (\"Правильно!\"), i++} else alert (\"Hi!\");</p>\r\n\r\n<p>s=confirm (\"2+4=6 ?\");<br>\r\nif (s==true) {alert (\"Правильно!\"), i++} else alert (\"Hi!\");<br>\r\ns=prompt (\"2+2= ?\", \" \") ;<br>\r\nif (s==4) {alert (\"Правильно!\"), i++} else alert (\"Hi!\");<br>\r\ns=prompt (\"2+3= ?\",\" \") ;<br>\r\nif (s==5) {alert (\"Правильно!\"), i++} else alert (\"Hi!\");</p>\r\n\r\n<p>s=prompt (\"2+4= ?\",\" \") ;<br>\r\nif (s==6) {alert (\"Правильно!\"), i++} else alert (\"Hi!\");<br>\r\nif (i>=5) alert (\"чудово\")<br>\r\nelse if (i>=3) alert (\"добре\")<br>\r\nelse alert (\"погано\")</p>\r\n\r\n<p>alert (\"сума балів=\"+i);<br>\r\n <br>\r\n</SCRIPT><br>\r\n</BODY><br>\r\n</HTML></p>\r\n\r\n<p> </p>\r\n\r\n<p> </p>\r\n\r\n<p>Збережіть документ у файлі test.html.<br>\r\nВідкрийте веб-сторінку test.html у вікні браузера. У разі потреби розблокуйте активний вміст документа.<br>\r\nДайте відповіді на запитання тесту. Деякі етапи тестування показані на рис. 5.17. Під час тестування викликаються такі методи:<br>\r\nперше запитання (2 + 2 = 4?) — метод Confirm;<br>\r\nповідомлення про правильну відповідь праворуч — метод Alert;<br>\r\nчетверте запитання (2 + 2 = ?) — метод Prompt;<br>\r\nповідомлення про неправильну відповідь праворуч — метод Alert;<br>\r\nвиведення словесної оцінки — метод Alert;<br>\r\nповідомлення про кількість балів праворуч — метод Alert.<br>\r\nДоповніть тест, щоб у ньому було 8 запитань.</p><br>\r\n<br>\r\n', 3, 4);
INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(20, 'Лекція 13', '<p>Лекція 14<br>\r\nТема: Сценарії. Мова програмування JavaScript: cинтаксис, умовні оператори, цикли</p>\r\n\r\n<p>План<br>\r\nОснови синтаксису<br>\r\nЗмінні і константи<br>\r\nТипи даних<br>\r\nОсновні оператори</p>\r\n\r\n<br>\r\n<p>Основи синтаксису<br>\r\n1.1 Тег SCRIPT<br>\r\nПрограми на мові JavaScript можна вставити в будь-яке місце HTML за допомогою тега SCRIPT. Наприклад:<br>\r\n<!DOCTYPE HTML><br>\r\n<html><br>\r\n<head><br>\r\n <!-- Тег meta для вказівки кодування --><br>\r\n <meta charset=\"utf-8\"><br>\r\n</head></p>\r\n\r\n<p><body></p>\r\n\r\n<p> <p>Начало документа...</p><br>\r\n <script><br>\r\n alert( \'Привіт, Мир!\' );<br>\r\n </script></p>\r\n\r\n<p> <p>...Кінець документа</p></p>\r\n\r\n<p></body><br>\r\n</html></p>\r\n\r\n<p>Цей приклад використовує наступні елементи: <script> ... </script><br>\r\nТег script містить виконуваний код. Попередні стандарти HTML вимагали обов\'язкової вказівки атрибуту type, але зараз він вже не потрібний. Досить просто <script>.</p>\r\n\r\n<p>Браузер, коли бачить <script>:<br>\r\nПочинає відображати сторінку, показує частину документа до script<br>\r\nЗустрівши тег script, перемикається в JavaScript-режим і не показує, а виконує його вміст.<br>\r\nЗакінчивши виконання, повертається назад в HTML-режим і лише тоді відображає частину документа, що залишилася.</p>\r\n\r\n<p>1.2 Структура коду<br>\r\nКоманди</p>\r\n\r\n<p>Раніше ми вже бачили приклад команди: alert(\'Привіт, мир!\') виводить повідомлення.<br>\r\nДля того, щоб додати в код ще одну команду – можна поставити її після крапки з комою.<br>\r\nНаприклад, замість одного виклику alert зробимо два:<br>\r\nalert(\'Привіт\');alert(\'Мир\');</p>\r\n\r\n<p>Як правило, кожна команда пишеться на окремому рядку – так код краще читається:<br>\r\nalert(\'Привіт\');<br>\r\nalert(\'Мир\');</p>\r\n\r\n<p>Крапка з комою<br>\r\nКрапку з комою у багатьох випадках можна не ставити, якщо є перехід на новий рядок.<br>\r\nТак теж працюватиме:<br>\r\nalert(\'Привіт\')<br>\r\nalert(\'Мир\')</p>\r\n\r\n<p>В цьому випадку JavaScript інтерпретує перехід на новий рядок як роздільник команд і автоматично вставляє «віртуальну» крапку з комою між ними.<br>\r\nПроте, важливе те, що «в багатьох випадках» не означає «завжди»!<br>\r\nНаприклад, код:<br>\r\nalert(3 +<br>\r\n1<br>\r\n+ 2);<br>\r\nВиведе 6.</p>\r\n\r\n<p>Тобто, крапка з комою не ставиться. Чому? Інтуїтивно зрозуміло, що тут справа в «незавершеному виразі», кінця якого JavaScript чекає з першого рядка і тому не ставить крапку з комою. Але в деяких важливих ситуаціях JavaScript «забуває» вставити крапку з комою там, де вона потрібна.<br>\r\nТакі ситуацій не так багато, але помилки, які при цьому з\'являються, достатньо складно виявляти і виправляти.<br>\r\nТому в JavaScript рекомендується крапки з комою ставити. Зараз це, фактично, стандарт, якому слідують всі великі проекти.</p>\r\n\r\n<p>Коментарі<br>\r\nЗ часом програма стає великою і складною. З\'являється необхідність додати коментарі, які пояснюють, що відбувається і чому.<br>\r\nКоментарі можуть знаходитися в будь-якому місці програми і ніяк не впливають на її виконання. Інтерпретатор JavaScript просто ігнорує їх.<br>\r\nОднорядкові коментарі : //:<br>\r\nБагаторядкові коментарі: «/*» «*/»<br>\r\nЧим більше коду в проекті – тим коментарі важливіші. Що ж до збільшення розміру коду – це не страшно, оскільки існують інструменти стиснення JavaScript, які при публікації коди легко їх видалять.<br>\r\nНа наступних заняттях ми поговоримо про змінних, блоках і інших структурних елементах програми на JavaScript.</p>\r\n\r\n<p>Змінні і константи<br>\r\nДля створення змінної використовується слово let : <br>\r\nlet message;</p>\r\n\r\n<p>Приклад:<br>\r\nlet message;<br>\r\nmessage = \'Hello\'; // записуємо у змінну дані (рядок)<br>\r\nalert( message ); // виведе зміст змінної</p>\r\n\r\n<p>ім’я змінної може складатися із букв, цифр, символів $ і _ ;<br>\r\nперший символ не може бути цифрою ;<br>\r\nрегістр має значення.</p>\r\n\r\n<p>Константа – це змінна, яка ніколи не змінюється. Як правило їх оголошують великими літерами через знак підкреслення.<br>\r\nlet COLOR_RED = \"#F00\";<br>\r\nlet COLOR_GREEN = \"#0F0\";<br>\r\nlet COLOR_BLUE = \"#00F\";<br>\r\nlet COLOR_ORANGE = \"#FF7F00\";<br>\r\nlet color = COLOR_ORANGE;<br>\r\nalert( color ); // #FF7F00</p>\r\n\r\n<p>Завдання<br>\r\nОголоситі дві змінні admin і name.<br>\r\nЗапішіть в name рядок \"Василь\".<br>\r\nСкопіюйте значення із name в admin.<br>\r\nВіведіть admin (повинне вивести «Василь»).</p>\r\n\r\n<p>let admin, name; // дві змінних через кому<br>\r\nname = \"Василь\";<br>\r\nadmin = name;<br>\r\nalert( admin ); // \"Василь\"</p>\r\n\r\n<p>Шість типів даних, typeof<br>\r\nУ JavaScript існує декілька основних типів даних.</p>\r\n\r\n<p>Число <<number>><br>\r\nlet n = 123;<br>\r\nn = 12.345;</p>\r\n\r\n<p>Єдиний тип число використовується як для цілих, так і для дробових чисел.<br>\r\nІснують спеціальні числові значення Infinity (нескінченність) і NAN (помилка обчислень).<br>\r\nНаприклад, нескінченність Infinity виходить при діленні на нуль:<br>\r\nalert( 1 / 0 ); // Infinity<br>\r\nПомилка обчислень NAN буде результатом некоректної математичної операції, наприклад:<br>\r\nalert( \"нечисло\" * 2 ); // NAN, помилка<br>\r\nЦі значення формально належать типу «число», хоча, звичайно, числами в їх звичайному розумінні не є.</p>\r\n\r\n<p>Рядок «string»</p>\r\n\r\n<p>let str = \"Мама мила раму\";<br>\r\nstr = \'Одинарні лапки теж підійдуть\';</p>\r\n\r\n<p>У JavaScript одинарні і подвійні лапки рівноправні. <br>\r\nТип символ не існує, є тільки рядок.</p>\r\n\r\n<p>Булевий (логічний) тип «boolean»<br>\r\nУ нього всього два значення: true (істина) і false (брехня).<br>\r\nЯк правило, такий тип використовується для зберігання значення типу так/ні, наприклад:<br>\r\nlet checked = true; // поле форми відмічене галочкою<br>\r\nchecked = false; // поле форми не містить галочки</p>\r\n\r\n<p>Спеціальне значення «null»<br>\r\nЗначення null не відноситься ні до одного з типів вище, а утворює свій окремий тип, що складається з єдиного значення null:<br>\r\nlet age = null;<br>\r\nУ JavaScript null не є «посиланням на неіснуючий об\'єкт» або «нульовим покажчиком», як в деяких інших мовах. Це просто спеціальне значення, яке має зміст «нічого» або «значення невідоме».<br>\r\nЗокрема, код вище говорить про те, що вік age невідомий.</p>\r\n\r\n<p>Спеціальне значення «undefined»<br>\r\nЗначення undefined, як і null , утворює свій власний тип, що складається з одного цього значення. Воно має сенс «значення не привласнене».<br>\r\nЯкщо змінна оголошена, але в неї нічого не записано, то її значення якраз і є undefined:<br>\r\nlet x;<br>\r\nalert( x ); // виведе \"undefined\"</p>\r\n\r\n<p>Можна привласнити undefined і в явному вигляді, хоча це робиться рідко:<br>\r\nlet x = 123;<br>\r\nx = undefined;<br>\r\nalert( x ); // \"undefined\"</p>\r\n\r\n<p>У явному виді undefined зазвичай не привласнюють, оскільки це є протиріччям його змісту. Для запису в змінну «порожнього» або «невідомого» значення використовується null.</p>\r\n\r\n<p>Об’єкти «Object»<br>\r\nПерші 5 типів називають «примітивними».<br>\r\nОсобливий шостий тип: «об\'єкти».<br>\r\nВін використовується для колекцій даних і для оголошення складнішої суті.<br>\r\nОголошуються об\'єкти за допомогою фігурних дужок {...}, наприклад:<br>\r\nlet user = { name: \"Вася\" };</p>\r\n\r\n<p>Оператор typeof<br>\r\nОператора typeof повертає тип аргументу.<br>\r\nУ нього є два синтаксиси: з дужками і без:<br>\r\nСинтаксис оператора: typeof x.<br>\r\nСинтаксис функції: typeof(x).<br>\r\nПрацюють вони однаково, але перший синтаксис коротший.</p>\r\n\r\n<p>Результатом typeof є рядок, що містить тип:<br>\r\ntypeof undefined // \"undefined\"<br>\r\ntypeof 0 // \"number\"<br>\r\ntypeof true // \"boolean\"</p>\r\n\r\n<p>typeof \"foo\" // \"string\"<br>\r\ntypeof { // \"object\"<br>\r\ntypeof null // \"object\" (1)<br>\r\ntypeof function(){ // \"function\" (2)</p>\r\n\r\n<p>Останні два рядки помічено, тому що typeof поводиться в них по-особливому.<br>\r\nРезультат typeof null == \"object\" це офіційно визнана помилка в мові, яка зберігається для сумісності. Насправді null це не об\'єкт, а окремий тип даних.<br>\r\nФункції не є окремим базовим типом в JavaScript, а підвидом об\'єктів. Але typeof виділяє функції окремо, повертаючи для них\"function\". На практиці це вельми зручно, оскільки дозволяє легко визначити функцію.<br>\r\n Основні оператори<br>\r\nДля роботи із змінними, із значеннями, JavaScript підтримує всіх стандартних операторів, більшість яких є і в інших мовах програмування.<br>\r\nУ операторів є своя термінологія, яка використовується у всіх мовах програмування.<br>\r\nОперанд - те, до чого застосовується оператор. Наприклад: 5 * 2 оператор множення з лівим і правим операндами. Інша назва: «аргумент оператора».<br>\r\nУнарним називається оператор, який застосовується до одного операнда. Наприклад, оператор унарний мінус \"-\" міняє знак числа на протилежний:<br>\r\nlet x = 1;<br>\r\nx = -х;<br>\r\nalert( x ); // -1, застосували унарний мінус</p>\r\n\r\n<p>Бінарним називається оператор, який застосовується до двох операндів. Той же мінус існує і в бінарній формі:<br>\r\nlet x = 1, у = 3;<br>\r\nalert( у - x ); // 2, бінарний мінус</p>\r\n\r\n<p>Складання рядків, бінарний +<br>\r\nЗазвичай за допомогою плюса \'+\' складають числа.<br>\r\nАле якщо бінарного оператора \'+\' застосувати до рядків, то він їх об\'єднує в одну:<br>\r\nlet а = \"перший\" + \"рядок\";<br>\r\nalert( а ); // першийрядок</p>\r\n\r\n<p>Інакше говорять, що «плюс проводить конкатенацію (складання) рядків».<br>\r\nЯкщо хоч би один аргумент є рядком, то другий буде також перетворений до рядка!<br>\r\nПричому не важливо, справа або зліва знаходиться операнд-рядок, у будь-якому випадку нестроковий аргумент буде перетворений. Наприклад:<br>\r\nalert( \'1\' + 2 ); // \"12\"<br>\r\nalert( 2 + \'1\' ); // \"21\"</p>\r\n\r\n<p>Це приведення до рядка – особливість виключно бінарного оператора \"+\".<br>\r\nРешта арифметичних операторів працює тільки з числами і завжди приводять аргументи до числа.<br>\r\nНаприклад:<br>\r\nalert( 2 - \'1\' ); // 1<br>\r\nalert( 6 / \'2\' ); // 3</p>\r\n\r\n<p>Перетворення на число, унарний плюс +<br>\r\nУнарний, тобто застосований до одного значення, плюс нічого не робить з числами:<br>\r\nalert( +1 ); // 1<br>\r\nalert( +(1 - 2) ); // -1</p>\r\n\r\n<p>Як видно, плюс нічого не змінив у виразах. Результат – такий же, як і без нього.<br>\r\nПроте, він широко застосовується, оскільки його «побічний ефект» – перетворення значення в число.<br>\r\nНаприклад, коли ми набуваємо значень з HTML-полів або від користувача, то вони зазвичай у формі рядків.<br>\r\nА що, якщо їх потрібно, наприклад, скласти? Бінарний плюс складе їх як рядки:</p>\r\n\r\n<p>let apples = \"2\";<br>\r\nlet oranges = \"3\";</p>\r\n\r\n<p>alert( apples + oranges ); // \"23\", оскільки бінарний плюс складає рядки</p>\r\n\r\n<p>Тому використовуваний унарний плюс, щоб перетворити до числа:<br>\r\nlet apples = \"2\";<br>\r\nlet oranges = \"3\";</p>\r\n\r\n<p>alert( +apples + +oranges ); // 5, число, обидва операнди заздалегідь перетворено в числа<br>\r\nЗ погляду математики такий достаток плюсів може показатися дивним. З погляду програмування – ніяких різночитань: спочатку виконаються унарні плюси, приведуть рядки до чисел, а потім – бінарний \'+\' їх складе.</p>\r\n\r\n<p>Пріоритет<br>\r\nВ тому випадку, якщо у виразі є декілька операторів – порядок їх виконання визначається пріоритетом.<br>\r\nЗ школи ми знаємо, що множення у виразі 2 * 2 + 1 виконається раніше складання, оскільки його пріоритет вищий, а дужки явно задають порядок виконання. Але в JavaScript – значно більше операторів, тому існує ціла таблиця приоритетів. У таблиці кожному операторові заданий числовий пріоритет. Той, у кого число більше – виконається раніше. Якщо пріоритет однаковий, то порядок виконання – зліва направо.<br>\r\nУривок з таблиці:<br>\r\nПріоритет<br>\r\nНазва<br>\r\nПозначення<br>\r\n15<br>\r\nунарний плюс<br>\r\n+<br>\r\n15<br>\r\nунарний мінус<br>\r\n-<br>\r\n14<br>\r\nмноження<br>\r\n*<br>\r\n14<br>\r\nділення<br>\r\n/<br>\r\n13<br>\r\nскладання<br>\r\n+<br>\r\n13<br>\r\nвіднімання<br>\r\n-<br>\r\n.<br>\r\n.<br>\r\n.<br>\r\n3<br>\r\nпривласнення<br>\r\n=</p>\r\n\r\n<p>Оскільки «унарний плюс» має пріоритет 15, вище, ніж 13 у звичайного «складання», то у виразі +apples + +oranges спочатку спрацювали плюси у apples і oranges, а потім вже звичайне складання.</p>\r\n\r\n<p>Привласнення<br>\r\nЗвернемо увагу, в таблиці пріоритетів також є оператор привласнення =.<br>\r\nУ нього – один з найнижчих пріоритетів: 3.<br>\r\nСаме тому, коли змінну чому-небудь привласнюють, наприклад, x = 2 * 2 + 1 спочатку виконається арифметика, а вже потім – відбудеться привласнення =.<br>\r\nlet x = 2 * 2 + 1;</p>\r\n\r\n<p>alert( x ); // 5</p>\r\n\r\n<p>Можливе привласнення по ланцюжку:<br>\r\nlet а, b, с;<br>\r\nа = b = с = 2 + 2;<br>\r\nalert( а ); // 4<br>\r\nalert( b ); // 4<br>\r\nalert( с ); // 4</p>\r\n\r\n<p>Таке привласнення працює справа-наліво, тобто спочатку обчисляться найправіший вираз 2+2, привласниться в с, потім виконається b = с і, нарешті, а = b.</p>\r\n\r\n<p>Оператор \"=\" повертає значення.<br>\r\nВсі оператори повертають значення. Виклик x = вираз не є виключенням.<br>\r\nВін записує вираз в x, а потім повертає його. Завдяки цьому привласнення можна використовувати як частина складнішого виразу:<br>\r\nlet а = 1;<br>\r\nlet b = 2;<br>\r\nlet с = 3 - (а = b + 1);<br>\r\nalert( а ); // 3<br>\r\nalert( с ); // 0<br>\r\nУ прикладі вище результатом (а = b + 1) є значення, яке записується в а (тобто 3). Воно використовується для обчислення с.<br>\r\nЗнати, як це працює – стоїть обов\'язково, а ось писати самому – тільки якщо ви упевнені, що це зробить код більш читаним і зрозумілим.</p>\r\n\r\n<p>Інкремент/декремент: ++, --<br>\r\nОдній з найбільш частих операцій в JavaScript, як і в багатьох інших мовах програмування, є збільшення або зменшення змінної на одиницю.<br>\r\nДля цього існують навіть спеціальні оператори:</p>\r\n\r\n<p>Інкремент ++ збільшує на 1:<br>\r\nlet i = 2;<br>\r\ni++; // коротший запис для i = i + 1.<br>\r\nalert(i); // 3</p>\r\n\r\n<p>Декремент -- зменшує на 1:<br>\r\nlet i = 2;<br>\r\ni--; // коротший запис для i = i - 1.<br>\r\nalert(i); // 1</p>\r\n\r\n<p>Важливо:<br>\r\nІнкремент/декремент можна застосувати тільки до змінної. Код 5++ дасть помилку.<br>\r\nВикликати цих операторів можна не тільки після, але і перед змінній: i++ (називається «Постфіксна форма») або ++i («префіксна форма»).<br>\r\nОбидві ці форми запису роблять одне і те ж: збільшують на 1.<br>\r\nПроте, між ними існує різниця. Вона видно тільки у тому випадку, коли ми хочемо не тільки збільшити/зменшити змінну, але і використовувати результат в тому ж виразі.<br>\r\nНаприклад:<br>\r\nlet i = 1;<br>\r\nlet а = ++i; // (*)</p>\r\n\r\n<p>alert(a); // 2</p>\r\n\r\n<p>У рядку (*) виклик ++i збільшить змінну, а потім поверне її значення в а. Отже в а потрапить значення i після збільшення.<br>\r\nПостфіксна форма i++ відрізняється від префіксної ++i тим, що повертає старе значення, що було до збільшення.<br>\r\nУ прикладі нижче в а потрапить старе значення i, рівне 1:<br>\r\nlet i = 1;<br>\r\nlet а = i++; // (*)</p>\r\n\r\n<p>alert(a); // 1</p>\r\n\r\n<p>Якщо результат оператора не використовується, а потрібно тільки збільшити/зменшити змінну – без різниці, яку форму використовувати:<br>\r\nlet i = 0;<br>\r\ni++;<br>\r\n++i;<br>\r\nAlert ( i ); // 2</p>\r\n\r\n<p>Якщо хочеться тут же використовувати результат, то потрібна префіксна форма:<br>\r\nlet i = 0;<br>\r\nalert( ++i ); // 1<br>\r\nЯкщо потрібно збільшити, але потрібне значення змінної до збільшення постфіксна форма:<br>\r\nlet i = 0;<br>\r\nalert( i++ ); // 0</p>\r\n\r\n<p>Інкремент/декремент можна використовувати в будь-яких виразах.<br>\r\nПри цьому він має вищий пріоритет і виконується раніше, ніж арифметичні операції:<br>\r\nlet i = 1;<br>\r\nalert( 2 * ++i ); // 4<br>\r\nlet i = 1;<br>\r\nalert( 2 * i++ ); // 2, виконався раніше але значення повернув старе<br>\r\nalert( i ); // 2<br>\r\nalert( 2 * i++ ); // 4<br>\r\nalert( i ); // 3</p>\r\n\r\n<p>При цьому, потрібно з обережністю використовувати такий запис, тому що в довшому рядку при швидкому «вертикальному» читанні коди легко пропустити такий i++, і буде неочевидне, що змінна збільшується.<br>\r\nТри рядки, по одній дії в кожній – довше, зате наочніше:<br>\r\nlet i = 1;<br>\r\nalert( 2 * i );<br>\r\ni++;</p>\r\n\r\n<br>\r\n<p></p>', 3, 4),
(21, 'Лекція 14', '<p>Лекція 14<br>\r\nТема: Сценарії. Мова програмування JavaScript: cинтаксис, умовні оператори, цикли</p>\r\n\r\n<p>План<br>\r\nОснови синтаксису<br>\r\nЗмінні і константи<br>\r\nТипи даних<br>\r\nОсновні оператори</p>\r\n\r\n<br>\r\n<p>Основи синтаксису<br>\r\n1.1 Тег SCRIPT<br>\r\nПрограми на мові JavaScript можна вставити в будь-яке місце HTML за допомогою тега SCRIPT. Наприклад:<br>\r\n<!DOCTYPE HTML><br>\r\n<html><br>\r\n<head><br>\r\n <!-- Тег meta для вказівки кодування --><br>\r\n <meta charset=\"utf-8\"><br>\r\n</head></p>\r\n\r\n<p><body></p>\r\n\r\n<p> <p>Начало документа...</p><br>\r\n <script><br>\r\n alert( \'Привіт, Мир!\' );<br>\r\n </script></p>\r\n\r\n<p> <p>...Кінець документа</p></p>\r\n\r\n<p></body><br>\r\n</html></p>\r\n\r\n<p>Цей приклад використовує наступні елементи: <script> ... </script><br>\r\nТег script містить виконуваний код. Попередні стандарти HTML вимагали обов\'язкової вказівки атрибуту type, але зараз він вже не потрібний. Досить просто <script>.</p>\r\n\r\n<p>Браузер, коли бачить <script>:<br>\r\nПочинає відображати сторінку, показує частину документа до script<br>\r\nЗустрівши тег script, перемикається в JavaScript-режим і не показує, а виконує його вміст.<br>\r\nЗакінчивши виконання, повертається назад в HTML-режим і лише тоді відображає частину документа, що залишилася.</p>\r\n\r\n<p>1.2 Структура коду<br>\r\nКоманди</p>\r\n\r\n<p>Раніше ми вже бачили приклад команди: alert(\'Привіт, мир!\') виводить повідомлення.<br>\r\nДля того, щоб додати в код ще одну команду – можна поставити її після крапки з комою.<br>\r\nНаприклад, замість одного виклику alert зробимо два:<br>\r\nalert(\'Привіт\');alert(\'Мир\');</p>\r\n\r\n<p>Як правило, кожна команда пишеться на окремому рядку – так код краще читається:<br>\r\nalert(\'Привіт\');<br>\r\nalert(\'Мир\');</p>\r\n\r\n<p>Крапка з комою<br>\r\nКрапку з комою у багатьох випадках можна не ставити, якщо є перехід на новий рядок.<br>\r\nТак теж працюватиме:<br>\r\nalert(\'Привіт\')<br>\r\nalert(\'Мир\')</p>\r\n\r\n<p>В цьому випадку JavaScript інтерпретує перехід на новий рядок як роздільник команд і автоматично вставляє «віртуальну» крапку з комою між ними.<br>\r\nПроте, важливе те, що «в багатьох випадках» не означає «завжди»!<br>\r\nНаприклад, код:<br>\r\nalert(3 +<br>\r\n1<br>\r\n+ 2);<br>\r\nВиведе 6.</p>\r\n\r\n<p>Тобто, крапка з комою не ставиться. Чому? Інтуїтивно зрозуміло, що тут справа в «незавершеному виразі», кінця якого JavaScript чекає з першого рядка і тому не ставить крапку з комою. Але в деяких важливих ситуаціях JavaScript «забуває» вставити крапку з комою там, де вона потрібна.<br>\r\nТакі ситуацій не так багато, але помилки, які при цьому з\'являються, достатньо складно виявляти і виправляти.<br>\r\nТому в JavaScript рекомендується крапки з комою ставити. Зараз це, фактично, стандарт, якому слідують всі великі проекти.</p>\r\n\r\n<p>Коментарі<br>\r\nЗ часом програма стає великою і складною. З\'являється необхідність додати коментарі, які пояснюють, що відбувається і чому.<br>\r\nКоментарі можуть знаходитися в будь-якому місці програми і ніяк не впливають на її виконання. Інтерпретатор JavaScript просто ігнорує їх.<br>\r\nОднорядкові коментарі : //:<br>\r\nБагаторядкові коментарі: «/*» «*/»<br>\r\nЧим більше коду в проекті – тим коментарі важливіші. Що ж до збільшення розміру коду – це не страшно, оскільки існують інструменти стиснення JavaScript, які при публікації коди легко їх видалять.<br>\r\nНа наступних заняттях ми поговоримо про змінних, блоках і інших структурних елементах програми на JavaScript.</p>\r\n\r\n<p>Змінні і константи<br>\r\nДля створення змінної використовується слово let : <br>\r\nlet message;</p>\r\n\r\n<p>Приклад:<br>\r\nlet message;<br>\r\nmessage = \'Hello\'; // записуємо у змінну дані (рядок)<br>\r\nalert( message ); // виведе зміст змінної</p>\r\n\r\n<p>ім’я змінної може складатися із букв, цифр, символів $ і _ ;<br>\r\nперший символ не може бути цифрою ;<br>\r\nрегістр має значення.</p>\r\n\r\n<p>Константа – це змінна, яка ніколи не змінюється. Як правило їх оголошують великими літерами через знак підкреслення.<br>\r\nlet COLOR_RED = \"#F00\";<br>\r\nlet COLOR_GREEN = \"#0F0\";<br>\r\nlet COLOR_BLUE = \"#00F\";<br>\r\nlet COLOR_ORANGE = \"#FF7F00\";<br>\r\nlet color = COLOR_ORANGE;<br>\r\nalert( color ); // #FF7F00</p>\r\n\r\n<p>Завдання<br>\r\nОголоситі дві змінні admin і name.<br>\r\nЗапішіть в name рядок \"Василь\".<br>\r\nСкопіюйте значення із name в admin.<br>\r\nВіведіть admin (повинне вивести «Василь»).</p>\r\n\r\n<p>let admin, name; // дві змінних через кому<br>\r\nname = \"Василь\";<br>\r\nadmin = name;<br>\r\nalert( admin ); // \"Василь\"</p>\r\n\r\n<p>Шість типів даних, typeof<br>\r\nУ JavaScript існує декілька основних типів даних.</p>\r\n\r\n<p>Число <<number>><br>\r\nlet n = 123;<br>\r\nn = 12.345;</p>\r\n\r\n<p>Єдиний тип число використовується як для цілих, так і для дробових чисел.<br>\r\nІснують спеціальні числові значення Infinity (нескінченність) і NAN (помилка обчислень).<br>\r\nНаприклад, нескінченність Infinity виходить при діленні на нуль:<br>\r\nalert( 1 / 0 ); // Infinity<br>\r\nПомилка обчислень NAN буде результатом некоректної математичної операції, наприклад:<br>\r\nalert( \"нечисло\" * 2 ); // NAN, помилка<br>\r\nЦі значення формально належать типу «число», хоча, звичайно, числами в їх звичайному розумінні не є.</p>\r\n\r\n<p>Рядок «string»</p>\r\n\r\n<p>let str = \"Мама мила раму\";<br>\r\nstr = \'Одинарні лапки теж підійдуть\';</p>\r\n\r\n<p>У JavaScript одинарні і подвійні лапки рівноправні. <br>\r\nТип символ не існує, є тільки рядок.</p>\r\n\r\n<p>Булевий (логічний) тип «boolean»<br>\r\nУ нього всього два значення: true (істина) і false (брехня).<br>\r\nЯк правило, такий тип використовується для зберігання значення типу так/ні, наприклад:<br>\r\nlet checked = true; // поле форми відмічене галочкою<br>\r\nchecked = false; // поле форми не містить галочки</p>\r\n\r\n<p>Спеціальне значення «null»<br>\r\nЗначення null не відноситься ні до одного з типів вище, а утворює свій окремий тип, що складається з єдиного значення null:<br>\r\nlet age = null;<br>\r\nУ JavaScript null не є «посиланням на неіснуючий об\'єкт» або «нульовим покажчиком», як в деяких інших мовах. Це просто спеціальне значення, яке має зміст «нічого» або «значення невідоме».<br>\r\nЗокрема, код вище говорить про те, що вік age невідомий.</p>\r\n\r\n<p>Спеціальне значення «undefined»<br>\r\nЗначення undefined, як і null , утворює свій власний тип, що складається з одного цього значення. Воно має сенс «значення не привласнене».<br>\r\nЯкщо змінна оголошена, але в неї нічого не записано, то її значення якраз і є undefined:<br>\r\nlet x;<br>\r\nalert( x ); // виведе \"undefined\"</p>\r\n\r\n<p>Можна привласнити undefined і в явному вигляді, хоча це робиться рідко:<br>\r\nlet x = 123;<br>\r\nx = undefined;<br>\r\nalert( x ); // \"undefined\"</p>\r\n\r\n<p>У явному виді undefined зазвичай не привласнюють, оскільки це є протиріччям його змісту. Для запису в змінну «порожнього» або «невідомого» значення використовується null.</p>\r\n\r\n<p>Об’єкти «Object»<br>\r\nПерші 5 типів називають «примітивними».<br>\r\nОсобливий шостий тип: «об\'єкти».<br>\r\nВін використовується для колекцій даних і для оголошення складнішої суті.<br>\r\nОголошуються об\'єкти за допомогою фігурних дужок {...}, наприклад:<br>\r\nlet user = { name: \"Вася\" };</p>\r\n\r\n<p>Оператор typeof<br>\r\nОператора typeof повертає тип аргументу.<br>\r\nУ нього є два синтаксиси: з дужками і без:<br>\r\nСинтаксис оператора: typeof x.<br>\r\nСинтаксис функції: typeof(x).<br>\r\nПрацюють вони однаково, але перший синтаксис коротший.</p>\r\n\r\n<p>Результатом typeof є рядок, що містить тип:<br>\r\ntypeof undefined // \"undefined\"<br>\r\ntypeof 0 // \"number\"<br>\r\ntypeof true // \"boolean\"</p>\r\n\r\n<p>typeof \"foo\" // \"string\"<br>\r\ntypeof { // \"object\"<br>\r\ntypeof null // \"object\" (1)<br>\r\ntypeof function(){ // \"function\" (2)</p>\r\n\r\n<p>Останні два рядки помічено, тому що typeof поводиться в них по-особливому.<br>\r\nРезультат typeof null == \"object\" це офіційно визнана помилка в мові, яка зберігається для сумісності. Насправді null це не об\'єкт, а окремий тип даних.<br>\r\nФункції не є окремим базовим типом в JavaScript, а підвидом об\'єктів. Але typeof виділяє функції окремо, повертаючи для них\"function\". На практиці це вельми зручно, оскільки дозволяє легко визначити функцію.<br>\r\n Основні оператори<br>\r\nДля роботи із змінними, із значеннями, JavaScript підтримує всіх стандартних операторів, більшість яких є і в інших мовах програмування.<br>\r\nУ операторів є своя термінологія, яка використовується у всіх мовах програмування.<br>\r\nОперанд - те, до чого застосовується оператор. Наприклад: 5 * 2 оператор множення з лівим і правим операндами. Інша назва: «аргумент оператора».<br>\r\nУнарним називається оператор, який застосовується до одного операнда. Наприклад, оператор унарний мінус \"-\" міняє знак числа на протилежний:<br>\r\nlet x = 1;<br>\r\nx = -х;<br>\r\nalert( x ); // -1, застосували унарний мінус</p>\r\n\r\n<p>Бінарним називається оператор, який застосовується до двох операндів. Той же мінус існує і в бінарній формі:<br>\r\nlet x = 1, у = 3;<br>\r\nalert( у - x ); // 2, бінарний мінус</p>\r\n\r\n<p>Складання рядків, бінарний +<br>\r\nЗазвичай за допомогою плюса \'+\' складають числа.<br>\r\nАле якщо бінарного оператора \'+\' застосувати до рядків, то він їх об\'єднує в одну:<br>\r\nlet а = \"перший\" + \"рядок\";<br>\r\nalert( а ); // першийрядок</p>\r\n\r\n<p>Інакше говорять, що «плюс проводить конкатенацію (складання) рядків».<br>\r\nЯкщо хоч би один аргумент є рядком, то другий буде також перетворений до рядка!<br>\r\nПричому не важливо, справа або зліва знаходиться операнд-рядок, у будь-якому випадку нестроковий аргумент буде перетворений. Наприклад:<br>\r\nalert( \'1\' + 2 ); // \"12\"<br>\r\nalert( 2 + \'1\' ); // \"21\"</p>\r\n\r\n<p>Це приведення до рядка – особливість виключно бінарного оператора \"+\".<br>\r\nРешта арифметичних операторів працює тільки з числами і завжди приводять аргументи до числа.<br>\r\nНаприклад:<br>\r\nalert( 2 - \'1\' ); // 1<br>\r\nalert( 6 / \'2\' ); // 3</p>\r\n\r\n<p>Перетворення на число, унарний плюс +<br>\r\nУнарний, тобто застосований до одного значення, плюс нічого не робить з числами:<br>\r\nalert( +1 ); // 1<br>\r\nalert( +(1 - 2) ); // -1</p>\r\n\r\n<p>Як видно, плюс нічого не змінив у виразах. Результат – такий же, як і без нього.<br>\r\nПроте, він широко застосовується, оскільки його «побічний ефект» – перетворення значення в число.<br>\r\nНаприклад, коли ми набуваємо значень з HTML-полів або від користувача, то вони зазвичай у формі рядків.<br>\r\nА що, якщо їх потрібно, наприклад, скласти? Бінарний плюс складе їх як рядки:</p>\r\n\r\n<p>let apples = \"2\";<br>\r\nlet oranges = \"3\";</p>\r\n\r\n<p>alert( apples + oranges ); // \"23\", оскільки бінарний плюс складає рядки</p>\r\n\r\n<p>Тому використовуваний унарний плюс, щоб перетворити до числа:<br>\r\nlet apples = \"2\";<br>\r\nlet oranges = \"3\";</p>\r\n\r\n<p>alert( +apples + +oranges ); // 5, число, обидва операнди заздалегідь перетворено в числа<br>\r\nЗ погляду математики такий достаток плюсів може показатися дивним. З погляду програмування – ніяких різночитань: спочатку виконаються унарні плюси, приведуть рядки до чисел, а потім – бінарний \'+\' їх складе.</p>\r\n\r\n<p>Пріоритет<br>\r\nВ тому випадку, якщо у виразі є декілька операторів – порядок їх виконання визначається пріоритетом.<br>\r\nЗ школи ми знаємо, що множення у виразі 2 * 2 + 1 виконається раніше складання, оскільки його пріоритет вищий, а дужки явно задають порядок виконання. Але в JavaScript – значно більше операторів, тому існує ціла таблиця приоритетів. У таблиці кожному операторові заданий числовий пріоритет. Той, у кого число більше – виконається раніше. Якщо пріоритет однаковий, то порядок виконання – зліва направо.<br>\r\nУривок з таблиці:<br>\r\nПріоритет<br>\r\nНазва<br>\r\nПозначення<br>\r\n15<br>\r\nунарний плюс<br>\r\n+<br>\r\n15<br>\r\nунарний мінус<br>\r\n-<br>\r\n14<br>\r\nмноження<br>\r\n*<br>\r\n14<br>\r\nділення<br>\r\n/<br>\r\n13<br>\r\nскладання<br>\r\n+<br>\r\n13<br>\r\nвіднімання<br>\r\n-<br>\r\n.<br>\r\n.<br>\r\n.<br>\r\n3<br>\r\nпривласнення<br>\r\n=</p>\r\n\r\n<p>Оскільки «унарний плюс» має пріоритет 15, вище, ніж 13 у звичайного «складання», то у виразі +apples + +oranges спочатку спрацювали плюси у apples і oranges, а потім вже звичайне складання.</p>\r\n\r\n<p>Привласнення<br>\r\nЗвернемо увагу, в таблиці пріоритетів також є оператор привласнення =.<br>\r\nУ нього – один з найнижчих пріоритетів: 3.<br>\r\nСаме тому, коли змінну чому-небудь привласнюють, наприклад, x = 2 * 2 + 1 спочатку виконається арифметика, а вже потім – відбудеться привласнення =.<br>\r\nlet x = 2 * 2 + 1;</p>\r\n\r\n<p>alert( x ); // 5</p>\r\n\r\n<p>Можливе привласнення по ланцюжку:<br>\r\nlet а, b, с;<br>\r\nа = b = с = 2 + 2;<br>\r\nalert( а ); // 4<br>\r\nalert( b ); // 4<br>\r\nalert( с ); // 4</p>\r\n\r\n<p>Таке привласнення працює справа-наліво, тобто спочатку обчисляться найправіший вираз 2+2, привласниться в с, потім виконається b = с і, нарешті, а = b.</p>\r\n\r\n<p>Оператор \"=\" повертає значення.<br>\r\nВсі оператори повертають значення. Виклик x = вираз не є виключенням.<br>\r\nВін записує вираз в x, а потім повертає його. Завдяки цьому привласнення можна використовувати як частина складнішого виразу:<br>\r\nlet а = 1;<br>\r\nlet b = 2;<br>\r\nlet с = 3 - (а = b + 1);<br>\r\nalert( а ); // 3<br>\r\nalert( с ); // 0<br>\r\nУ прикладі вище результатом (а = b + 1) є значення, яке записується в а (тобто 3). Воно використовується для обчислення с.<br>\r\nЗнати, як це працює – стоїть обов\'язково, а ось писати самому – тільки якщо ви упевнені, що це зробить код більш читаним і зрозумілим.</p>\r\n\r\n<p>Інкремент/декремент: ++, --<br>\r\nОдній з найбільш частих операцій в JavaScript, як і в багатьох інших мовах програмування, є збільшення або зменшення змінної на одиницю.<br>\r\nДля цього існують навіть спеціальні оператори:</p>\r\n\r\n<p>Інкремент ++ збільшує на 1:<br>\r\nlet i = 2;<br>\r\ni++; // коротший запис для i = i + 1.<br>\r\nalert(i); // 3</p>\r\n\r\n<p>Декремент -- зменшує на 1:<br>\r\nlet i = 2;<br>\r\ni--; // коротший запис для i = i - 1.<br>\r\nalert(i); // 1</p>\r\n\r\n<p>Важливо:<br>\r\nІнкремент/декремент можна застосувати тільки до змінної. Код 5++ дасть помилку.<br>\r\nВикликати цих операторів можна не тільки після, але і перед змінній: i++ (називається «Постфіксна форма») або ++i («префіксна форма»).<br>\r\nОбидві ці форми запису роблять одне і те ж: збільшують на 1.<br>\r\nПроте, між ними існує різниця. Вона видно тільки у тому випадку, коли ми хочемо не тільки збільшити/зменшити змінну, але і використовувати результат в тому ж виразі.<br>\r\nНаприклад:<br>\r\nlet i = 1;<br>\r\nlet а = ++i; // (*)</p>\r\n\r\n<p>alert(a); // 2</p>\r\n\r\n<p>У рядку (*) виклик ++i збільшить змінну, а потім поверне її значення в а. Отже в а потрапить значення i після збільшення.<br>\r\nПостфіксна форма i++ відрізняється від префіксної ++i тим, що повертає старе значення, що було до збільшення.<br>\r\nУ прикладі нижче в а потрапить старе значення i, рівне 1:<br>\r\nlet i = 1;<br>\r\nlet а = i++; // (*)</p>\r\n\r\n<p>alert(a); // 1</p>\r\n\r\n<p>Якщо результат оператора не використовується, а потрібно тільки збільшити/зменшити змінну – без різниці, яку форму використовувати:<br>\r\nlet i = 0;<br>\r\ni++;<br>\r\n++i;<br>\r\nAlert ( i ); // 2</p>\r\n\r\n<p>Якщо хочеться тут же використовувати результат, то потрібна префіксна форма:<br>\r\nlet i = 0;<br>\r\nalert( ++i ); // 1<br>\r\nЯкщо потрібно збільшити, але потрібне значення змінної до збільшення постфіксна форма:<br>\r\nlet i = 0;<br>\r\nalert( i++ ); // 0</p>\r\n\r\n<p>Інкремент/декремент можна використовувати в будь-яких виразах.<br>\r\nПри цьому він має вищий пріоритет і виконується раніше, ніж арифметичні операції:<br>\r\nlet i = 1;<br>\r\nalert( 2 * ++i ); // 4<br>\r\nlet i = 1;<br>\r\nalert( 2 * i++ ); // 2, виконався раніше але значення повернув старе<br>\r\nalert( i ); // 2<br>\r\nalert( 2 * i++ ); // 4<br>\r\nalert( i ); // 3</p>\r\n\r\n<p>При цьому, потрібно з обережністю використовувати такий запис, тому що в довшому рядку при швидкому «вертикальному» читанні коди легко пропустити такий i++, і буде неочевидне, що змінна збільшується.<br>\r\nТри рядки, по одній дії в кожній – довше, зате наочніше:<br>\r\nlet i = 1;<br>\r\nalert( 2 * i );<br>\r\ni++;</p>\r\n\r\n<br>\r\n<p></p>', 3, 4);
INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(22, 'Лекція 15', '<p>Лекція 15<br>\r\nТема: Властивості, методи, події об’єктів DOM</p>\r\n\r\n<p>План<br>\r\nВведення в методи і властивості<br>\r\nБраузерні події<br>\r\nОб’єкт події</p>\r\n\r\n<p>Введення в методи і властивості<br>\r\nВсі значення в JavaScript, за винятком null і undefined, містять набір допоміжних функцій і значень, доступних «через крапку».<br>\r\nТакі функції називають «методами», а значення – «властивостями». Тепер розглянемо основи використання властивостей і методів.</p>\r\n\r\n<p>Властивість str.length<br>\r\nУ рядка є властивість length, що містить довжину:<br>\r\nalert( \"Привіт, мир!\".length ); // 12</p>\r\n\r\n<p>Можна і записати рядок змінну, а потім запитати її властивість:<br>\r\nlet str = \"Привіт, мир!\";<br>\r\nalert( str.length ); // 12</p>\r\n\r\n<p>Метод str.toUpperCase()<br>\r\nТакож у рядків є метод toUpperCase(), який повертає рядок у верхньому регістрі:<br>\r\nlet hello = \"Привіт, мир!\";</p>\r\n\r\n<p>alert( hello.toUpperCase() ); // \"ПРИВІТ, МИР!\"</p>\r\n\r\n<p>Виклик методу – через круглі дужки!<br>\r\nЗверніть увагу, для виклику методу обов\'язково потрібні круглі дужки.<br>\r\nПодивіться, наприклад, результат звернення до toUpperCase без дужок:<br>\r\nlet hello = \"Привіт\";</p>\r\n\r\n<p>alert( hello.toUpperCase ); // function...</p>\r\n\r\n<p>Метод – це вбудована команда, яку потрібно викликати для набуття значення. При зверненні без дужок ми отримаємо саму цю функцію. Як правило браузер виведе її якось так: \"function toUpperCase() { ... }\".<br>\r\nА щоб отримати результат – потрібно провести її виклик, додавши дужки:</p>\r\n\r\n<p>let hello = \"Привіт\";</p>\r\n\r\n<p>alert( hello.toUpperCase() ); // ПРИВІТ</p>\r\n\r\n<p>Метод num.toFixed(n)<br>\r\nЄ методи і у чисел, наприклад num.toFixed(n). Він округляє число num до n знаків після коми, при необхідності добиває нулями до даної довжини і повертає у вигляді рядка (зручно для форматованого виводу):<br>\r\nlet n = 12.345;</p>\r\n\r\n<p>alert( n.toFixed(2) ); // \"12.35\"<br>\r\nalert( n.toFixed(0) ); // \"12\"<br>\r\nalert( n.toFixed(5) ); // \"12.34500\"</p>\r\n\r\n<p>Браузерні події<br>\r\nДля реакції на дії відвідувача і внутрішньої взаємодії скриптів існують події.<br>\r\nПодія - це сигнал від браузера про те, що щось відбулося. Існує багато видів подій. Подивимося список найчастіших використовуваних:</p>\r\n\r\n<p>Події миші:<br>\r\nclick відбувається, коли кликнули на елемент лівою кнопкою миші<br>\r\ncontextmenu відбувається, коли кликнули на елемент правою кнопкою миші<br>\r\nmouseover виникає, коли на елемент наводиться миша<br>\r\nmousedown і mouseup коли кнопку миші натиснули або віджали<br>\r\nmousemove при русі миші</p>\r\n\r\n<p>Події на елементах управління:<br>\r\nsubmit відвідувач відправив форму <form><br>\r\nfocus відвідувач фокусується на елементі, наприклад натискає на <input></p>\r\n\r\n<p>Клавіатурні події:<br>\r\nkeydown коли відвідувач натискає клавішу<br>\r\nkeyup коли відвідувач відпускає клавішу</p>\r\n\r\n<p>Події документа:<br>\r\nDOMContentLoaded коли HTML завантажений і оброблений, DOM документа повністю побудований і доступний.</p>\r\n\r\n<p>Події CSS:<br>\r\ntransitionend коли CSS-анімація завершена.<br>\r\nТакож є і багато інших подій.</p>\r\n\r\n<p>Події можна призначити обробник, тобто функцію, яка спрацює, як тільки подія відбулася.<br>\r\nСаме завдяки обробникам JavaScript-код може реагувати на дії відвідувача.<br>\r\nЄ декілька способів призначити події обробник. Зараз ми їх розглянемо, починаючи від найпростішого.</p>\r\n\r\n<p>Використання атрибуту HTML<br>\r\nОбробник може бути призначений прямо в розмітці, в атрибуті, який називається on<подія>.<br>\r\nНаприклад, щоб прикріпити click-подію до input кнопки, можна привласнити обробник onclick, от так:</p>\r\n\r\n<p><input value=\"Нажми мене\" onclick=\"alert(\'Клік!\')\" type=\"button\"><br>\r\n </p>\r\n\r\n<p>При кліці мишкою на кнопці виконається код, вказаний в атрибуті onclick.</p>\r\n\r\n<p>Зверніть увагу, для вмісту атрибуту onclick використовуються одинарні лапки, оскільки сам атрибут знаходиться в подвійних.<br>\r\nЧаста помилка новачків в тому, що вони забувають, що код знаходиться усередині атрибуту. Запис виду onclick=\"alert(\"Клік!\")\", з подвійними лапками усередині, не працюватиме. Якщо вам дійсно потрібно використовувати саме подвійні лапки, то це можна зробити, замінивши їх на &quot;, тобто так: onclick=\"alert(&quot;Клик!&quot;)\".<br>\r\nПроте, зазвичай цього не вимагається, оскільки прямо в розмітці пишуться тільки дуже прості обробники. Якщо потрібно зробити щось складне, то має сенс описати це у функції, і в обробнику викликати вже її.<br>\r\nНаступний приклад по кліку запускає функцію countRabbits().</p>\r\n\r\n<p><!DOCTYPE HTML><br>\r\n<html><br>\r\n<head><br>\r\n <meta charset=\"utf-8\"></p>\r\n\r\n<p> <script><br>\r\n function countRabbits() {<br>\r\n for(let i=1; i<=3; i++) {<br>\r\n alert(\"Кролик номер \" + i);<br>\r\n }<br>\r\n }<br>\r\n </script><br>\r\n</head><br>\r\n<body><br>\r\n <input type=\"button\" onclick=\"countRabbits()\" value=\"Рахувати кроликів!\"/><br>\r\n</body><br>\r\n</html></p>\r\n\r\n<p> </p>\r\n\r\n<p>Як відомо, атрибут HTML-тега не чутливий до регістра, тому ONCLICK працюватиме так само, як onClick або onCLICK. Але, як правило, атрибути пишуть в нижньому регістрі: onclick.</p>\r\n\r\n<p>Використання властивості DOM-об\'єкту<br>\r\nМожна призначати обробник, використовуючи властивість DOM-елемента on<подія>.<br>\r\nПриклад установки обробника click:</p>\r\n\r\n<p><input id=\"elem\" type=\"button\" value=\"Нажми мене\" /><br>\r\n<script><br>\r\n elem.onclick = function() {<br>\r\n alert( \'Спасибі\' );<br>\r\n };<br>\r\n</script></p>\r\n\r\n<p>Якщо обробник заданий через атрибут, то браузер читає HTML-розмітку, створює нову функцію з вмісту атрибуту і записує у властивість onclick.<br>\r\nЦей спосіб, по суті, аналогічний попередньому.<br>\r\nОбробник зберігається саме в DOM-властивості, а атрибут – лише один із способів його ініціалізації.<br>\r\nЦі два приклади коди працюють однаково:</p>\r\n\r\n<p>Тільки HTML:<br>\r\n<input type=\"button\" onclick=\"alert(\'Клік!\')\" value=\"Кнопка\" /></p>\r\n\r\n<p>HTML + JS:<br>\r\n<input type=\"button\" id=\"button\" value=\"Кнопка\" /><br>\r\n<script><br>\r\n button.onclick = function() {<br>\r\n alert( \'Клік!\' );<br>\r\n };<br>\r\n</script></p>\r\n\r\n<p>Оскільки DOM-властивість onclick, у результаті, одна, то призначити більш ніж один обробник не можна.<br>\r\nУ прикладі нижче призначення через JavaScript перезапише обробник з атрибуту:</p>\r\n\r\n<p><input type=\"button\" id=\"elem\" onclick=\"alert(\'До\')\" value=\"Нажми мене\" /><br>\r\n<script><br>\r\nelem.onclick = function() { // перезапише існуючий обробник<br>\r\n alert( \'Після\' ); // виведеться тільки це<br>\r\n};<br>\r\n</script></p>\r\n\r\n<p>До речі, обробником можна призначити і вже існуючу функцію:<br>\r\nfunction sayThanks() {<br>\r\n alert( \'Спасибі!\' );<br>\r\n}</p>\r\n\r\n<p>elem.onclick = sayThanks;</p>\r\n\r\n<p>Якщо обробник набрид – його завжди можна прибрати призначенням elem.onclick = null.</p>\r\n\r\n<p>Доступ до елементу через this<br>\r\nУсередині обробника події this посилається на поточний елемент, тобто на той, на якому він спрацював.<br>\r\nЦе можна використовувати, щоб набути властивостей або змінити елемент.<br>\r\nУ коді нижче button виводить свій вміст, використовуючи this.innerHTML:</p>\r\n\r\n<p><button onclick=\"alert(this.innerHTML)\">Натисни мене</button></p>\r\n\r\n<p> </p>\r\n\r\n<p>Часті помилки<br>\r\nЯкщо ви тільки починаєте працювати з подіями – звернете увагу на наступні особливості.<br>\r\nФункція повинна бути привласнена як sayThanks, а не sayThanks().<br>\r\nbutton.onclick = sayThanks;</p>\r\n\r\n<p>Якщо додати дужки, то sayThanks() буде вже результат виконання функції (а оскільки в ній немає return, то в onclick потрапить undefined). Нам же потрібна саме функція.<br>\r\nА ось в розмітці якраз дужки потрібні:<br>\r\n<input type=\"button\" id=\"button\" onclick=\"sayThanks()\" /></p>\r\n\r\n<p>Це відмінність просто пояснити. При створенні обробника браузером з атрибуту, він автоматично створює функцію з його вмісту. Тому останній приклад – фактично те ж саме, що:<br>\r\nbutton.onclick = function() {<br>\r\n sayThanks(); // вміст атрибуту<br>\r\n};</p>\r\n\r\n<p>Регістр DOM-властивості має значення.<br>\r\nПри призначенні через DOM потрібно використовувати властивість onclick, а не ONCLICK.</p>\r\n\r\n<p>Фундаментальний недолік описаних вище способів призначення обробника – неможливість повісити декілька обробників на одну подію.<br>\r\nНаприклад, одна частина коду хоче при кліці на кнопку робити її підсвіченою, а інша – видавати повідомлення. Потрібно в різних місцях повісити обробники.<br>\r\nПри цьому новий обробник затиратиме попередній. Наприклад, наступний код насправді призначає один обробник – останній:</p>\r\n\r\n<p>input.onclick = function() { alert(1); }<br>\r\n// ...<br>\r\ninput.onclick = function() { alert(2); } // замінить попередній обробник</p>\r\n\r\n<p>Розробники стандартів досить давно це зрозуміли і запропонували альтернативний спосіб призначення обробників за допомогою спеціальних методів, які вільні від вказаного недоліку.</p>\r\n\r\n<p>Методи addEventListener і removeEventListener</p>\r\n\r\n<p>Методи addEventListener і removeEventListener є сучасним способом призначити або видалити обробник, і при цьому дозволяють використовувати скільки завгодно будь-яких обробників.<br>\r\nПризначення обробника здійснюється викликом addEventListener з трьома аргументами:<br>\r\nelement.addEventListener(event, handler[,option]);</p>\r\n\r\n<p>event<br>\r\nІм\'я події, наприклад click<br>\r\nhandler<br>\r\nПосилання на функцію, яку треба поставити обробником.<br>\r\noption <br>\r\nдодатковий об’єкт з властивостями:<br>\r\nonce: якщо true, тоді обробник буде автоматично видалений після виконання;<br>\r\ncapture: фаза, на якій повинен спрацювати обробник. options може бути false/true, це те ж саме, що {capture: false/true}.<br>\r\npassive: якщо true, то вказує, що обробник ніколи не викличе preventDefault().</p>\r\n\r\n<p>Видалення обробника здійснюється викликом removeEventListener :</p>\r\n\r\n<p>// передати ті ж аргументи, що були у addEventListener<br>\r\nelement.removeEventListener(event, handler[, option]);</p>\r\n\r\n<p>Видалення вимагає саме ту ж функцію<br>\r\nДля видалення потрібно передати саме ту функцію-обробник, яка була призначена.<br>\r\nТак removeEventListener не спрацює:<br>\r\nelem.addEventListener(\"click\",function() {alert(\'Спасибі!\')});<br>\r\n// ....<br>\r\nelem.removeEventListener(\"click\",function() {alert(\'Спасибі!\')});</p>\r\n\r\n<p>У removeEventListener передана не та ж функція, а інша, з однаковим кодом, але це не важливо.<br>\r\nТак правильно:</p>\r\n\r\n<p>function handler() {<br>\r\n alert( \'Спасибі!\' );<br>\r\n}</p>\r\n\r\n<p>input.addEventListener(\"click\", handler);<br>\r\n// ....<br>\r\ninput.removeEventListener(\"click\", handler);</p>\r\n\r\n<p>Зверніть увагу – якщо функцію не зберегти де-небудь, а просто передати в addEventListener, як в попередньому коді, то потім отримати її назад, щоб зняти обробник, буде неможливо. Немає методу, який дозволяє вважати обробники подій, призначені через addEventListener.<br>\r\nМетод addEventListener дозволяє додавати декілька обробників на одну подію одного елементу, наприклад:</p>\r\n\r\n<p><input id=\"elem\" type=\"button\" value=\"Нажми мене\"/></p>\r\n\r\n<p><script><br>\r\n let elem = document.getElementById(\'bcolor\');</p>\r\n\r\n<p> elem.onclick = function BC() {<br>\r\n elem.innerHTML = \'button\';<br>\r\n }</p>\r\n\r\n<p> function MO() {<br>\r\n elem.innerHTML = \'ok\';<br>\r\n }</p>\r\n\r\n<p>elem.addEventListener(\"mouseover\", MO);<br>\r\n</script><br>\r\n <br>\r\nЯк видно з прикладу вище, можна одночасно призначати обробники і через DOM-властивість і через addEventListener. Проте, щоб уникнути плутанини, рекомендується вибрати один спосіб.</p>\r\n\r\n<p>Приклад виконання події transitionend, тобто закінчення CSS-анімації.<br>\r\n<style><br>\r\n button {<br>\r\n transition: width 1s;<br>\r\n width: 100px;<br>\r\n }</p>\r\n\r\n<p> .wide {<br>\r\n width: 300px;<br>\r\n }<br>\r\n</style></p>\r\n\r\n<p><button id=\"elem\" onclick=\"this.classList.toggle(\'wide\');\"><br>\r\n Натисни мене<br>\r\n</button></p>\r\n\r\n<p><script><br>\r\n elem.ontransitionend = function() {<br>\r\n alert( \"ontransitionend\" ); // не спрацює<br>\r\n };</p>\r\n\r\n<p> elem.addEventListener(\"transitionend\", function() {<br>\r\n alert( \"addEventListener\" ); // спрацює після закінчення анімації<br>\r\n });<br>\r\n</script></p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>addEventListener працює завжди, а DOM-властивість – ні.<br>\r\nУ спеціальних методів є ще одна перевага перед DOM-властивостями.<br>\r\nЄ деякі події, які не можна призначити через DOM-властивість, але можна через addEventListener.<br>\r\nНаприклад, таке подія DOMContentLoaded, яка спрацьовує, коли закінчене завантаження або побудова DOM документу.</p>\r\n\r\n<p>Отже:<br>\r\nЄ три способи призначення обробників подій:<br>\r\nАтрибут HTML: onclick=\"...\".<br>\r\nВластивість: elem.onclick = function.<br>\r\nСпеціальні методи:<br>\r\nСучасні: elem.addEventListener (подія, handler [, option]), видалення через removeEventListener.<br>\r\nДля старих IE8-: elem.attachEvent( on+подія, handler ), видалення через detachEvent.<br>\r\nПорівняння addEventListener і onclick:</p>\r\n\r\n<p>Переваги<br>\r\nДеякі події можна призначити тільки через addEventListener.<br>\r\nМетод addEventListener дозволяє призначити багато обробників на одну подію.<br>\r\nНедоліки<br>\r\nОбробник, призначений через onclick, простіше видалити або замінити.<br>\r\nМетод onclick кросс-браузерний.</p>\r\n\r\n<p>Об\'єкт події<br>\r\nЩоб добре обробити подію, недостатньо знати про те, що це – «клік» або «натиснення клавіші». Можуть знадобитися деталі: координати курсора, введений символ та інші, залежно від події.<br>\r\nДеталі події браузер записує в «об\'єкт події» - event, який передається першим аргументом в обробник.</p>\r\n\r\n<p>Властивості об\'єкту події<br>\r\nПриклад нижче демонструє використання об\'єкту події:<br>\r\n<input type=\"button\" value=\"Нажми мене\" id=\"elem\"></p>\r\n\r\n<p><script><br>\r\n elem.onclick = function(event) {<br>\r\n // вивести тип події, елемент і координати кліка<br>\r\n alert(event.type + \" на \" + event.currentTarget);<br>\r\n alert(event.clientX + \":\" + event.clientY);<br>\r\n }<br>\r\n</script></p>\r\n\r\n<p>Властивості об\'єкту event:</p>\r\n\r\n<p>event.type<br>\r\nТип події, в даному випадку click</p>\r\n\r\n<p>event.currentTarget<br>\r\nЕлемент, на якому спрацював обробник. Значення – в точності таке ж, як і у this, але бувають ситуації, коли обробник є методом об\'єкту і його this за допомогою bind прив\'язаний до цього об\'єкту, тоді ми можемо використовувати event.currentTarget.</p>\r\n\r\n<p>event.clientX / event.clientY<br>\r\nКоординати курсора в момент кліка (відносно вікна)<br>\r\nЄ також і ряд інших властивостей, залежно від подій.</p>\r\n\r\n<p>Дії браузера за умовчанням<br>\r\nБагато подій автоматично спричиняють за собою дію браузера.<br>\r\nНаприклад:<br>\r\nКлік по посиланню ініціює перехід на новий URL.<br>\r\nНатиснення на кнопку «відправити» у формі – відсилання її на сервер.<br>\r\nПодвійний клік на тексті – ініціює його виділення.<br>\r\nЯкщо ми обробляємо подію в JavaScript, то часто така дія браузера нам не потрібна. На щастя, його можна відмінити.</p>\r\n\r\n<p>Є два способи відмінити дію браузера:<br>\r\nОсновний спосіб – це скористатися об\'єктом події. Для відміни дії браузера існує стандартний метод event.preventDefault().<br>\r\nЯкщо ж обробник призначений через onподія (не через addEventListener), то можна просто повернути false з обробника.<br>\r\nУ наступному прикладі при кліці по посиланню перехід не відбудеться:<br>\r\n<а href=\"/\" onclick=\"return false\">Нажми тут</a><br>\r\nабо<br>\r\n<а href=\"/\" onclick=\"event.preventDefault()\">тут</a></p>\r\n\r\n<p>Повертати true не потрібно<br>\r\nЗвичайне значення, яке повертає обробник події, ігнорується.<br>\r\nЄдине виключення – це return false з обробника, призначеного через onподія.<br>\r\nІноді в коді розробників можна побачити return інших значень. Але вони не потрібні і ніяк не обробляються.</p>\r\n\r\n<p>Приклад: меню <br>\r\nРозглянемо завдання, коли потрібно створити меню для сайту, наприклад таке:<br>\r\n<ul id=\"menu\" class=\"menu\"><br>\r\n <li><a href=\"/php\">PHP</a></li><br>\r\n <li><a href=\"/html\">HTML</a></li><br>\r\n <li><a href=\"/javascript\">JavaScript</a></li><br>\r\n <li><a href=\"/flash\">Flash</a></li><br>\r\n</ul></p><br>\r\n<br>\r\n<p>Даний приклад за допомогою CSS може виводитися так:<br>\r\nHTML-розмітка зроблена так, що всі елементи меню є не кнопками, а посиланнями, тобто тегами<a>.<br>\r\nЦе тому, що деякі відвідувачі дуже люблять поєднання «правий клік – відкрити в новому вікні». Так, ми можемо використовувати і <button> і<span>, але якщо правий клік не працює – це їх засмучує. Крім того, якщо на сайт зайде пошукач, то по посиланню з <а href=\"...\"> він перейде, а виконати складний JavaScript і отримати результат – навряд чи захоче.<br>\r\nТому в розмітці ми використовуємо саме <a>, але зазвичай клік оброблятиметься повністю в JavaScript, а стандартна дія браузера (перехід по посиланню) – відміняється.<br>\r\nНаприклад, от так:</p>\r\n\r\n<p>menu.onclick = function(event) {<br>\r\n if (event.target.nodeName != \'A\') return;</p>\r\n\r\n<p> let href = event.target.getAttribute(\'href\');<br>\r\n alert( href ); // може бути підвантаження з сервера, генерація інтерфейсу і тому подібне</p>\r\n\r\n<p> return false; // відмінити перехід по url<br>\r\n};</p>\r\n\r\n<br>\r\n<p>В кінці return false, інакше браузер перейде за адресою з href.<br>\r\nОскільки ми застосували делегування, то меню може збільшуватися, можна додати вкладені списки ul/li, стилізувати їх за допомогою CSS – обробник не зажадає змін.</p>\r\n\r\n<p>Інші дії браузера<br>\r\nДій браузера за умовчанням достатньо багато.<br>\r\nОсь деякі приклади подій, які викликають дію браузера:<br>\r\nmousedown натиснення кнопкою миші тоді як курсор знаходиться на тексті починає його виділення.<br>\r\nclick на <Input type=\"checkbox\"> ставить або прибирає галочку.<br>\r\nsubmit при натисненні на <Input type=\"submit\"> у формі дані відправляються на сервер.<br>\r\nwheel рух коліщатка миші ініціює прокрутку.<br>\r\nkeydown при натисненні клавіші в полі введення з\'являється символ.<br>\r\ncontextmenu при правом кліці показується контекстне меню браузера.<br>\r\nВсі ці дії можна відмінити, якщо ми хочемо обробити подію винятково за допомогою JavaScript.<br>\r\nПодії можуть бути зв\'язані між собою.<br>\r\nДеякі події природним чином витікають один з одного.<br>\r\nНаприклад, натиснення мишкою mousedown на полі введення <input> приводить до фокусування усередині нього. Якщо відмінити дію mousedown, то і фокусу не буде.<br>\r\nСпробуйте натиснути мишкою на перший <input> відбудеться подія onfocus. Це звичайна ситуація.<br>\r\nАле якщо натиснути на другому, то фокусування не відбудеться.</p>\r\n\r\n<p><input value=\"Фокус працює\" onfocus=\"this.value=\'\'\"><br>\r\n<input onmousedown=\"return false\" onfocus=\"this.value=\'\'\" value=\"Кликни мене\"></p>\r\n\r\n<p>Це тому, що скасована стандартна дія при onmousedown.<br>\r\nЗ іншої сторони, в другому <input> можна перейти з першого натисненням клавіші Tab і тоді фокусування спрацює. Тобто, справа тут саме в onmousedown=\"return false\".<br>\r\nОтже:<br>\r\nБраузер має вбудовані дії при ряду подій – перехід по посиланню, відправка форми і тому подібне Як правило, їх можна відмінити.<br>\r\nЄ два способи відмінити дію за умовчанням: перший – використовувати event.preventDefault() (IE8-: event.returnValue=false), другий – return false з обробника. Другий спосіб працює тільки якщо обробник призначений через onподія.</p>\r\n\r\n<p>Використані джерела:<br>\r\nhttps://learn.javascript.ru/default-browser-action#%D0%B8%D1%82%D0%BE%D0%B3%D0%BE<br>\r\nhttps://learn.javascript.ru/introduction-browser-events<br>\r\nhttp://javascript.ru/tutorial/events/comparison</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n', 3, 4),
(23, 'Лекція 16', '<p>Лекція 16<br>\r\nТема: Пошук елемента та зміна властивостей об’єкта DOM.</p>\r\n\r\n<p>План<br>\r\nДерево DOM<br>\r\nПошук елементів<br>\r\nВластивості стилю, отримання про них інформації <br>\r\nКласи у вигляді об\'єкту</p>\r\n\r\n<br>\r\n<p>Дерево DOM<br>\r\nОсновним інструментом роботи і динамічних змін на сторінці є DOM (Document Object Model) – об\'єктна модель, використовувана для XML/HTML-документов.<br>\r\nЗгідно DOM-моделі, документ є ієрархією, деревом. Кожен HTML-тег утворює вузол дерева з типом «елемент». Вкладені в нього теги стають дочірніми вузлами. Для представлення тексту створюються вузли з типом «текст».<br>\r\nDOM – це представлення документа у вигляді дерева об\'єктів, доступне для зміни через JavaScript.<br>\r\n <br>\r\nПриклад DOM<br>\r\nПобудуємо, спершу, дерево DOM для наступного документа.<br>\r\n<!DOCTYPE HTML><br>\r\n<html><br>\r\n<head><br>\r\n <title>О лосях</title><br>\r\n</head><br>\r\n<body><br>\r\n Правда про лосів<br>\r\n</body><br>\r\n</html><br>\r\n <br>\r\nЙого вигляд:</p>\r\n\r\n<p>У цьому дереві виділено два типи вузлів.<br>\r\nТеги утворюють вузли-елементи (element node). Природним чином одні вузли вкладені в інших. Структура дерева утворена виключно за рахунок їх.<br>\r\nТекст усередині елементів утворює текстові вузли (text node), позначені як #text. Текстовий вузол містить виключно рядок тексту і не може мати нащадків, тобто він завжди на самому нижньому рівні.<br>\r\nЗвернете увагу на спеціальні символи в текстових вузлах:<br>\r\nперехід рядка: ↵<br>\r\nпропуск: ␣<br>\r\n <br>\r\nПропуски і перехід рядка – це теж текст, повноправні символи, які враховуються в DOM.<br>\r\nЗокрема, в прикладі вище тег <html> містить не тільки вузли-елементи <head> і <body>, але і #text (пропуски, перехід рядка) між ними.<br>\r\n!!!<br>\r\nDOM-модель – це внутрішнє представлення HTML-сторіки у вигляді дерева.<br>\r\nВсі елементи сторінки, включаючи теги, текст, коментарі, є вузлами DOM.<br>\r\nУ елементів DOM є властивості і методи, які дозволяють змінювати їх.</p>\r\n\r\n<p>Навігація по DOM-елементам<br>\r\nDOM дозволяє робити що завгодно з HTML-елементом і його вмістом, але для цього потрібно спочатку потрібний елемент отримати.<br>\r\nДоступ до DOM починається з об\'єкту document. З нього можна дістатися до будь-яких вузлів.<br>\r\nТак виглядають основні посилання, по яких можна переходити між вузлами DOM:</p>\r\n\r\n<p>Подивимося на них уважніше.<br>\r\n <br>\r\nЗверху documentElement і body<br>\r\nСамі верхні елементи дерева доступні безпосередньо з document.<br>\r\n<HTML> = document.documentElement<br>\r\n <br>\r\nПерша точка входу – document.documentElement. Ця властивість посилається на DOM-об’єкт для тега <html>.<br>\r\n<BODY> = document.body<br>\r\n <br>\r\nДруга точка входу – document.body, який відповідає тегу <body>.<br>\r\nУ сучасних браузерах (окрім IE8-) також є document.head пряме посилання на <head>.<br>\r\n <br>\r\nПошук елементів<br>\r\nПряма навігація від батька до нащадка зручна, якщо елементи поряд. А якщо ні? Як дістати довільний елемент звідкись з глибини документа?<br>\r\nДля цього в DOM є додаткові методи пошуку.<br>\r\n <br>\r\nDocument.getElementById <br>\r\nЯкщо елементу призначений спеціальний атрибут id, то можна отримати його прямо по змінній з ім\'ям із значення id.<br>\r\nНаприклад:<br>\r\n <br>\r\n<div id=\"content-holder\"><br>\r\n <div id=\"content\">Елемент</div><br>\r\n</div></p>\r\n\r\n<p><script><br>\r\n alert( content ); // DOM-елемент<br>\r\n alert( window[\'content-holder\'] ); // в імені дефіс, тому через [...]<br>\r\n</script><br>\r\n </p>\r\n\r\n<p> <br>\r\nЦя поведінка відповідає стандарту. Воно існує, в першу чергу, для сумісності, як уламок далекого минулого і не дуже вітається, оскільки використовує глобальні змінні. Браузер намагається допомогти нам, змішуючи простори імен JS і DOM, але при цьому можливі конфлікти.<br>\r\nПравильнішою і загальноприйнятою практикою є доступ до елементу викликом <br>\r\ndocument.getElementById(\"ідентифікатор\").<br>\r\n <br>\r\nНаприклад:<br>\r\n<div id=\"content\">Виділимо цей элемент</div></p>\r\n\r\n<p><script><br>\r\n let elem = document.getElementById(\'content\');</p>\r\n\r\n<p> elem.style.background = \'red\';</p>\r\n\r\n<p> alert( elem == content ); // true</p>\r\n\r\n<p></script></p>\r\n\r\n<p>Повинен залишитися тільки один<br>\r\nЗа стандартом значення id повинне бути унікальне, тобто в документі може бути тільки один елемент з даним id. І саме він буде повернений.<br>\r\nЯкщо в документі є декілька елементів з унікальним id, то поведінка невизначена. Тобто, немає гарантії, що браузер поверне саме перший або останній – поверне випадковим чином.<br>\r\nТому прагнуть слідувати правилу унікальності id.<br>\r\nДалі в прикладах будемо використовувати пряме звернення через змінну, щоб менше тексту і простіше було зрозуміти що відбувається. Але переважним методом є document.getElementById.<br>\r\n <br>\r\ngetElementsByTagName<br>\r\nМетод elem.getElementsByTagName(tag) шукає всі елементи із заданим тегом tag усередині елементу elem і повертає їх у вигляді списку.<br>\r\nРегістр тега не має значення.<br>\r\nНаприклад:<br>\r\n <br>\r\n// отримати всі div-елементи<br>\r\nlet elements = document.getElementsByTagName(\'div\');</p>\r\n\r\n<p>Звернемо увагу: на відміну від getElementById, який існує тільки в контексті document, метод getElementsByTagName може шукати усередині будь-якого елементу.<br>\r\nНаприклад, знайдемо всі елементи input усередині таблиці:<br>\r\n<table id=\"age-table\"><br>\r\n <tr><br>\r\n <td>Ваш вік:</td><br>\r\n <td><br>\r\n <label><br>\r\n <input type=\"radio\" name=\"age\" value=\"young\" checked> молодше 18<br>\r\n </label><br>\r\n <label><br>\r\n <input type=\"radio\" name=\"age\" value=\"mature\"> від 18 до 50<br>\r\n </label><br>\r\n <label><br>\r\n <input type=\"radio\" name=\"age\" value=\"senior\"> старше 60<br>\r\n </label><br>\r\n </td><br>\r\n </tr> </table><br>\r\n<script><br>\r\n let tableElem = document.getElementById(\'age-table\');<br>\r\n let elements = tableElem.getElementsByTagName(\'input\');</p>\r\n\r\n<p> for (let i = 0; i < elements.length; i++) {<br>\r\n let input = elements[i];<br>\r\n alert( input.value + \': \' + input.checked );<br>\r\n }<br>\r\n</script><br>\r\n </p>\r\n\r\n<br>\r\n<p> <br>\r\n <br>\r\nquerySelectorAll<br>\r\nВиклик elem.querySelectorAll(css) повертає всі елементи усередині elem, що задовольняють CSS-селектору css.<br>\r\nЦе один з найчастіше використовуваних і корисних методів при роботі з DOM.<br>\r\nВін є у всіх сучасних браузерах, включаючи IE8+ (у режимі відповідності стандарту).<br>\r\nНаступний запит отримує всі елементи LI, які є останніми нащадками в UL:</p>\r\n\r\n<p><ul><br>\r\n <li>Цей</li><br>\r\n <li>тест</li><br>\r\n</ul><br>\r\n<ul><br>\r\n <li>повністю</li><br>\r\n <li>виконаний</li><br>\r\n</ul><br>\r\n<script><br>\r\n let elements = document.querySelectorAll(\'ul > li:last-child\');</p>\r\n\r\n<p> for (let i = 0; i < elements.length; i++) {<br>\r\n alert( elements[i].innerHTML ); // \"тест\", \"виконаний\"<br>\r\n }<br>\r\n</script></p>\r\n\r\n<p> <br>\r\n <br>\r\nПсевдо-класи в CSS-селекторі, зокрема :hover і :active, також підтримуються. Наприклад, document.querySelectorAll(\':hover\') поверне список, в порядку вкладеності, з поточних елементів під курсором миші.<br>\r\n <br>\r\nquerySelector<br>\r\nВиклик elem.querySelector(css) повертає не все, а тільки перший елемент, відповідний CSS-селектору css.<br>\r\nІнакше кажучи, результат – такий же, як і при elem.querySelectorAll(css)[0], але в останньому виклику спочатку шукаються всі елементи, а потім береться перший, а в elem.querySelector(css) шукається тільки перший, тобто він ефективніший.<br>\r\nЦей метод часто використовується, коли ми свідомо знаємо, що відповідний елемент тільки один, і хочемо отримати в змінну відразу його.<br>\r\ndocument.querySelector(\'#tab1\').onclick = function(event) { }</p>\r\n\r\n<p>Властивості стилю, отримання про них інформації за допомогою JavaScript.<br>\r\n <br>\r\nСтилі елементу: властивість style<br>\r\nВластивість element.style повертає об\'єкт, який дає доступ до стилю елементу на читання і запис.<br>\r\nЗ його допомогою можна змінювати більшість CSS-властивостей, наприклад<br>\r\nelement.style.width=\"100px\" <br>\r\nпрацює так, як ніби у елемента в атрибуті прописане <br>\r\nstyle=\"width:100px\".</p>\r\n\r\n<p>Одиниці вимірювання обов\'язкові в style. Про це іноді забувають, але в style так само, як і в CSS, потрібно указувати одиниці вимірювання, наприклад px.<br>\r\nelem.style.width = 100 - працювати не буде.<br>\r\nДля властивостей, назви яких складаються з декількох слів, використовується осьТакийЗапис:</p>\r\n\r\n<p>background-color => elem.style.backgroundColor<br>\r\nz-index => elem.style.zIndex<br>\r\nborder-left-width => elem.style.borderLeftWidth</p>\r\n\r\n<p>Приклад використання style:<br>\r\n </p>\r\n\r\n<p>CSS<br>\r\n.bc1{<br>\r\n height:50px;<br>\r\n width:100px;<br>\r\n border-radius:3px;<br>\r\n border:rgba(0,0,0,.3) 0px solid;<br>\r\n box-sizing: border-box;<br>\r\n padding:10px;<br>\r\n background:#90c843;<br>\r\n color:#FFF;<br>\r\n font-family: \'Open Sans\', sans-serif; <br>\r\n font-weight:400;<br>\r\n font-size: 16pt;<br>\r\n cursor:pointer;<br>\r\n}<br>\r\n <br>\r\n <br>\r\n <br>\r\n <br>\r\n <br>\r\nHTML<br>\r\n<button type=\'text\' id=\"bcolor\" class=\"bc1\"> 1<br>\r\n</button><br>\r\n <br>\r\nJavaScript<br>\r\n<script><br>\r\nlet elem = document.getElementById(\'bcolor\');<br>\r\n <br>\r\nelem.onclick = function BtnClick() {<br>\r\nif (elem.style.background) {<br>\r\n elem.style.background = \'\';<br>\r\n}<br>\r\nelse elem.style.background = \'#ff6a00\'; <br>\r\n}<br>\r\n</script></p>\r\n\r\n<p> <br>\r\n </p>\r\n\r\n<p>Властивості з префіксами<br>\r\nСпецифічні властивості браузеров, типу -moz-border-radius, -webkit-border-radius, записуються наступним способом:<br>\r\nbutton.style.MozBorderRadius = \'5px\';<br>\r\nbutton.style.WebkitBorderRadius = \'5px\';</p>\r\n\r\n<p>Тобто, кожен дефіс дає велику букву.<br>\r\nЩоб скинути поставлений стиль, привласнюють в style порожній рядок: elem.style.width=\"\".<br>\r\nПри скиданні властивості style стиль буде узятий з CSS.<br>\r\nНаприклад, для того, щоб заховати елемент, можна привласнити: elem.style.display = \"none\".<br>\r\nА ось щоб показати його назад – не обов\'язково явно указувати інший display, на зразок elem.style.display = \"block\". Можна просто зняти поставлений стиль: elem.style.display = \"\".</p>\r\n\r\n<p>// якщо запустити цей код, то <body> \"мигне\"<br>\r\ndocument.body.style.display = \"none\";</p>\r\n\r\n<p>setTimeout(function() {<br>\r\n document.body.style.display = \"\";<br>\r\n}, 1000);<br>\r\n <br>\r\nСтиль в style знаходиться у форматі браузера, а не в тому, в якому його привласнили.<br>\r\nНаприклад:<br>\r\n <br>\r\n<body><br>\r\n <script><br>\r\n document.body.style.margin = \'20px\';<br>\r\n alert( document.body.style.marginTop ); // 20px!</p>\r\n\r\n<p> document.body.style.color = \'#abc\';<br>\r\n alert( document.body.style.color ); // rgb(170, 187, 204)<br>\r\n </script><br>\r\n</body><br>\r\n <br>\r\nЗверніть увагу на те, як браузер «розпакував» властивість style.margin, надавши для читання style.marginTop. Те ж саме відбудеться і для border, background і так далі.<br>\r\n <br>\r\nВластивість style ми використовуємо лише там, де не працюють класи.<br>\r\nВ більшості випадків зовнішній вигляд елементів задається класами. А JavaScript додає або видаляє їх. Такий код красивий і гнучкий, дизайн можна легко змінювати.<br>\r\nВластивість style потрібно використовувати лише там, де класи не підходять, наприклад якщо точне значення кольору/відступу/висоти обчислюється в JavaScript.<br>\r\n <br>\r\nКласи у вигляді об\'єкту</p>\r\n\r\n<p>Властивість classList<br>\r\n <br>\r\nВластивість classList – це об\'єкт для роботи з класами.<br>\r\nМетоди classList:<br>\r\nelem.classList.contains(\"class\") – повертає true/false, залежно від того, чи є у елементу клас class.<br>\r\nelem.classList.add/remove(\"class\") додає/видаляє клас class<br>\r\nelem.classList.toggle(\"class\") якщо класу class немає, додає його, якщо є – видаляє.</p>\r\n\r\n<p>Додавання і видалення вузлів<br>\r\nЗміна DOM – ключ до створення «живих» сторінок.</p>\r\n\r\n<p>Як приклад розглянемо додавання повідомлення (блоку з текстом) на сторінку.<br>\r\nHTML-код для повідомлення:</p>\r\n\r\n<p><style><br>\r\n.alert {<br>\r\n padding: 15px;<br>\r\n border: 1px solid #d6e9c6;<br>\r\n border-radius: 4px;<br>\r\n color: #3c763d;<br>\r\n background-color: #dff0d8;<br>\r\n}<br>\r\n</style></p>\r\n\r\n<p><div class=\"alert\"><br>\r\n <strong>Ура!</strong> Ви прочитали це важливе повідомлення.<br>\r\n</div></p>\r\n\r\n<br>\r\n<p>Створення елементу<br>\r\nДля створення елементів використовуються наступні методи:<br>\r\ndocument.createElement(tag)</p>\r\n\r\n<p>Створює новий елемент з вказаним тегом:<br>\r\nlet div = document.createElement(\'div\');</p>\r\n\r\n<p>У даному випадку ми хочемо зробити DOM-елемент div, дати йому класи і заповнити текстом:<br>\r\nlet div = document.createElement(\'div\');<br>\r\ndiv.className = \"alert\";<br>\r\ndiv.innerHTML = \" Нове повідомлення.\";<br>\r\nПісля цього коду у нас є готовий DOM-елемент. Поки що він привласнений в змінну div, але не видний, оскільки ніяк не пов\'язаний із сторінкою.</p>\r\n\r\n<p>Створення текстового вузла<br>\r\ndocument.createTextNode(text)<br>\r\nСворює новий текстовий вузол з заданим текстом:<br>\r\nlet textNode = document.createTextNode(\'Новий текст\');</p>\r\n\r\n<br>\r\n<p>Методи вставки<br>\r\nЩоб новий обʼєкт, наприклад div, зʼявився на сторінці, то потрібно додати (вставити) його в document. Наприклад, в document.body. <br>\r\nДля цього існує метод append, у цьому випадку: document.body.append(div).<br>\r\nПриклад:<br>\r\n<style><br>\r\n.alert {<br>\r\n padding: 15px;<br>\r\n border: 2px solid #088A4B;<br>\r\n border-radius: 4px;<br>\r\n color: #173B0B;<br>\r\n background-color: #F7FE2E;<br>\r\n}<br>\r\n</style></p>\r\n\r\n<p><script><br>\r\n let div = document.createElement(\'div\');<br>\r\n div.className = \"alert\";<br>\r\n div.innerHTML = <strong>Привіт!</strong> Ми створили нове повідомлення на сторінці.\";</p>\r\n\r\n<p> document.body.append(div);<br>\r\n</script><br>\r\n </p>\r\n\r\n<p>Методи для різних варіантів вставки:<br>\r\nnode.append(...nodes or strings) – додає вузли/рядки у кінець node,<br>\r\nnode.prepend(...nodes or strings) – додає вузли/рядки у початок node,<br>\r\nnode.before(...nodes or strings) –- додає вузли/рядки до (перед) node,<br>\r\nnode.after(...nodes or strings) –- додає вузли/рядки після node,<br>\r\nnode.replaceWith(...nodes or strings) –- замінює node заданими вузлами/рядками.<br>\r\nРозглянемо приклад використання цих методів, щоб додати нові елементи у список і текст до/після нього:<br>\r\n<ol id=\"ol\"><br>\r\n <li>0</li><br>\r\n <li>1</li><br>\r\n <li>2</li><br>\r\n</ol></p>\r\n\r\n<p><script><br>\r\n ol.before(\'before\'); // додати рядок \"before\" перед <ol><br>\r\n ol.after(\'after\'); // додати рядок \"after\" после <ol></p>\r\n\r\n<p> let liFirst = document.createElement(\'li\');<br>\r\n liFirst.innerHTML = \'prepend\';<br>\r\n ol.prepend(liFirst); // додати liFirst у початок <ol></p>\r\n\r\n<p> let liLast = document.createElement(\'li\');<br>\r\n liLast.innerHTML = \'append\';<br>\r\n ol.append(liLast); // додати liLast у кінец <ol><br>\r\n</script></p><br>\r\n<br>\r\n<p>Видалення вузлів: remove()<br>\r\nДля видалення вузла є метод:<br>\r\nnode.remove()</p>\r\n\r\n<p>Розглянемо приклад, де повідомлення зникає через 3 секунди</p>\r\n\r\n<br>\r\n<p><style><br>\r\n.alert {<br>\r\n padding: 15px;<br>\r\n border: 2px solid #088A4B;<br>\r\n border-radius: 4px;<br>\r\n color: #173B0B;<br>\r\n background-color: #F7FE2E;<br>\r\n}<br>\r\n</style></p>\r\n\r\n<p><script><br>\r\n let div = document.createElement(\'div\');<br>\r\n div.className = \"alert\";<br>\r\n div.innerHTML = <strong>Привіт!</strong> Ми створили нове повідомлення на сторінці.\";<br>\r\n document.body.append(div);<br>\r\n setTimeout(() => div.remove(), 3000); </script></p>\r\n\r\n<p>Метод document.write (html)<br>\r\nВиклик document.write (html) записує html на сторінку «прямо тут і зараз». Рядок html може бути динамічно згенерована, тому метод досить гнучкий. Ми можемо використовувати JavaScript, щоб створити повноцінну веб-сторінку і записати її в документ.<br>\r\nЦей метод використовувався, коли ще не було ні DOM, ні стандартів ... Дійсно старі часи. Він все ще живе, бо є скрипти, які використовують його. В сучасних скриптах він рідко зустрічається через наступне важливе обмеження:<br>\r\nВиклик document.write працює тільки під час завантаження сторінки.<br>\r\nЯкщо викликати його пізніше, то існуючий вміст документа затирається.<br>\r\nТак що після того, як сторінка завантажена, він уже непридатний до використання, на відміну від інших методів DOM, які розглянули вище.<br>\r\nЦе його недолік.<br>\r\nЄ й перевага. Технічно, коли document.write запускається під час читання HTML браузером, і щось пише в документ, то браузер сприймає це так, як ніби це спочатку було частиною завантаженого HTML-документа.<br>\r\nТому він працює неймовірно швидко, адже при цьому немає модифікації DOM. Метод пише прямо в текст сторінки, поки DOM ще в процесі створення.<br>\r\nТак що, якщо нам потрібно динамічно додати багато тексту в HTML, і ми знаходимося на стадії завантаження, і для нас дуже важлива швидкість, це може допомогти. Але на практиці ці вимоги рідко поєднуються. І звичайно ми можемо побачити цей метод в скриптах просто тому, що вони старі.</p>\r\n\r\n<p>Приклад</p>\r\n\r\n<p>HTML<br>\r\n<div class=\"parent\"><br>\r\n <div class=\"pform\"><br>\r\n <lable for=\"td\">Количество столбцов</lable><br><br>\r\n <input type=\"text\" id=\"countTd\" name=\"td\"><br><br>\r\n <br>\r\n<lable for=\"tr\">Количество строк</lable><br><br>\r\n <input type=\"text\" id=\"countTr\" name=\"tr\"><br><br><br>\r\n <br>\r\n<button type=\"text\" id=\"button\"> Создать таблицу </button><br>\r\n </div></p>\r\n\r\n<p> <div class=\'view\' id=\'view\' > </div><br>\r\n</div></p>\r\n\r\n<p>CSS</p>\r\n\r\n<p>.parent {<br>\r\n height: 300px;<br>\r\n width: 1300px;<br>\r\n border-style: outset;<br>\r\n border-width: 2px;<br>\r\n background: #afb8c6;<br>\r\n justify-content: space-around;<br>\r\n display: flex;<br>\r\n padding: 20px;<br>\r\n}</p>\r\n\r\n<p>.pform {<br>\r\n height: 280px;<br>\r\n width: 300px;<br>\r\n padding: 10px;<br>\r\n border-style: groove;<br>\r\n border-radius: 10px 20px;<br>\r\n border-width: 5px;<br>\r\n background: #d3dae5;<br>\r\n}</p>\r\n\r\n<p>.view {<br>\r\n height: 280px;<br>\r\n width: 900px;<br>\r\n padding: 10px;<br>\r\n border-style: groove;<br>\r\n border-radius: 10px;<br>\r\n border-width: 5px;<br>\r\n background: #d3dae5;<br>\r\n overflow: scroll;<br>\r\n}</p>\r\n\r\n<p>.tdstyle {<br>\r\n border-width: 2px;<br>\r\n height: 10px;<br>\r\n width: 10px; <br>\r\n text-align: center;<br>\r\n border-style: ridge;<br>\r\n}</p>\r\n\r\n<p>.tdcolor {<br>\r\n background: #80cdaa;<br>\r\n}</p>\r\n\r\n<br>\r\n<p>JavaScript</p>\r\n\r\n<p>document.querySelector(\'#button\').onclick = function (event){<br>\r\n let tbl = document.createElement(\'table\');<br>\r\n let inputTr = document.querySelector(\'.pform #countTr\').value;<br>\r\n let inputTd = document.querySelector(\'.pform #countTd\').value;<br>\r\n <br>\r\n if (inputTr > 0 && inputTd > 0) {<br>\r\n document.querySelector(\'#view\').innerHTML = \' \';<br>\r\n for (i = 0; i < inputTr; i++){<br>\r\n let nTr = document.createElement(\'tr\');</p>\r\n\r\n<p> for (j = 0; j < inputTd; j++){<br>\r\n let nTd = document.createElement(\'td\');<br>\r\n nTd.className = \'tdstyle tdcolor\';<br>\r\n nTr.append(nTd);<br>\r\n nTd.innerHTML = j+1;<br>\r\n }</p>\r\n\r\n<p> tbl.append(nTr);<br>\r\n }</p>\r\n\r\n<p> document.querySelector(\'#view\').append(tbl);<br>\r\n } else<br>\r\n document.querySelector(\'#view\').innerHTML = \'Error!!!\';<br>\r\n};</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n', 3, 4);
INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(24, 'Лабораторна робота 13', '<p>Лабораторна робота №13<br>\r\nТема: Мова створення сценаріїв JavaScript: синтаксиз, основні елементи.<br>\r\nМета роботи :<br>\r\nознайомлення з мовою складання сценаріїв JavaScript;<br>\r\nознайомлення з базовим синтаксисом, основними елементами JavaScript;<br>\r\nпридбання навичок створення HTML - документів з використанням JavaScript.</p>\r\n\r\n<p>Теоретичні відомості</p>\r\n\r\n<p>Гіпертекстова інформаційна система складається з безлічі інформаційних вузлів, безлічі гіпертекстових зв\'язків, визначених на цих вузлах і інструментах маніпулювання вузлами і зв\'язками. Технологія World Wide Web - це технологія ведення гіпертекстових розподілених систем в Internet, і, отже, вона повинна відповідати загальному визначенню таких систем. Це означає, що всі перераховані вище компоненти гіпертекстової системи повинні бути і в Web.<br>\r\nWeb, як гіпертекстову систему, можна розглядати з двох крапок зір. По-перше, як сукупність сторінок, що відображаються, зв\'язаних гіпертекстовими переходами (посиланнями - контейнер ANCHOR). По-друге, як безліч елементарних інформаційних об\'єктів, складових сторінки, що відображаються (текст, графіка, мобільний код і тому подібне). У останньому випадку безліч гіпертекстових переходів сторінки - це такий же інформаційний фрагмент, як і вбудована в текст картинка.<br>\r\nПри другому підході гіпертекстова мережа визначається на безлічі елементарних інформаційних об\'єктів самими HTML-сторінками, які і грають роль гіпертекстових зв\'язків. Цей підхід продуктивніший з погляду побудови сторінок, що відображаються, \"на льоту\" з готових компонентів.<br>\r\nПри генерації сторінок в Web виникає дилема, пов\'язана з архітектурою \"клієнт-сервер\". Сторінки можна генерувати як на стороні клієнта, так і на стороні сервера. У 1995 році фахівці компанії Netscape створили механізм управління сторінками на клієнтській стороні, розробивши мову програмування JavaScript.<br>\r\nТаким чином, JavaScript - це мова управління сценаріями проглядання гіпертекстових сторінок Web на стороні клієнта. Якщо бути точнішим, то JavaScript - це не тільки мова програмування на стороні клієнта. Liveware, прародитель JavaScript, є засобом підстановок на стороні сервера Netscape. Проте найбільшу популярність JavaScript забезпечило програмування на стороні клієнта.<br>\r\nОсновна ідея JavaScript полягає в можливості зміни значень атрибутів HTML-контейнерів і властивостей середовища відображення в процесі перегляду HTML-сторінки користувачем. При цьому перезавантаження сторінки не відбувається.<br>\r\nНа практиці це виражається в тому, що можна, наприклад, змінити колір фону сторінки або інтегровану в документ картинку, відкрити нове вікно або видати попередження.<br>\r\nНазва \"JavaScript\" є власністю Netscape. Реалізація мови, здійснена розробниками Microsoft, офіційно називається Jscript. Версії JScript сумісні (якщо бути зовсім точним, то не до кінця) з відповідними версіями JavaScript, тобто JavaScript є підмножиною мови JScript.<br>\r\nJavaScript стандартизована ECMA (European Computer Manufacturers Association - Асоціація європейських виробників комп\'ютерів). Відповідні стандарти носять назви ECMA-262 і ISO-16262. Цими стандартами визначається мова ECMAScript, яка приблизно еквівалентна JavaScript 1.1. Відзначимо, що не всі реалізації JavaScript на сьогодні повністю відповідають стандарту ECMA. В рамках даного курсу ми у всіх випадках використовуватимемо назву JavaScript.</p>\r\n\r\n<p>Структура DOM (Document Object Model) документа HTML і місце Javascript в тілі документа</p>\r\n\r\n<p>Рисунок 1 - Структура DOM (Document Object Model) документа HTML</p>\r\n\r\n<p>За допомогою програмованої об\'єктної моделі JavaScript стає повноцінним інструментом по створенню динамічного HTML (DHTML):<br>\r\n• JavaScript може змінити всі HTML елементи на сторінці<br>\r\n• JavaScript може змінити всі атрибути HTML на сторінці<br>\r\n• JavaScript може змінити всі стилі CSS на сторінці<br>\r\n• JavaScript може реагувати на всі події на сторінці</p>\r\n\r\n<p>Скрипти можуть розташовуватися як в області заголовка HTML, так і в області тіла HTML.</p>\r\n\r\n<p>Приклад 1. Розміщення скрипта в тілі документа:</p>\r\n\r\n<br>\r\n<p>Приклад 2. Код у складі сторінки HTML:</p><br>\r\n<br>\r\n<br>\r\n<p>Використання змінних<br>\r\nЗалежно від того, для чого ви робите скрипт, знадобиться працювати з інформацією. Змінна складається з імені і виділеної області пам\'яті, яка йому відповідає.<br>\r\nДля оголошення або, іншими словами, створення змінної використовується ключове слово let:<br>\r\nlet message;</p>\r\n\r\n<p>Після оголошення, можна записати в змінну дані:<br>\r\nlet message;<br>\r\nmessage = \'Привіт\'; <br>\r\n/* збережемо в змінній рядок<br>\r\nЦі дані будуть збережені у відповідній області пам\'яті і надалі доступні при зверненні по імені: */</p>\r\n\r\n<p>let message; <br>\r\nmessage = \'Привіт\';<br>\r\nalert(message); // виведе вміст змінної</p>\r\n\r\n<p>Скорочено можна сумістити оголошення змінній і запис даних:<br>\r\nlet message = \'Привіт\';</p>\r\n\r\n<p>При зміні значення старий вміст змінної віддаляється.<br>\r\nЗмінні в JavaScript можуть зберігати не тільки рядки, але і інші дані, наприклад<br>\r\nчисла.<br>\r\nОголосимо дві змінні, покладемо в одну - рядок, а в іншу - число. Як ви можете бачити, змінній без різниці, що зберігати:<br>\r\nlet num = 10 050 0;<br>\r\nlet message = \'Привіт\';</p>\r\n\r\n<p>Значення можна копіювати з однієї змінної в іншу.<br>\r\nlet num = 100500;<br>\r\nlet message = \'Привіт\';<br>\r\nmessage = num;</p>\r\n\r\n<p>Значення з num перезаписує поточне в message.<br>\r\nУ JavaScript ви можете створити змінну і без let, досить просто привласнити їй значення:<br>\r\nx = \"value\"; // змінна створена, якщо її не було Технічно, це не викличе помилки, але робити так усе-таки не стоїть. Завжди визначайте змінні через var. Це хороший тон в програмуванні і допомагає уникнути помилок.<br>\r\nПриклад 3. Документ з оголошенням змінних:</p><br>\r\n<br>\r\n<p>Оголошення констант<br>\r\nКонстанта — це змінна, яка ніколи не міняється. Як правило, їх оголошують за допомогою const і називають великими буквами, через підкреслення. Їх не можна змінювати, а спроба змінити значення прведе до помилки. Наприклад:<br>\r\n <br>\r\nconst COLOR_BLUE=\"#00F\";<br>\r\nconst COLOR_RED=\"#0F0\";<br>\r\nconst COLOR GREEN = \"#F00\";<br>\r\nconst COLOR_ORANGE = \"#FF7F00\";<br>\r\nlet color = COLOR_ORANGE;<br>\r\nalert(color); // #FF7F00</p>\r\n\r\n<p>Технічно, константа є звичайній змінній, тобто її можна змінити. Але ми домовляємося цього не робити.<br>\r\nНавіщо потрібні константи? Чом би просто не використовувати \"#F00\" або \"#0F0\"?<br>\r\n1. По-перше, константа — це зрозуміле ім\'я, на відміну від рядка \"#FF7F00\".<br>\r\n2. По-друге, друкарська помилка в рядку може бути не відмічена, а в імені константи її упустити неможливо — буде помилка при виконанні.</p>\r\n\r\n<p>Константи використовують замість рядків і цифр, щоб зробити програму зрозуміліше і уникнути помилок.</p>\r\n\r\n<p>На імена змінних накладено два обмеження:<br>\r\n1. Ім\'я може складатися з: букв, цифр, символів $ і _<br>\r\n2. Перший символ не повинен бути цифрою. </p>\r\n\r\n<p>!!! Регістр букв має значення<br>\r\nЗмінні apple і APPLE - дві різні змінні.</p>\r\n\r\n<p>Існує список зарезервованих слів, які не можна використовувати при іменуванні змінних, оскільки вони використовуються самою мовою, наприклад: var, let, class, return, implements і ін.<br>\r\nДеякі слова, наприклад, class, не використовуються в сучасному JavaScript, але вони зайняті на майбутнє. Деякі браузеры дозволяють їх використовувати, але це може привести до помилок.<br>\r\nВзаємодія з користувачем: alert, prompt, confirm<br>\r\nУ цьому розділі ми розглянемо базові операції UI: alert, prompt і confirm, які дозволяють працювати з даними, отриманими від користувача.</p>\r\n\r\n<p>Оператор alert<br>\r\nСинтаксис: alert(повідомлення)<br>\r\nalert виводить на екран вікно з повідомленням і припиняє виконання скрипта, поки користувач не натисне «ОК».</p>\r\n\r\n<p>alert(\"Привіт\");</p>\r\n\r\n<p>Вікно повідомлення, яке виводиться, є модальним вікном. Слово «модальне» означає, що відвідувач не може взаємодіяти із сторінкою, натискати інші кнопки і тому подібне, поки не розбереться з вікном. В даному випадку - поки не натисне на «OK».</p>\r\n\r\n<p>Правильні варіанти використання вікна \"alert\":<br>\r\nalert(\"Всім привіт від JavaScript! \");<br>\r\nalert(\"Привіт, \"+username+\", від Javascript\");<br>\r\nlet messageString = \"Ще один привіт!\";<br>\r\nalert(messageString);</p>\r\n\r\n<p>Оператор confirm<br>\r\nСинтаксис:<br>\r\nresult = confirm(question);</p>\r\n\r\n<p>confirm виводить вікно з питанням question з двома кнопками: OK і CANCEL.</p>\r\n\r\n<p>Результатом буде true при натисненні OK і false - при CANCEL(Esc).<br>\r\nНаприклад:</p>\r\n\r\n<p>let isAdmin= onfirm(\"Ви-адміністратор?\");<br>\r\nalert(isAdmin);</p>\r\n\r\n<p>Місце, де виводиться модальне вікно з питанням, і зовнішній вигляд вікна вибирає браузер. Розробник не може на це впливати.<br>\r\nЗ одного боку — це недолік, оскільки не можна вивести вікно в своєму дизайні.<br>\r\nЗ іншого боку, перевага цих функцій в порівнянні з іншими, складнішими методами взаємодії, які ми вивчимо надалі, — якраз в тому, що вони дуже прості.<br>\r\nЦе найпростіший спосіб вивести повідомлення або отримати інформацію від відвідувача. Тому їх використовують в тих випадках, коли простота важлива, а всякі «красивої» особливої ролі не грають.<br>\r\nПравильні варіанти використання вікна \"confirm\":<br>\r\nif (confirm(\"Сказати привіт?\")) {<br>\r\n alert(\"Привіт!\")<br>\r\n else {<br>\r\n alert(\"Ви натиснули кнопку відміна\")<br>\r\n </p>\r\n\r\n<p>Оператор prompt<br>\r\nФункція prompt приймає два аргументи: result = prompt(title, default);<br>\r\nВона виводить модальне вікно із заголовком title, полем для введення тексту, заповненим рядком за умовчанням default і кнопками OK/CANCEL.<br>\r\nКористувач повинен або щось ввести і натиснути OK, або відмінити введення кликом на CANCEL або натисненні ESC на клавіатурі.<br>\r\nВиклик prompt повертає те, що ввів відвідувач - рядок або спеціальне значення null, якщо введення скасоване.<br>\r\nЯк і у випадку з alert, вікно prompt модальне.</p>\r\n\r\n<p>let years = prompt(\'Скільки вам років?\', 100);<br>\r\nalert(\'Вам \' + years + \' років!\');</p>\r\n\r\n<p>Завжди указуйте default</p>\r\n\r\n<p>Взагалі, другий default може бути відсутнім.</p>\r\n\r\n<p>Запустіть цей код у браузері, щоб зрозуміти про що мова:<br>\r\nlet test = prompt(\"Тест\");</p>\r\n\r\n<p>Тому рекомендується завжди указувати другий аргумент:<br>\r\nlet test = prompt(\"Тест\", \'\'); // <-- так краще</p>\r\n\r\n<p>Правильні варіанти використання вікна \"prompt\":<br>\r\nlet years=prompt(\'Скільки вам років?\', 100)<br>\r\nalert(\'Вам \'+years+\' років!\')</p>\r\n\r\n<p>Зверніть увагу!<br>\r\nЯкщо поставити перед рядком знак математичної операції, рядок перетвориться в число:<br>\r\nlet a=10<br>\r\nlet b=+prompt(\'Введіть число\',\'\')<br>\r\nlet c=a+b<br>\r\nalert(\'ваше число+10=\'+c)</p>\r\n\r\n<p>Якщо Ви ввели число, виведеться його сума - інакше NAN.</p>\r\n\r\n<p>let a, b, rez;<br>\r\n a = +prompt (\"Введіть змінну А:\", \'\');<br>\r\n b = +prompt (\"Введіть змінну В:\", \'\');</p>\r\n\r\n<p> rez = a + b;<br>\r\n alert(\"Відповідь: \" + a + \"+\" + b + \"=\" + rez);</p>\r\n\r\n<br>\r\n<p>Практична частина<br>\r\nВиконайте приклади.<br>\r\nСтворіть веб-сторінку блокової структури, виконайте графічне оформлення.<br>\r\nНапишіть скрипт для складання двох чисел, двох рядків, рядка і числа.<br>\r\nВикористовуючи JavaScript знайдіть значення виразу </p>\r\n\r\n<p>(25*x*2+17*y) /5+888 при x=v*2.5-n, y=v*0.3, </p>\r\n\r\n<p>і значення виразу </p>\r\n\r\n<p>(87*y/8+2*x/5-33)*6 при x=7*v-5, y=5*v-7 </p>\r\n\r\n<p>та виведіть результат на веб-сторінку у окремому блоці. <br>\r\nЗмінні v і n потрібно ввести у повідомленні.<br>\r\nДля округлення використовуйте Math.round(аргумент). Для округлення до заданої точності можна поступити так:<br>\r\nlet price = 6.35;<br>\r\nalert( price.toFixed(1) ); // 6.3<br>\r\nalert( Math.round(price*10)/10 ); // 6.4</p>\r\n\r\n<p>За допомогою вікна діалогу дізнайтеся у відвідувача сторінки його ім\'я. І виведіть його у окремому блоці. Запропонуйте відвідувачу ввести два числа по черзі. Виведіть у вікно alert результат складання. <br>\r\nСкрипти пояснити за допомогою коментарів.<br>\r\nДати відповіді та контрольні запитання.<br>\r\nОформити звіт.</p>\r\n\r\n<p>Контрольні запитання<br>\r\nЩо таке DOM?<br>\r\nВ який спосіб можна додати динамічний зміст на веб-сторінку?<br>\r\nЩо таке змінна в JavaScript? Як оголосити змінну?<br>\r\nНазвіть методи взаємодії з користувачем? <br>\r\n</p>', 3, 1),
(25, 'Лабораторна робота 14', '<p>Лабораторна робота № 14</p>\r\n\r\n<p>Тема: Доступ до об\'єктів і сценаріїв. Події.<br>\r\nМета роботи: ознайомитися з передумовами створення динамічного HTML. Вивчити прийоми роботи з об\'єктами. На практиці освоїти програмування з використанням вбудованих функцій мови JavaScrіpt.</p>\r\n\r\n<p>Теоретична відомості</p>\r\n\r\n<p>Мова HTML є мовою розмітки гіпертексту, яка не розрахована на виконання будь-яких «активних» дій. Цим дана мова відрізняється від мов програмування.<br>\r\nСьогодні від веб-сторінок вимагають більш широких можливостей. Так з\'явився динамічний HTML.<br>\r\nДинамічний HTML (DHTML - Dynamic HTML) - поєднання звичайного HTML і мови сценаріїв JavaScript. Більш складні речі (обробка та зберігання інформації, що отримується від відвідувача сторінки) здійснюється за допомогою мов програмування PHP, Perl.<br>\r\nКожен елемент на сторінці (текст, малюнок, таблиця) - це об\'єкт, що має свої властивості. Властивості об\'єкта можна змінювати зі js-скрипта. Все, що відбувається на веб-сторінці - це події, для яких можна призначати обробники, тобто реагувати на них.<br>\r\nПодією називається якась дія, подія на сторінці, у відповідь на яку потрібно виконати певні операції - змінити форматування сторінки, передати дані на сервер і т.д.<br>\r\nБудь-яка подія має «господаря» - елемент веб-сторінки, з яким ця подія відбувається.</p>\r\n\r\n<br>\r\n<p>Приклад: «Господарем» може бути гіперпосилання, а подіями - наведення на неї покажчика миші, або «клікнути» на ній.</p>\r\n\r\n<p>Події</p>\r\n\r\n<p>onMouseOver - курсор миші над об\'єктом<br>\r\nonMouseOut - курсор миші пішов з об\'єкта</p>\r\n\r\n<p><IMG SRC = \"image1.gif\" onMouseOver = \"this.src = \'image2.gif\'\" onMouseOut = \"this.src = \'image1.gif\'\"></p>\r\n\r\n<p>this - цей об\'єкт<br>\r\nthis.src - властивість SRC цього об\'єкта</p>\r\n\r\n<br>\r\n<p>де: image1.gif - початковий малюнок;<br>\r\nimage2.gif - коли курсор «миші» над малюнком;<br>\r\nimage1.gif - після «відходу» курсору «миші».</p>\r\n\r\n<p>приклад:</p><br>\r\n<br>\r\n<p><html><br>\r\n<head><br>\r\n<title> Вправа </title><br>\r\n</head><br>\r\n<body BGCOLOR = \"white\"><br>\r\n<br>\r\n<p><h2 ALIGN = center> <FONT COLOR = red> Вправа </ FONT> </ h2><br>\r\n<a href=\"my_file.html\" onMouseOver=\"document.pic1.src=\'/pics/image2.gif\' \"onMouseOut=\"document.pic1.src=\'/pics/image1.gif\'\"><br>\r\n<img src = \"/pics/image1.gif\" border = 0 name = \"pic1\"> </a><br>\r\n</ body><br>\r\n</ html></p>\r\n\r\n<p> <br>\r\nпочатковий рисунок (image1.gif) коли курсор «миші» над рисунком (image2.gif)</p>\r\n\r\n<br>\r\n<p>Тип даних дата-час<br>\r\nЗмінні типу дата-час створюються конструкцією «змінна = new Date ()». При цьому у змінній зберігається дата і час присвоєння, тобто поточний час. <br>\r\nНаприклад, таким чином можна вивести вікно alert з поточною датою і часом.</p>\r\n\r\n<p>let now = new Date (); // Створюємо змінну типу дата-час.<br>\r\ndocument.write (\'</ br>\');<br>\r\ndocument.write (\'Сьогодні:\' + now); // Виводимо час ініціалізації змінної.</p>\r\n\r\n<br>\r\n<p>Об\'єкти типу дата-час представляються як кількість мілісекунд, що пройшли з півночі першого січня 1970 го року по універсально координованого часу (UTC). Універсально координований час (UTC) раніше називалося часом по Грінвічському меридіану (GMT).<br>\r\nДля об\'єктів типу дата-час визначено безліч методів (частина з них приведена в таблиці)</p>\r\n\r\n<p>Метод<br>\r\nОпис<br>\r\ngetDate()<br>\r\nПовертає число місяця.<br>\r\ngetDay()<br>\r\nПовертає день тижня. 0 - неділя, 1- понеділок, 6 - субота.<br>\r\ngetFullYear()<br>\r\nПовертає рік у чотирьохзначному форматі.<br>\r\ngetHours()<br>\r\nПовертає години у 24-годинному форматі.<br>\r\ngetMinutes()<br>\r\nПовертає хвилини.<br>\r\ngetMonth()<br>\r\nПовертає місяць. 0 - січень, 1 - лютий, 2 - березень,… 10 - листопад, 11 - грудень.<br>\r\ngetSeconds()<br>\r\nПовертає секунди.<br>\r\nsetDate(числоМісяця)<br>\r\nЗмінює число місяця на задане. Якщо вказати від’ємне значення або значення більше числа днів у місяці, відповідно зміняться решта характеристик дати. Наприклад, спроба встановити 40-е січня збереже у змінній 9-е лютого.<br>\r\nsetHours(години)<br>\r\nЗмінює число годинника на вказане. Якщо вказати число більше 24 або менш нуля, то відповідно буде змінено число місяця, а при необхідності і місяць і рік. Наприклад, якщо в об\'єкті датаЧас збережено 12:00 31го грудня 1980 року, датаЧас.setHours(30) встановить датаЧас в 6:00 1го січня 1981 року.<br>\r\nsetMinutes(хвилини)<br>\r\nЗмінює число хвилин на вказане. Якщо вказати негативне значення або значення більше 59, відповідно зміниться решта характеристик дати і часу<br>\r\nsetMonth(місяць)<br>\r\nЗмінює місяць на вказаний. Якщо вказати негативне значення або значення більше 11, відповідно зміниться решта характеристик дати.</p>\r\n\r\n<br>\r\n<p>Затримки<br>\r\nДля того, щоб організувати затримку виконання будь-якої функції потрібно скористатися методом setTimeout (). У цього методу два обов\'язкові аргументи: функція і затримка виконання в мілісекундах.</p>\r\n\r\n<p>function showAlert () { // Оголошуємо функцію<br>\r\nAlert (\' Це приблизний текст. \'); // Визначаємо тіло функції.<br>\r\n}<br>\r\nsetTimeout (showAlert, 1500); // Встановлюємо затримку в мсек.</p>\r\n\r\n<p>Інтервали<br>\r\nІнтервали встановлюються аналогічно затримок методом setInterval(). При використання інтервалів функція виконується безліч разів через певні проміжки.</p>\r\n\r\n<br>\r\n<p>function showTime () {// Визначаємо функцію.<br>\r\nlet now = new Date (); // Отримуємо поточний час.<br>\r\nstatus = now.getHours () + \':\' + now.getMinutes () + \':\' + now.getSeconds ();<br>\r\n// Записуємо його в рядок стану.<br>\r\n}<br>\r\nsetInterval (showTime, 250); // Викликаємо функцію кілька разів на секунду.</p>\r\n\r\n<br>\r\n<p>У статусному рядку з\'являється значення поточного часу, який оновлюється 4 рази на секунду.</p>\r\n\r\n<br>\r\n<p>Масиви<br>\r\nМасив можна створити двома способами, перший: створити масив за допомогою квадратних дужок, всередині яких розташований список елементів, розділених комами.</p>\r\n\r\n<p>let ar1 = []; // порожній масив<br>\r\nlet num = [4, 1, 2, 5]; // масив з 5 числовими елементами<br>\r\nlet diff = [1.5, false, \"текст\"]; // масив з 3 елементами різного типу</p><br>\r\n<br>\r\n<p>Другий спосіб створення масиву - виклик конструктора Array(). Викликати конструктор Array () можна трьома способами.<br>\r\n• Виклик конструктора без аргументів:<br>\r\nlet b = new Array ();</p>\r\n\r\n<p>У цьому випадку створюється порожній масив, еквівалентний порожньому ЛІТЕРАЛУ [ ].<br>\r\n• У конструкторі явно вказуються значення n елементів масиву:<br>\r\nlet b = new Array (1, 3, 5, 8, \"рядок\", true);</p>\r\n\r\n<br>\r\n<p>У цьому прикладі конструктор отримує список аргументів, які стають елементами нового масиву. Аргументи записуються в масив у тому порядку, в якому вказані.<br>\r\nВиділення місця для подальшого присвоювання значень виконується шляхом вказівки при визначенні масиву одного числа в круглих дужках:<br>\r\nlet b = new Array (5);</p>\r\n\r\n<br>\r\n<p>Цей спосіб визначення масиву передбачає виділення масиву певної кількості елементів (кожен з яких має значення undefined) з можливістю подальшого присвоювання значень по ходу сценарію. Така форма зазвичай використовується для попереднього розміщення масиву, якщо його довжина відома заздалегідь.<br>\r\nЧерез alert можна вивести і масив цілком. При цьому його елементи будуть перераховані через кому:</p>\r\n\r\n<p>let fruits = [\"Яблуко\", \"Апельсин\", \"Груша\"]; <br>\r\nalert(fruits); // Яблуко,Апельсин,Груша</p>\r\n\r\n<p>Навігація по масиву<br>\r\nДоступ до елементів масиву здійснюється за допомогою індексів. Може виконуватися за допомогою циклів for, while, do while. При цьому часто використовується властивість масиву length.</p>\r\n\r\n<p>let week_days = [\"ПН\", \"ВТ\", \"СР\", \"ЧТ\", \"ПТ\"];<br>\r\nfor ( let i = 0; i < week_days.length; i++)<br>\r\ndocument.write(week_days[i] + \"<br>\");</p>\r\n\r\n<p>// можно так: <br>\r\nfor (let key in week_days) <br>\r\ndocument.write(week_days[key] + \"<br>\");</p>\r\n\r\n<p>Властивість length доступна не тільки для читання, але і для запису. Якщо властивості length вказати значення менше поточного, то масив коротшає до нової (заданої) довжини, будь-які елементи, які не потрапляють в новий діапазон індексів, відкидаються і їх значення втрачаються, навіть якщо потім повернути length назад - значення не будуть відновлені.<br>\r\nЦикл for (let i = 0; i <arr.length ...) надійніше і швидше циклу for ... in, тому не рекомендується використовувати for ... in для числових масивів, а тільки для асоціативних.</p>\r\n\r\n<p>let arr1 = [5, 2, 4, 9]; <br>\r\narr1.length = 1; //скорочуємо до 1 елемента - [5]<br>\r\narr1.length = 4; //повернемо попередню кількість елементів <br>\r\ndocument.write(arr1[3]); //попереднього значення немає </p>\r\n\r\n<p>Найпростішим способом очистити масив буде: arr1.length = 0. Якщо властивість length зробити більшим, ніж його поточне значення, в кінець масиву додадуться нові невизначені елементи, збільшуючи масив до зазначеного розміру.<br>\r\nДля роботи з масивами існує велике число корисних методів, частина з них наведена в таблиці:</p>\r\n\r\n<p>Метод<br>\r\nОпис<br>\r\njoin()<br>\r\nВиконує конкатенацію всіх елементів масиву в один рядок.<br>\r\nreverse()<br>\r\nЗмінює порядок елементів масиву на зворотній.<br>\r\nsort()<br>\r\nВиконує сортування елементів масиву.<br>\r\nconcat()<br>\r\nВиконує конкатенацію масиву з іншим масивом.<br>\r\nslice()<br>\r\nВиділяє підмасив масиву.</p>\r\n\r\n<br>\r\n<p>Методи shift () і unshift () працюють значно повільніше, ніж push () і pop ().</p>\r\n\r\n<p>Завдання до лабораторної роботи<br>\r\nСтворити сторінку з блочною структурою. Для кожного завдання виділити окремий блок.</p>\r\n\r\n<p>Завдання 1:</p>\r\n\r\n<p>На сторінці, створеній у лабораторній роботі 12, додати наступні обʼєкти і події:</p>\r\n\r\n<p>Час/дату відповідно до варіанту.<br>\r\nМісце виводу і формат виведення теж визначається відповідно до варіанту.<br>\r\nЗверніть увагу, що ведучі нулі повинні бути присутніми, тобто 1 січня 2021 повинно бути 01.01.21, а не 1.1.21.</p>\r\n\r\n<p>Вар.<br>\r\nФормат дати<br>\r\nФормат часу<br>\r\nРозміщення<br>\r\nОбчислити та вивести на сторінці<br>\r\n1,9,<br>\r\n17, 25<br>\r\nДД-ММ-РРРР, день_тижня<br>\r\nЧЧ-ММ-СС<br>\r\nУ лівому верхньому куті<br>\r\nЧисло секунд, що пройшли з початку семестру<br>\r\n2,10,<br>\r\n18, 26<br>\r\nДД місяць РРРР, день_тижня<br>\r\nЧЧ/ММ/СС<br>\r\nУ блоці hader по центру<br>\r\nЧисло днів, що залишилися до кінця семестру<br>\r\n3,11,<br>\r\n19, 27<br>\r\n РРРР-ДД-ММ, день_тижня<br>\r\nЧЧ/ММ/СС (am/pm)<br>\r\nу блоці footer<br>\r\nЧисло тижнів до нового року<br>\r\n4,12,<br>\r\n20, 28<br>\r\nДД місяць, день_ тижня<br>\r\nЧЧ-ММ-СС (am/pm)<br>\r\nВ правому верхньому куті блоку header<br>\r\nЧисло тижнів, що залишилися до кінця семестру<br>\r\n5,13,<br>\r\n21<br>\r\nдень_недели, ДД/ММ/РРРР<br>\r\nЧЧ:ММ:СС<br>\r\nв блоці з основним контентом<br>\r\nЧисло годин до кінця місяця<br>\r\n6,14<br>\r\n,22<br>\r\nдень_ тижня, ДД місяць РРРР<br>\r\nЧЧ-ММ-СС<br>\r\nв правому вехньому куті блоку footer<br>\r\nЧисло днів до початку літа<br>\r\n7,15,<br>\r\n23<br>\r\nдень_ тижня, РРРР -ДД-ММ<br>\r\nЧЧ/ММ/СС<br>\r\nВнизу по центру основного блоку з контентом<br>\r\nЧисло тижнів до початку осені.<br>\r\n8,16,<br>\r\n24<br>\r\nдень_ тижня, РРРР ДД місяць<br>\r\nЧЧ:ММ:СС<br>\r\nВ центрі сторінки<br>\r\nЧисло хвилин, що минули з початку поточної години.</p>\r\n\r\n<br>\r\n<p>Призначити подію покажчика миші для будь-якого об’єкту на сторінці.</p>\r\n\r\n<p>Завдання 2:<br>\r\nНапишіть код, який:<br>\r\n• Запитує по черзі значення за допомогою prompt і зберігає їх у масиві.<br>\r\n• Закінчує введення, як тільки відвідувач введе порожній рядок, не число або натисне «Скасування». (рекомендація - використовувати метод push ())<br>\r\n• Виводить суму всіх значень масиву<br>\r\nНапишіть код для виведення alert випадкового значення з масиву:</p>\r\n\r\n<p>P.S. Код для генерації випадкового цілого від min to max включно:<br>\r\nlet rand = min+Math.floor(Math.random()*(max+1-min));</p>\r\n\r\n<p>Контрольні питання<br>\r\nЩо таке HTML?<br>\r\nЯк з\'явився динамічний HTML?<br>\r\nМова JavaScript є мовою програмування?<br>\r\nЩо таке «подія»?<br>\r\nДайте визначення поняттю «подія миші»?<br>\r\nДайте визначення поняттю «віртуальне подія»?<br>\r\nЩо означає «onMouseOver»?<br>\r\nЩо означає «onMouseOut»?<br>\r\nУ якому випадку виведення повідомлення відбудеться по клацанню «миші»?<br>\r\nУ якому випадку виведення повідомлення відбудеться при наведенні покажчика «миші» на зображення?<br>\r\n</p>', 3, 1),
(26, 'Лабораторна робота 15', '<p>Лабораторна робота №15</p>\r\n\r\n<p>Тема: Динамічний HTML. Події. Програмування обробки подій<br>\r\nМета: вивчити події JavaScrіpt. Освоїти розробку обробників подій на мові JavaScrіpt і методи організації інтерактивної взаємодії з користувачем. </p>\r\n\r\n<p>Порядок виконання роботи<br>\r\nознайомитися з теоретичним матеріалом лабораторної роботи;<br>\r\nвиконати приклади описані у лабораторній роботі;<br>\r\n*виконати індивідуальне завдання. </p>\r\n\r\n<p>Теоретичні відомості<br>\r\nПодії <br>\r\nДля реакції на дії відвідувача і внутрішньої взаємодії скриптів існують події. Подія - це сигнал від браузера про те, що щось відбулося. <br>\r\nРозрізняють<br>\r\nПодії інтерфейсу користувача (клавіатури, миші);<br>\r\nПодії логіки інтерфейсу користувача.</p>\r\n\r\n<p>Події миші і клавіатури <br>\r\nПодії миші виникають при:<br>\r\n(mousemove) - переміщенні покажчика<br>\r\n(mouseover) - підведенні його до якого-небудь елементу;<br>\r\n(mouseout) - відведенні покажчика від елементу;<br>\r\n(mousewheel) - обертанні коліщатка;<br>\r\n(mousedown) - натисненні кнопки миші;<br>\r\n(mouseup) - звільненні кнопки миші;<br>\r\n(click) – клацанні;<br>\r\n(dblclick) - подвійному клацанні.<br>\r\n(contextmenu) - кліці правою кнопкою миші на елементі.</p>\r\n\r\n<p>Події клавіатури:<br>\r\nПодія<br>\r\nОбробник<br>\r\nОпис<br>\r\nkeydown<br>\r\nonkeydown<br>\r\nВиконує код JavaScript, коли користувач натискає клавішу клавіатури.<br>\r\nkeypress<br>\r\nonkeypress<br>\r\nВиконує код JavaScript, коли користувач натискає клавішу клавіатури і утримує її в натиснутому стані.<br>\r\nkeyup<br>\r\nonkeyup<br>\r\nВиконує код JavaScript, коли користувач відпускає клавішу клавіатури.</p>\r\n\r\n<br>\r\n<p>Як видно з таблиці, обробник називають: on+подія (як для миші, так і для клавіатури), наприклад: onclick.</p>\r\n\r\n<p>Для того, щоб скрипт зреагував на подію, в ньому повинна бути описана спеціальна функція. Функції, які реагують на події, називаються обробниками подій (event handlers). Є декілька способів призначити події обробник. <br>\r\n1) Через атрибут тега<br>\r\nОбробник може бути призначений прямо в розмітці, в атрибуті, який називається on-подія. Наприклад, щоб прикріпити click-подія до input кнопки, можна привласнити обробник onclick таким чином: <br>\r\nПриклад 1:<br>\r\n<input id=\"b1\" value=\"Нажми сюди\" onclick=\"alert(\'Дякую!\')\" type=\"button\"/></p>\r\n\r\n<p>2. Через властивість об\'єкту<br>\r\nДля цього досить отримати елемент в JavaScript, наприклад по id і призначати обробник використовуючи властивість DOM-елемента onподія: <br>\r\nПриклад 2:<br>\r\n<input id=\"b1\" type=\"button\" value=\"Нажми сюди\"/><br>\r\n<script><br>\r\n let elem = document.getElementById(\'b1\');<br>\r\n elem.onclick = function() { alert(\'Дякую\');}</script></p>\r\n\r\n<p>Обробником можна призначити вже існуючу функцію:<br>\r\nПриклад 2.1:<br>\r\nfunction sayThanks() {<br>\r\nalert(\'Спасибі!\');<br>\r\n}<br>\r\n ...<br>\r\n<input id=\"b1\" value=\"Нажми мене\" onclick=sayThanks() type=\"button\"/><br>\r\n//або<br>\r\n<script><br>\r\nb1.onclick = sayThanks;<br>\r\n</script></p>\r\n\r\n<p>Приведені вище три приклади працюють абсолютно однаково. </p>\r\n\r\n<p>Отримання об\'єкту події<br>\r\nОдна дія може викликати декілька подій. <br>\r\nНаприклад, клік викликає спочатку mousedown при натисненні, а потім mouseup і click при відпуску кнопки.<br>\r\nКожна подія обробляється незалежно. Наприклад, при кліці події mouseup+click виникають одночасно, але обробляються послідовно. Спочатку повністю завершується обробка mouseup, потім запускається click.<br>\r\nХарактеристики події браузер записує в «об\'єкт події», до якої може звернутися обробник. Всі сучасні браузери передають об\'єкт події першим аргументом в обробник: </p>\r\n\r\n<p><input type=\"button\" onclick=\"alert(event.type)\" value=\"Тип події\"></p>\r\n\r\n<p>Деякі властивості об\'єкту події для події onclick:<br>\r\nevent.type – тип події, рівний click.<br>\r\nevent.target – елемент, по якому клікнули. У IE<9 замість нього використовується властивість event.srcElement.<br>\r\nevent.clientX / event.clientY – координати курсора в момент кліка, щодо клієнтського вікна.<br>\r\nevent.screenX/event.screenY – координати курсора в момент кліка, щодо екрану.<br>\r\nevent.pageX/event.pageY – координати курсора в момент кліка, щодо веб-сторінки.</p>\r\n\r\n<p>Події клавіатури<br>\r\nЗ подіями клавіатури зовсім все просто. Події keydown/keyup відбуваються при натисненні/відпуску клавіші і дозволяють отримати її код у властивості keyCode.<br>\r\nКод клавіші однаковий в будь-якій розкладці і в будь-якому регістрі. <br>\r\nНаприклад, клавіша W може означати символ \"w\", \"W\" або \"ц\", \"Ц\" в російській(українській) розкладці, але її код буде завжди однаковий: 87.</p>\r\n\r\n<p>Події клавіатури у дії: <br>\r\n<input onkeydown=\"this.nextSibling.innerHTML=event.keyCode\"><b></b></p>\r\n\r\n<br>\r\n<p>Відміна призначеного для користувача введення<br>\r\nПояві символу можна запобігти, якщо відмінити дію браузера на keydown/keypress:</p>\r\n\r\n<p><input onkeydown=\"return false\" type=\"text\" size=\"30\"><br>\r\n<input onkeypress=\"return false\" type=\"text\" size=\"30\"></p>\r\n\r\n<p>Відміняти можна не тільки символ, а майже будь-яку дію клавіш.</p>\r\n\r\n<p>Розглянемо приклади</p>\r\n\r\n<p>Приклад 3<br>\r\nЗміна кольору та вирівнювання тексту після наведення покажчика миші на об’єкт.</p><br>\r\n<br>\r\n<br>\r\n<p><p align=\'right\' id=\'alfa\' onMouseOver= \"M_Over()\" onMouseOut= \"M_Out()\"> Text Text Text </p></p>\r\n\r\n<p>Обробники подій<br>\r\nfunction M_Over()<br>\r\n{<br>\r\n document.all.alfa.align = \'center\';<br>\r\n document.all.alfa.style.color = \"red\";<br>\r\n}<br>\r\nfunction M_Out()<br>\r\n{<br>\r\n document.all.alfa.align = \'left\';<br>\r\n document.all.alfa.style.color = \"green\";<br>\r\n}</p>\r\n\r\n<p>Приклад 4</p>\r\n\r\n<p>Поява та зникнення зображення при натисненні кнопки на веб-сторінці. Для цього використовують властивість display об’єкту style.</p>\r\n\r\n<p>Властивість display<br>\r\nВластивість display задає спосіб відображення елемента на сторінці. Деякі значення:<br>\r\ninline – елемент веде себе як лінійний<br>\r\nblock – елемент веде себе як блочний<br>\r\nnone – \"видаляє\" елемент із сторінки. Елемент невидимий, на сторінці блоки розміщуються так, наче елемента не існує.<br>\r\nHTML<br>\r\n<p id=\"parent\"><br>\r\n <img src=\"1.png\" id=\"st\"> <br/><br>\r\n <input type=\"button\" value=\"Click\" onclick = \"displ();\"><br>\r\n</p><br>\r\nJS<br>\r\nfunction displ()<br>\r\n{<br>\r\n p = document.getElementById(\'st\')<br>\r\n //змінюємо властивість style об\'єкту div<br>\r\n if (p.style.display == \"none\")<br>\r\n {<br>\r\n p.style.display = \"block\"<br>\r\n }<br>\r\n else {<br>\r\n p.style.display = \"none\"<br>\r\n }<br>\r\n}</p><br>\r\n<br>\r\n<p>Індивідуальне завдання </p>\r\n\r\n<p>І. Напишіть обробник подій на JavaScrіpt, який реагує на дії згідно варіанту, використовуючи атрибут. <br>\r\nВаріант<br>\r\nЕлемент, що додається<br>\r\nРеакція.<br>\r\nЗміна об\'єктів<br>\r\n1,14<br>\r\nКлік курсора миші на пункт списку.<br>\r\nЗміна маркера списку<br>\r\n2,15<br>\r\nНаведення покажчика на покликання.<br>\r\nУ кінець тексту покликання дописує значення атрибуту href у круглих дужках.<br>\r\n3,16<br>\r\nВихід курсора за межі об\'єкту H1<br>\r\nЗаголовок зникає, з’являється повідомлення «Об’єкт прихований»<br>\r\n4,17<br>\r\nНаведення курсора на об\'єкт div. <br>\r\nПоява обрамлення червоного кольору.<br>\r\n5,18<br>\r\nКлік в елементі таблиці (5х5) .<br>\r\nУ таблиці поява зображення у відповідній комірці<br>\r\n6,19<br>\r\nПодвійний клік у комірці таблиці (5x3).<br>\r\nЗаписує поточну дату і день тижня<br>\r\n7,20<br>\r\nВихід курсора за межі об\'єкту посилання.<br>\r\nЗміна стильового оформлення: color, font-style, font-size, видалення підкреслення <br>\r\n8,21<br>\r\nКлік в елементі таблиці(4x4).<br>\r\nЗ\'являється вікно prompt. Текст з нього поміщається в комірку<br>\r\n9,22<br>\r\nКлік на об’єкті button.<br>\r\nЗміщення об’єкту на 55px по Х та на 10 px по Y<br>\r\n10,23<br>\r\nКлік правої кнопки на об’єкті зображення.<br>\r\nЗмінює розмір і позицію зображення<br>\r\n11,24<br>\r\nПодвійний клік в елементі таблиці(10х10).<br>\r\nУ осередку відображається випадкове число<br>\r\n12,25<br>\r\nНаведення курсора миші на об\'єкт (зображення). <br>\r\nЗрушення об\'єкту на 50px управо, зміна фону<br>\r\n13,26<br>\r\nВихід курсора за межі об\'єкту div.<br>\r\nЗміна стильового оформлення: border, color, font-style.</p>\r\n\r\n<br>\r\n<p>ІІ. Організувати декілька подій для об’єкту, використовуючи методи addEventListener і removeEventListener</p>\r\n\r\n<p>Варіант<br>\r\nЕлемент, подія<br>\r\n1,14<br>\r\nОб\'єкт квадрат. При на веденні курсора об’єкт змінює розмір і колір, при кліку – виводить повідомлення з поточними значеннями атрибутів height, width<br>\r\n2,15<br>\r\nОбʼєкт прапорець. При кліку виводить інформативне повідомлення для користувача, вихід за межі обʼєкта – зміна форматування тексту.<br>\r\n3,16<br>\r\nОбʼєкт зображення, При наведенні змінюється розмір і обрамлення зображення, при кліку – замінює зображення на поточну дату.<br>\r\n4,17<br>\r\nОбʼєкт комірка таблиці. При кліку правої кнопки комірка змінює колір, при наведенні – зʼявляється зображення у комірці.<br>\r\n5,18<br>\r\nОбʼєкт текстове поле (форма). При кліку поруч з полем зʼявляється текст з поточними координатами поля, при наведенні – вспливаюча підказка.<br>\r\n6,19<br>\r\nОбʼєкт список. При кліку правої кнопки текст замінюється на число, при кліку лівої кнопки – повертає попереднє значення <br>\r\n7,20<br>\r\nОбʼєкт радіо кнопка. При кліку виводить інформативне повідомлення для користувача із значенням активного об’єкту, наведення покажчика – зміна форматування тексту<br>\r\n8,21<br>\r\nОб\'єкт список покликань. При на веденні курсора об’єкт відображає маркер списку, при кліку – виводить підказку з текстом атрибуту href<br>\r\n9,22<br>\r\nОбʼєкт комірка таблиці. При кліку правої кнопки у комірку записує день тижня, при наведенні – змінюється форматування тексту.<br>\r\n10,23<br>\r\nОбʼєкт текстове поле (форма). При кліку поруч з полем зʼявляється символ *, при наведенні – з’являється обрамлення (червоний колір, пунктир).<br>\r\n11,24<br>\r\nРух зображення в межах прямокутної області. Коло переміщується у місце кліку покажчика і виводить повідомлення з поточними координатами.<br>\r\n12,25<br>\r\nОбʼєкт комірка таблиці. При кліку виводоть повідомлення із поточним текстом комірки, при наведенні – змінюється колір і тип розділювальних ліній таблиці.<br>\r\n13,26<br>\r\nОб\'єкт div. При на веденні курсора об’єкт змінює розмір і колір, при кліку – текст і виводить поточну дату.</p>\r\n\r\n<br>\r\n<p>Контрольні запитання<br>\r\nЩо таке подія?<br>\r\nЩо називається об’єктом події?<br>\r\nЯкими способами можна призначити подію для об’єкту?<br>\r\nЩо таке метод?<br>\r\nЯк отримати поточні координати курсора у момент кліку?</p>\r\n\r\n<br>\r\n<p></p>', 3, 1),
(27, 'Лабораторна робота 16', '<p>Лабораторна робота №16<br>\r\nТема: Створення та додавання елементів на веб-сторінку.<br>\r\nМета: навчитися застосовувати на практиці методи створення нових об’єктів, привласнення стилів, виведення на сторінці, а також змінювати їх порядок розташування.<br>\r\nТеоретична частина</p>\r\n\r\n<p>Основним інструментом роботи і динамічних змін на сторінці є DOM (Document Object Model) – об\'єктна модель, використовувана для XML/HTML-документов. <br>\r\nЗгідно DOM-моделі, документ є ієрархією, деревом. Кожен HTML-тег утворює вузол дерева з типом «елемент». Вкладені в нього теги стають дочірніми вузлами. Для представлення тексту створюються вузли з типом «текст».<br>\r\nDOM – це представлення документа у вигляді дерева об\'єктів, доступне для зміни через JavaScript.<br>\r\nDOM дозволяє робити що завгодно з HTML-елементом і його вмістом, але для цього потрібно спочатку потрібний елемент отримати.<br>\r\nДоступ до DOM починається з об\'єкту document. З нього можна дістатися до будь-яких вузлів.<br>\r\nТак виглядають основні посилання, по яких можна переходити між вузлами DOM:</p>\r\n\r\n<br>\r\n<p>Зверху documentElement і body<br>\r\nСамі верхні елементи дерева доступні безпосередньо з document.<br>\r\n<HTML> = document.documentElement</p>\r\n\r\n<p>Перша точка входу – document.documentElement. Ця властивість посилається на DOM-об’єкт для тега <html>.<br>\r\n<BODY> = document.body</p>\r\n\r\n<p>Друга точка входу – document.body, який відповідає тегу <body>.</p>\r\n\r\n<p>Додавання і видалення вузлів<br>\r\nСтворення елементу<br>\r\nДля створення елементів використовуються метод createElement(tag):<br>\r\ndocument.createElement(tag)</p>\r\n\r\n<p>Створює новий елемент з вказаним тегом:<br>\r\nlet div = document.createElement(\'div\');</p>\r\n\r\n<p>Додавання елементу.<br>\r\nЩоб DOM-вузол був показаний на сторінці, його необхідно вставити в document.<br>\r\nМетоди:<br>\r\nnode.append(...nodes or strings) – додає вузли/рядки у кінець node,<br>\r\nnode.prepend(...nodes or strings) – додає вузли/рядки у початок node,<br>\r\nnode.before(...nodes or strings) – додає вузли/рядки до (перед) node,<br>\r\nnode.after(...nodes or strings) – додає вузли/рядки після node,<br>\r\nnode.replaceWith(...nodes or strings) – замінює node заданими вузлами/рядками.</p>\r\n\r\n<p>Видалення вузлів: remove()<br>\r\nДля видалення вузла є два методи:<br>\r\nnode.remove()</p>\r\n\r\n<p>Завдання</p>\r\n\r\n<p>Рисунок 16.1 – Орієнтовна структура веб-сторінки</p>\r\n\r\n<p>Вимоги до виконання завдання:<br>\r\nСтворити сторінку блочної структури (рис. 16.1)<br>\r\nСтворити елементи за варіантом завдання.<br>\r\nУ js-скриптах отримати доступ до обʼєктів сторінки і зберегти у змінних, наприклад<br>\r\nlet obj = document.getElementById(‘id’);<br>\r\nВикористовувати методи створення і додавання обʼєктів, методи перевірки наявності css-класів, методи призначення подій.<br>\r\nВикористовувані зображення розміщувати у окремо виділеному каталозі images. <br>\r\nВиконати графічне оформлення за допомогою стилів (позиціонування блоків, оформлення сторінки кольорами тощо).<br>\r\nОформити звіт.<br>\r\nВиконане завдання надіслати у GoogleClass.<br>\r\nВаріант - № по списку у підгрупі<br>\r\nВаріант*<br>\r\nЗавдання</p>\r\n\r\n<br>\r\n<p>Створити новий блок з таблицею 3*5. Всі непарні рядки таблиці зафарбувати жовтим кольором. При кліку на комірці з’являється повідомлення prompt, значення якого буде записано в дану комірку з відміченим прапорцем. Очистити комірку можна, знявши відмітку прапорця.</p>\r\n\r\n<br>\r\n<p>Створити новий блок з параграфом тексту, кнопкою та прапорцем Для кнопки організувати подію onclick, що додає новий параграф тексту після існуючого. Відмічений прапорець змінює форматування тексту в параграфах: розмір, колір шрифту та інтервал між словами.</p>\r\n\r\n<br>\r\n<p>Написати інтерфейс для створення маркованого списку. Пункти списку – це введені користувачем рядки у повідомленні prompt, значення яких записується у початок списку. При наведенні миші на пункти списку змінюється стиль оформлення.<br>\r\nОрганізувати кнопку для видалення пунктів з кінця списку.</p>\r\n\r\n<br>\r\n<p>Створити блок з формою (текстове поле «Ім’я», радіо перемикачі, кнопка «Повідомлення»). Організувати подію натиснення кнопки, що збирає дані з форми і виводить у новий згенерований блок, оформлений css-стилями. </p>\r\n\r\n<br>\r\n<p>Створити блок і дві кнопки «додати», «видалити». Кнопка «додати» генерує нові дочірні блоки розміром 150*300, розміщуючи поруч по горизонталі. Кнопка «видалити» - видаляє по черзі дочірні блоки.<br>\r\nСтворені блоки заповнити текстом (номер блоку або випадкове число).</p>\r\n\r\n<br>\r\n<p>Створити таблицю 5*5 із заголовком. Організувати подію приховання таблиці при кліку на заголовок. Для комірок організувати подію зміни кольору комірки при наведенні покажчика миші, а при кліку заповнення комірки випадковим числом.</p>\r\n\r\n<br>\r\n<p>Створити новий блок з заголовком. текстом і зображенням. Організувати подію кліку на зображенні для додавання нових параграфів тексту, а також подію клік правою кнопкою для видалення тексту з початку сторінки.</p>\r\n\r\n<br>\r\n<p>Створити два перемикачі і блок для контенту. Для кожного перемикача організувати подію генерації обʼєктів: 1) заголовку з темою лабораторної роботи, 2) параграфом тексту. Згенеровані обʼєкти розміщувати у блоці, замінюючи попередній вміст.</p>\r\n\r\n<br>\r\n<p>Створити новий блок з параграфом тексту та прапорцем. Відмічений прапорець додає новий параграф з текстом. Але із зміненим форматування: розмір, колір шрифту та інтервал між словами</p>\r\n\r\n<br>\r\n<p>Створити блок з формою (текстове поле «Ім’я», пароль, перемикачі, кнопка «ОК»). Організувати подію натиснення кнопки, що зафарбовує кольором заповнені пункти і збирає дані з форми у повідомлення.</p>\r\n\r\n<br>\r\n<p>Написати інтерфейс для створення нумерованого списку. Створити текстове поле і кнопку. Кожний новий пункт генерується при кліку на кнопку із значенням, веденим у input. <br>\r\nОрганізувати подію подвійного кліку на пункті списку для його видалення.</p>\r\n\r\n<br>\r\n<p>Створити новий блок з параграфом тексту, кнопкою та прапорцем Для кнопки організувати подію onclick, що додає новий параграф тексту перед існуючими. Відмічений прапорець змінює форматування параграфів: фоновий колір, обрамлення та вирівнювання тексту.</p>\r\n\r\n<br>\r\n<p>Створити два перемикачі і блок для контенту. Для кожного перемикача організувати подію генерації обʼєктів: 1) поточна дата , 2) зображення. Згенеровані обʼєкти розміщувати у блоці, замінюючи попередній вміст.</p>\r\n\r\n<br>\r\n<p>Створити блок і кнопка «+». Кнопка «+» генерує нові дочірні блоки розміром 150*150, розміщуючи поруч по горизонталі. Створені блоки заповнити зображенням. Організувати подію подвійного кліку для видалення зображення.</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n', 3, 1),
(28, 'Лекція 17', '<p>Лекція<br>\r\nТема: Обробка форм за допомогою JavaScript. Регулярні вирази</p>\r\n\r\n<p>Регулярні вирази- це потужний засіб для обробки вхідних даних. Завдання, що вимагає заміни або пошуку тексту, може бути красиво вирішена за допомогою цього \"мови усередині мови\". І хоча максимальний ефект від регулярних виразів можна домогтися при використання серверних мов, все ж не варто недооцінювати можливості цього додатка і на стороні клієнта.<br>\r\nОсновні поняття<br>\r\nРегулярний вираз (regular expression) - засіб для обробки рядків або послідовність символів, що визначає шаблон тексту. <br>\r\nМодифікатор - призначений для \"інструктування\" регулярного виразу. <br>\r\nМетасимволи - спеціальні символи, які служать командами мови регулярних виразів.</p>\r\n\r\n<br>\r\n<p>Регулярний вираз задається як звичайна змінна, тільки замість лапок використовується слеш, наприклад: <br>\r\nlet reg = / рег_вираз /<br>\r\nПід найпростішими шаблонами будемо розуміти такі шаблони, які не потребують будь-яких спеціальних символах. <br>\r\nПрипустимо, нашим завданням є заміна всіх букв \"р\" (малих і великих) на латинську велику букву \"R\" в словосполученні Регулярні вирази. <br>\r\nСтворюємо шаблон var reg = / р / і воспользуясь методом replace здійснюємо задумане <br>\r\n<Script ><br>\r\n let str = \"Регулярні вирази\"<br>\r\n let reg = /р /<br>\r\n let result = str.replace (reg, \"R\")<br>\r\n document.write (result)<br>\r\n</ Script></p>\r\n\r\n<p>В результаті отримаємо рядок «РегуляRні вирази», заміна відбулася лише на першому входженні букви \"р\" з урахуванням регістру. Але під умови нашого завдання цей результат не підходить ... Тут нам знадобляться модифікатори «g» і «i», які можуть використовуватися як окремо, так і разом. Ці модифікатори ставляться в кінці шаблону регулярного виразу, після слеша, і мають наступні значення: модифікатор «g» - задає пошук в рядку як \"глобальний\", тобто в нашому випадку заміна відбудеться для всіх входжень літери «р». <br>\r\nТепер шаблон виглядає так: <br>\r\nlet reg = / р / g, підставивши його в наш код</p>\r\n\r\n<p><Script ><br>\r\n let str = \"Регулярні вирази\"<br>\r\n let reg = /р / g<br>\r\n let result = str.replace (reg, \"R\")<br>\r\n document.write (result)<br>\r\n</Script><br>\r\nотримаємо рядок \'РегуляRні виRази\'. </p>\r\n\r\n<p>Модифікатор \"i\" - задає пошук в рядку без урахування регістру, додавши цей модифікатор в наш шаблон let reg = /р/gi, після виконання скрипта одержимо шуканий результат нашого завдання - \'RегуляRні виRази\'. </p>\r\n\r\n<p>Символьні класи<br>\r\nСимвольні класи задають тип символів шуканого рядка, спосіб оточення шуканої рядка в тексті, а так само кількість символів окремого типу в тексті, що переглядаємо. Тому спеціальні символи можна розділити на три групи: пошуку збігів, кількісні, позиціонування. <br>\r\nСпеціальні символи пошуку збігів:<br>\r\n\\ b межа слова, задає умову, при якому шаблон повинен виконуватися на початку або кінці слів. <br>\r\n\\ B не кордони слова, задає умову, при якому шаблон не виконується на початку або кінці слова. <br>\r\n\\ d цифра від 0 до 9. <br>\r\n\\ D НЕ цифра. <br>\r\n\\ s одиночний порожній символ, відповідає символу пробілу. <br>\r\n\\ S одиночний непорожній символ, будь-який один символ за винятком пробілу. <br>\r\n\\ w буква, цифра або символ підкреслення. <br>\r\n\\ W не буква, цифра або символ підкреслення. <br>\r\n. будь-який символ, будь-які знаки, букви, цифри і т.д. <br>\r\n[ ] набір символів, задає умову, при якому шаблон повинен виконуватися при будь-якому збігу символів записаних у квадратні дужки. <br>\r\n[^] набір не входять символів, задає умову, при якому шаблон не повинен виконуватися при будь-якому збігу символів записаних у квадратні дужки. <br>\r\nкількісні спеціальні символи<br>\r\n* нуль і більшу кількість разів. <br>\r\n? Нуль або один раз <br>\r\n+ Один і більшу кількість разів. <br>\r\n{N} точно n разів. <br>\r\n{N,} n або більшу кількість разів. <br>\r\n{N, m} n раз, але не більше ніж m разів. <br>\r\nспеціальні символи позиціонування<br>\r\n^ на початку рядка. <br>\r\n$ в кінці рядка.</p>\r\n\r\n<p>Деякі методи для роботи з шаблонами<br>\r\nreplace - даний метод призначений для пошуку зразка і заміни знайденого підрядка на новий підрядок. <br>\r\ntest - даний метод перевіряє, чи є збіги в рядку щодо шаблону і повертає false, якщо зіставлення зі зразком закінчилося невдачею, в іншому випадку true. <br>\r\nприклад:<br>\r\n<Script ><br>\r\n let str = \"JavaScript\";<br>\r\n let reg = /PHP/;<br>\r\n let result = reg.test (str);<br>\r\n document.write (result);<br>\r\n</ Script><br>\r\nвиведе в якості результату false, тому що рядок \"JavaScript\" не дорівнює рядку \"PHP\".</p>\r\n\r\n<p>Також метод test може повертати замість true або false будь-який інший рядок заданий програмістом, наприклад:<br>\r\n<Script language = \"JavaScript\"><br>\r\n let str = \"JavaScript\"<br>\r\n let reg = / PHP /<br>\r\n let result = reg.test (str)? \"Рядок співпав\": \"Рядок не співпав\"<br>\r\n document.write (result)<br>\r\n</ Script></p>\r\n\r\n<p>exec - даний метод виконує зіставлення рядка із зразком, заданим шаблоном. Якщо зіставлення зі зразком закінчилося невдачею, то повертається значення null. В іншому випадку результатом є масив підрядків, відповідних заданому зразку. / * Перший елемент масиву дорівнюватиме вихідному рядку задовольняє заданим шаблоном * / наприклад:</p>\r\n\r\n<p><Script language = \"JavaScript\"><br>\r\n let reg = / (\\ d +). (\\ d +). (\\ d +) /<br>\r\n let arr = reg.exec ( \"Я народився 15.09.1980\")<br>\r\n document.write ( \"Дата народження:\", arr [0], \"<br>\")<br>\r\n document.write ( \"День народження:\", arr [1], \"<br>\")<br>\r\n document.write ( \"Місяць народження:\", arr [2], \"<br>\")<br>\r\n document.write ( \"Рік народження:\", arr [3], \"<br>\")<br>\r\n</ Script></p>\r\n\r\n<p>У лекції відображено далеко не всі можливості регулярних виразів, для більш глибокого вивчення потрібно вивчити об\'єкт RegExp. Також слід зауважити, що синтаксис регулярних виразів не чим не відрізняється як в JavaScript, так і в PHP. Наприклад, для перевірки правильності введення <br>\r\ne-mail, регулярний вираз, що для JavaScript, що для PHP буде виглядати однаково:<br>\r\n/[0-9a-z_]+@[0-9a-z _ ^.]+.[Az]{2,3}/i<br>\r\n</p>', 3, 4);
INSERT INTO `docs` (`id_doc`, `name`, `document`, `id_theam`, `id_cat`) VALUES
(29, 'Лабораторна робота 17', '<p>Лабораторна робота №17<br>\r\nТема: Обробка форм за допомогою регулярних виразів<br>\r\nМета: Освоїти регулярні вирази і роботу з рядками. Навчитися виконувати обробку форм за допомогою регулярних виразів. <br>\r\nТеоретичні відомості<br>\r\nРегулярні вирази<br>\r\nРегулярні вирази (англ. regular expressions, regexp, regex, він же «регулярка» і просто «рег» ) - це формальна мова пошуку і здійснення маніпуляцій з підрядками в тексті, заснований на використанні метасимволів. По суті це рядок-зразок (патерн, шаблон, маска), що складається з символів/метасимволів і задає правило пошуку. <br>\r\nДе вони використовуються?<br>\r\nВ принципі багато де: веб-сервери (Apache), сервери баз даних (Oracle, MySql, MsSql і тому подібне), мови програмування (Perl, Php, Javascipt, C#, Java і тому подібне), текстові редактори (MS Word і тому подібне), пошукові машини (як локальні, так і інтернет-пошукачі) - скрізь, де потрібна швидка обробка тексту.. <br>\r\nНайбільш широке застосування - \"захист від дурня\" <br>\r\n«Захистом від дурня» називається комплекс заходів по припиненню введення неправильної інформації у формі. Наприклад, якщо в полі потрібно вводити тільки букви або тільки цифри, потрібно провести відповідну перевірку при введенні. <br>\r\nЧому відбувається введення неправильної інформації? Це в основному здійснюється по трьом причинам.<br>\r\nКористувач помилився випадково, наприклад, неуважно прочитав, що йому потрібно вказати.<br>\r\nНа веб-сторінці неоднозначно просять ввести дані, тому користувачеві доводиться ворожити і робити припущення, що ж насправді від нього хочуть. При цьому не завжди відбувається збіг думок розробника і користувача.<br>\r\nЄ ряд людей, які сприймають інструкції як виклик і прагнуть поступити навпаки. Такі користувачі міркують приблизно так: «Ага, мене просять ввести число. А що буде, якщо я вкажу букви?». Після чого задають явно неправильну інформацію і дивляться, до чого це приведе.<br>\r\nСлід розуміти, що точні і правильні формулювання хоча і знижують вірогідність виникнення помилок, але ніяк не рятують від них. Тільки технічні засоби на стороні сервера дозволяють отримати необхідний результат і уникнути введення неправильної інформації. Проте, ревізія або, як її ще називають, валідація на стороні клієнта дозволяє швидко перевірити дані, що вводяться користувачем, на коректність, без відправки форми на сервер. Таким чином економиться час користувача і знижується навантаження на сервер. З позиції юзабіліті теж є плюси: користувач відразу отримує повідомлення про те, яку інформацію він вказав невірно і може виправити свою помилку.<br>\r\nОбов\'язкове поле<br>\r\nДеякі поля форми повинні бути обов\'язково заповнені перед їх відправкою на сервер. Це, наприклад, відноситься до форми реєстрації, де потрібно ввести логін і пароль. Для вказівки обов\'язкових полів використовується атрибут required, як показано в прикладі 13.1.<br>\r\n<form><br>\r\n<p>Имя: <input name=\"name\" required></p><br>\r\n<p>Email: <br>\r\n<input type=\"email\" name=\"email\" placeholder=\"@\" required></p><br>\r\n<p>Сайт: &nbsp; &nbsp;&nbsp;<input type=\"url\" name=\"site\" required></p> <br>\r\n<p>Логин: <input name=\"login\" required></p> <br>\r\n<p>Пароль: <input type=\"password\" name=\"pasw\" required></p> <br>\r\n<p><input type=\"submit\" value=\"Вход\"></p> <br>\r\n</form></p><br>\r\n<br>\r\n<p> <br>\r\n <br>\r\n <br>\r\nЯк Ви могли відмітити, деяка примітивна перевірка здійснюється самим браузером (Ця можливість передбачена новим стандартом HTML5):<br>\r\nЩоб обов\'язкові поля не були порожніми. <br>\r\nВеб-сервер-адреса (<input type=\"url\">) повинен містити протокол (http://, https://, ftp://).<br>\r\nАдреса електронної пошти (<input type=\"email\">) повинна містити букви або цифри до символу @, після нього, потім крапку і домен першого рівня.<br>\r\nЯку б WEB-мову ми не використали для перевірки, нам знадобляться регулярні вирази і деякі функції роботи з рядками.<br>\r\nВажливо!<br>\r\nОб\'єкт типу RegExp, або, регулярний вираз, можна створити двома шляхами:<br>\r\n1. /pattern/флаги // робота з об\'єктом \"рядок\" <br>\r\n2. new RegExp(\"pattern\"[, прапори]) // робота з об\'єктом \"RegExp\" <br>\r\npattern - регулярний вираз для пошуку (заміни), а прапори - рядок з будь-якої комбінації символів g(глобальний пошук), i(регістр неважливий) і m(багаторядковий пошук). Перший спосіб використовується часто, другий - іноді. Наприклад, два таких виклику еквівалентні:<br>\r\nlet reg = /abc/i // Шукаємо підрядок abc не залежно від регістра <br>\r\nlet reg = new RegExp(\"abc\", \"i\")<br>\r\nУ наступному варіанті – так як регулярний вираз в лапках, то потрібно дублювати \\. <br>\r\nre = new RegExp(\"\\w+\")<br>\r\nre = /\\w+/<br>\r\nСлеши \'/\' говорять JavaScript про те, що це регулярний вираз. Вони грають ту ж роль, що і лапки для позначення рядків.<br>\r\nДля звичайних символів \\- робить їх спеціальними. Наприклад, вираз /s/ шукає просто символ \'s\'. А якщо поставити \\ перед s, то /\\s/ вже позначає пробільний символ (див. таблицю). <br>\r\nІ навпаки, якщо символ спеціальний, наприклад *, то \\ зробить його просто звичайним символом \"зірочка\". Наприклад, /a*/ шукає 0 або більше підряд символів \'a\', що йдуть. Щоб знайти а із зірочкою \'a*\' - поставимо \\ перед спец. символом: /a\\*/. <br>\r\nТаблиця 1. Додаткові метасимволи<br>\r\nМетасимвол<br>\r\nОпис<br>\r\n\\t<br>\r\nСивол табуляції<br>\r\n\\n<br>\r\nСимвол кінця рядка<br>\r\n\\r<br>\r\nСимвол повернення курсора<br>\r\n\\s<br>\r\nБудь-який пробільний символ (від англійського «space» - «пропуск») <br>\r\n\\S<br>\r\nВсе, окрім \\s<br>\r\n\\w><br>\r\nАлфавітно-цифровий символ, аналог [a-zA-Z0-9_](від англійського «word» — «слово») <br>\r\n\\W<br>\r\nВсе, окрім \\w; аналог [^a-zA-Z0-9_]<br>\r\n\\d<br>\r\nЦифра, аналог [0-9] (від англійського «digit» - «цифра»)<br>\r\n\\D<br>\r\nВсе, окрім \\d; аналог [^0-9]</p>\r\n\r\n<p>Метасимволи початку і кінця рядка <br>\r\nНа мові регулярних виразів початок рядка позначається як «^», а кінець - через «$». Регулярний вираз виду «/^ABC/» слід розуміти як \"Починається з ABC\", а вираз «/ABC$/» - як \"Закінчується на ABC\". <br>\r\nСимвольні класи <br>\r\nСимвольним класом називається сукупність символів, увязнених в квадратні дужки і сприйманих як одне ціле. Символьний клас вигляду «[abc]» означає: \"Або а, або b, або з\", тобто будь-який з перерахованих. Допустимо, Ви хочете перевірити, чи співпадає рядок із словом \'grey\' (сірий) ( у американському пишеться \'gray\' ). В цьому випадку регулярний вираз прийме вид «/^gr[ae]y$/i»<br>\r\nУ символьному класі, можна скористатися метасимволом діапазону «-». C допомогою цього метасимвола клас «[123456789]» можна замінити на «[1-9]». <br>\r\nЯкщо додати в символьний клас першим символом «^», то символьний клас інвертується. В цьому випадку збіг відбувається тільки для символів, що не входять в клас. Наприклад, регулярний вираз «/^A[^BC]/» слід читати так: \"Рядок, що починається з символу A, після якого йде символ, відмінний від В і З\". <br>\r\nДля перевірки збігу з будь-яким символом (окрім кінця рядка) використовуйте метасимвол «.». Перевіримо, ввів користувач хоч би три символи: <br>\r\nlet i; <br>\r\nlet s = prompt(\"Введіть рядок хоча б із 3-х символів\"); <br>\r\n if ((i = s.search(/^.../)) == -1) <br>\r\n{ alert(\"Менше 3-х\"); } <br>\r\n else <br>\r\n{ alert(\"Все гаразд\"); } <br>\r\nКвантифікатори <br>\r\nПід квантифікатором розуміють метасимвол, задаючий допустиму кількість яких-небудь символів в рядку: <br>\r\nТаблиця 2. Квантифікатори<br>\r\nКвантифікатор<br>\r\nОпис<br>\r\n?<br>\r\nДопускає один символ або жодного<br>\r\n+<br>\r\nДопускає один символ і більше<br>\r\n*<br>\r\nДопускає будь-яку кількість символів<br>\r\n{n}<br>\r\nДопускає n символів<br>\r\n{n,m}<br>\r\nДопускає від n до m символів</p>\r\n\r\n<p>Квантіфікатор указується після символу, до якого він відноситься.<br>\r\nСимволи, записані в круглі дужки утворюють групу, і до них можна застосовувати квантифікатори. З таким же успіхом квантифікатори можна застосовувати до символьних класів. <br>\r\nТаблиця 3 Деяких регулярних виразів <br>\r\nШаблон<br>\r\nОпис<br>\r\n^[a-zA-Z]+$<br>\r\nБудь-які латинські букви.<br>\r\n^[ 0-9]+$<br>\r\nБудь-яка кількість цифр.<br>\r\n\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}<br>\r\nIP-адрес.<br>\r\n[0-9]{6}<br>\r\nПоштовий індекс.<br>\r\n\\d+(,\\d{2})?<br>\r\nЦіна у форматі 1,34 (роздільник кома).<br>\r\n\\d+(\\.\\d{2})?<br>\r\nЦіна у форматі 2.10 (роздільник крапка).</p>\r\n\r\n<br>\r\n<p>Використання регулярних виразів в об\'єктах JavaScript <br>\r\nНа початку заняття було сказано, що є два способи роботи з регулярними виразами:<br>\r\nРобота з рядками <br>\r\nДля роботи з регулярними виразами об\'єкт String містить 4 методи:<br>\r\nТаблиця 4 Методів роботи з рядками<br>\r\nМетод<br>\r\nОпис<br>\r\nsearch<br>\r\nМетод шукає в рядку підрядок, співпадаючий з регулярним виразом і повертає її позицію або -1, якщо збіг не був знайдений<br>\r\nmatch<br>\r\nМетод повертає масив підрядків, співпадаючих з регулярним виразом<br>\r\nreplace<br>\r\nМетод замінює всі підрядки, співпадаючі з регулярним виразом<br>\r\nsplit<br>\r\nМетод розбиває рядок на масив підрядків (роздільниками служать збіги з регулярним виразом)</p>\r\n\r\n<p>Якщо потрібно знайти всі збіги, застосовують метод match. Цей метод у поєднанні з модифікатором «/g» (global search) повертає масив підрядків, які співпадають з регулярним виразом. За відсутності модифікатора «/g» метод match працює аналогічно методу search і повертає масив з одного елементу.<br>\r\nДля заміни тексту використовують метод replace. Без модифікатора «/g» він замінює перше входження, з модифікатором - все. При цьому метод replace не міняє початковий рядок, а повертає перетворений рядок як результат. Наступний приклад замінює у введеному рядку всі входження \'big\' на \'small\' без урахування регістра і виводить на екран результат.<br>\r\nlet line; <br>\r\nlet s = prompt(\"Введіть будь-який рядок\"); <br>\r\nline = s.replace(/big/gi, \'small\'); <br>\r\nalert(line); <br>\r\nОстанній метод об\'єкту String - метод split. По суті, він повністю аналогічний методу match, але регулярний вираз задається не для слова, а для роздільника. Метод split повертає масив підрядків. Виділимо з введеного користувачем рядка перше слово: <br>\r\nlet а; <br>\r\nlet s = prompt(\"Введіть будь-який рядок\"); <br>\r\nа = s.split(/\\s/); // Роздільник - будь-який пробільний символ <br>\r\nalert(а[0]); <br>\r\nРобота з об\'єктом RegExp <br>\r\nЯкщо виникає необхідність кілька разів використовувати один і той же регулярний вираз в програмі, має сенс розібратися з об\'єктом RegExp. Його перевага полягає в тому, що регулярний вираз компілюється один раз (на етапі створення), а не кожного разу, як при використанні методів об\'єкту String. Методи об\'єкту RegExp:<br>\r\nМетод<br>\r\nОпис<br>\r\nexec<br>\r\nПовертає масив підрядків-співпадінь<br>\r\ntest<br>\r\nШукає збіг і повертає в залежності від результату true або false</p>\r\n\r\n<p>Як приклад розглянемо програму, яка звіряє початок рядка з \'http://\', з використанням об\'єкту RegExp: <br>\r\nlet i; <br>\r\nlet s = prompt(\"Введіть довільний рядок\");<br>\r\n if (/^http:\\/\\//.test(s)) { // \"На льоту\" створюємо об\'єкт класу RegExp <br>\r\n alert(\"Починається з http://\"); } <br>\r\n else { alert(\"Не починається з http://\"); } <br>\r\n <br>\r\nЗавдання до лабораторної роботи :<br>\r\nДля форми. Виконаної у лабораторній роботі №5, напишіть скрипт-обробник, використовуючи регулярні вирази. Як об\'єкти для аналізу використовувати текстові поля, логін, пароль, e-mail, tel тощо.<br>\r\nУмови: Регулярний вираз для перевірки адреси електронної пошти відповідає наступним умовам: до символу @ не менше 2-х алфавітно-цифрових символів, після нього - алфавітно-цифрові ланцюжки, що чергуються, і крапки. Довжина кожного ланцюжка - не менше 2-х символів, довжина останньою - не більше 4-х. Пароль повинен повторюватися двічі і співпадати.<br>\r\nЯкщо поле введене правильно - ставимо прапорець. <br>\r\nВітається підсвічування полів з помилкою і конкретизація помилки. </p><br>\r\n<br>\r\n', 3, 1),
(30, 'Лабораторна робота 18', '<p>Лабораторна робота № 18<br>\r\n <br>\r\nТема: “Форматування рядків засобами мови JavaScript”.<br>\r\n <br>\r\nТеоретичні відомості<br>\r\n Рядок являє собою набір символів. Для визначення рядків у JavaScript використовуються об’єкти. Працювати з цими об’єктами можна як із звичайними змінними. При присвоюванні звичайній змінній значення рядка ця змінна автоматично перетворюється у об’єкт та наділяється відповідними методами та властивостями. Це неявний засіб створення рядків. <br>\r\nПри явному способі створення рядкового об’єкту має використовуватися оператор New. Рядкові об’єкти створені кожним з цих способів є рівноправними. Для того, щоб надати значення рядковій змінній її треба узяти у подвійні лапки (\"приклад рядка\").<br>\r\nПриклад створення рядків кожним із способів<br>\r\n <br>\r\n<html><br>\r\n<head><br>\r\n<title>Створення рядків</title><br>\r\n</head><br>\r\n<body><br>\r\n<script type=\"text/javascript\"><br>\r\nstr1 = \"Рядок створено як звичайну змінну\";<br>\r\nlet str2 = new String();<br>\r\nstr2 = \"Рядок створено як об’єкт\";<br>\r\n</script><br>\r\n</body><br>\r\n</html><br>\r\n <br>\r\nРозглянемо властивості рядка.<br>\r\nbig() Збільшений шрифт<br>\r\nblink() Жирний шрифт<br>\r\nbold() Жирний шрифт <br>\r\nfixed() Моноширний шрифт <br>\r\nfontcolor() Задається колір шрифту<br>\r\nfontsize() Задається розмір шрифту<br>\r\nitalics() Курсив<br>\r\nsmall Зменшений шрифт <br>\r\nstrike() Закреслений шрифт <br>\r\nsub() Підрядковий<br>\r\nsup() Надрядковий<br>\r\ntoLowerCase() Перетворення у нижній регістр<br>\r\ntoUpperCase() Перетворення у верхній регістр<br>\r\n <br>\r\nПриклад скрипта, який змінює накреслення рядка.<br>\r\n<HTML><br>\r\n<TITLE> Форматування рядка</TITLE><br>\r\n <br>\r\n<SCRIPT LANGUAGE = JavaScript><br>\r\nstr = \"Приклад рядка\";<br>\r\ndocument.write(str.big()+\" BIG<br />\");<br>\r\ndocument.write(str.bold()+\" BOLD<br />\");<br>\r\ndocument.write(str.fixed()+\" FIXED<br />\");<br>\r\ndocument.write(str.fontcolor(\'green\')+\" COLOR GREEN<br />\");<br>\r\ndocument.write(str.fontsize(\'5\')+\" SIZE 5<br />\");<br>\r\ndocument.write(str.italics()+\" ITALICS<br />\");<br>\r\ndocument.write(str.small()+\" SMALL<br />\");<br>\r\ndocument.write(str.strike()+\" STRIKE<br />\");<br>\r\ndocument.write(str.sub()+\" SUB<br />\");<br>\r\ndocument.write(str.sup()+\" SUP<br />\");<br>\r\ndocument.write(str.toLowerCase()+\" TOLOWERCASE<br />\");<br>\r\ndocument.write(str.toUpperCase()+\" TOUPPERCASE<br />\");<br>\r\n</SCRIPT></p>\r\n\r\n<br>\r\n<p></HTML> <br>\r\n <br>\r\n <br>\r\nЗавдання<br>\r\nВводиться сім чисел виділити червоним кольором парні.<br>\r\nВводиться текст. Визначити п’ять різних варіантів форматування за допомогою незалежних кнопок.<br>\r\nЗадані ключові слова як константи, для кожного слова визначено його форматування. Якщо у введеному тексті з’являється таке слово, то воно має бути відформатоване відповідним чином.</p><br>\r\n<br>\r\n', 3, 1),
(31, 'Методичні вказівки до КП', '\r\n<p>Методичні вказівки<br>\r\nдо виконання та оформлення курсової роботи<br>\r\nз дисципліни “Веб-технології та веб-дизайн”<br>\r\nдля студентів спеціальності 122 <br>\r\n«Комп’ютерні науки»</p><br>\r\n\r\n<br>\r\n<p>ЗМІСТ</p>\r\n\r\n<p>1 ТЕМА КУРСОВОЇ РОБОТИ 4<br>\r\n2 ЗАГАЛЬНІ ПОЛОЖЕННЯ 4<br>\r\n2.1 Мета виконання курсової роботи 4<br>\r\n2.2 Місце курсової роботи в навчальному процесі 4<br>\r\n2.3 Знання та вміння, одержані студентом у результаті<br>\r\n виконання курсової роботи 5<br>\r\n3. РЕКОМЕНДОВАНА ЛІТЕРАТУРА 5<br>\r\n4 ВИКОНАННЯ КУРСОВОЇ РОБОТИ 6<br>\r\n4.1 Загальні вказівки 6<br>\r\n4.2 Завдання на курсову роботу 6<br>\r\n4.3 Вимоги до виконання курсової роботи 7<br>\r\n4.4 Структура пояснювальної записки курсової роботи 7<br>\r\n4.5 Зміст розділів пояснювальної записки 8<br>\r\n4.6 Умови захисту. 11<br>\r\n4.8 Графік виконання курсової роботи. 11<br>\r\nСПИСОК ЛІТЕРАТУРИ. 13<br>\r\n1 ТЕМА КУРСОВОЇ РОБОТИ</p>\r\n\r\n<p>Розробка веб-орієнтованої інформаційної системи.<br>\r\nКожному студенту надається індивідуальна тематика інформаційної системи, наведена у додатку 1.</p>\r\n\r\n<p>2 ЗАГАЛЬНІ ПОЛОЖЕННЯ<br>\r\n2.1 Мета виконання курсової роботи<br>\r\nМета виконання курсової роботи – оволодіння студентами сучасною методологією розробки інформаційного та програмного забезпечення інформаційної системи на основі використання веб-технологій, ознайомлення студентів з сучасними технологіями передачі та обробки інформаційних потоків через Інтернет, архітектурою програмних продуктів, новітніми методами розробки динамічних веб-додатків.<br>\r\n2.2 Місце курсової роботи у навчальному процесі<br>\r\nЗабезпечуючими навчальними дисциплінами є «Інформатика», «Алгоритмізація і програмування», «Технологія створення програмних продуктів», «Організація баз даних і знань», «Розробка клієнт-серверних застосувань». Виконання курсової роботи з дисципліни «Веб-технології та веб-дизайн» формує у студентів знання та навички необхідні для виконання дипломної роботи.<br>\r\n2.3 Знання та вміння, набуті студентом у результаті<br>\r\nвиконання курсової роботи<br>\r\nУ результаті виконання курсової роботи студент повинен одержати такі знання:<br>\r\nбазову архітектуру взаємодії сценаріїв на веб-серверах;<br>\r\nоб’єктно-орієнтовані технології розробки прикладних програм для Інтернету;<br>\r\nможливості сучасних систем обробки веб-сценаріїв;<br>\r\nвміння:<br>\r\nоцінювати доцільність та можливості розробки додатків на основі веб-технологій;<br>\r\nсамостійно проектувати архітектуру взаємодії сценаріїв заданого призначення;<br>\r\nстворювати технологічні програмні продукти на основі веб-сценаріїв;<br>\r\nвраховувати вимоги веб-дизайну;<br>\r\nвиконувати трасування помилок у сценаріях;<br>\r\nмінімізувати інформаційні потоки з метою найшвидшої роботи веб-додатків.</p>\r\n\r\n<p>3 РЕКОМЕНДОВАНА ЛІТЕРАТУРА</p>\r\n\r\n<p>Макфарланд Д. Большая книга CSS3 / Д. Макфарланд. – [3-е изд.]. – СПб.: Питер, 2014. – 608 с. <br>\r\nНиксон Р. Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5 / Р. Никсон. – [3-е изд.]. – СПб.: Питер, 2015. – <br>\r\n688 с. <br>\r\nПьюривал С. Основы разработки веб-приложений / С. Пьюривал. – СПб.: Питер, 2015. – 272 с.</p>\r\n\r\n<p>4 ВИКОНАННЯ КУРСОВОЇ РОБОТИ<br>\r\n4.1 Загальні вказівки<br>\r\nКурсова робота на тему: «Розробка веб-орієнтованої інформаційної системи» виконується за матеріалами конспекту лекцій з дисципліни «Веб-технології та веб-дизайн». <br>\r\nНорма часу– 20 год.<br>\r\n4.2 Завдання на курсову роботу<br>\r\nРівень А «задовільно»: розробити веб-сторінки та оформити засобами CSS (інтерактивне меню, блокова верстка, оформлення заголовків і тексту), наповнити сторінки текстовою та графічною інформацією відповідно тематики за варіантом.<br>\r\nРівень Б «добре»: розробити веб-сторінки та оформити засобами CSS (інтерактивне меню, блокова верстка, оформлення заголовків і тексту), наповнити сторінки текстовою та графічною інформацією відповідно тематики за варіантом, додати інтерактивні елементи. Підключити БД. <br>\r\nРівень В «відмінно»: розробити веб-сторінки та оформити засобами CSS (інтерактивне меню, блокова верстка, оформлення заголовків і тексту), наповнити сторінки текстовою та графічною інформацією відповідно тематики за варіантом, додати інтерактивні елементи. Як окремий модуль до сайту розробити адміністративну панель. Підключити БД. <br>\r\n4.3 Вимоги до виконання та оформлення курсової роботи<br>\r\nКурсова робота повинна мати пояснювальну записку (приблизний обсяг 25 сторінок на форматі А4) оформлену відповідно до існуючого стандарту навчального закладу для оформлення курсових і дипломних робіт. <br>\r\n4.4 Структура пояснювальної записки курсової роботи<br>\r\nПояснювальна записка повинна мати таку структуру:<br>\r\nтитульний аркуш;<br>\r\nзміст із зазначенням сторінок;<br>\r\nвступ;<br>\r\nдослідження предметної галузі;<br>\r\nструктура сайту (база даних) та схема навігації;<br>\r\nсценарії та основні модулі:<br>\r\nкод головної сторінки;<br>\r\nкод шаблону;<br>\r\nкод сторінки (форми) з питаннями для самоконтролю; <br>\r\nопис інтерактивних елементів;<br>\r\nвисновок;<br>\r\nдодаток (технічне завдання)<br>\r\nсписок літератури.<br>\r\n4.5 Зміст розділів пояснювальної записки<br>\r\nВступ: в цьому розділі необхідно навести короткі відомості про призначення розроблювальної інформаційної системи, структуру системи взаємодії сценаріїв. <br>\r\n1 Дослідження предметної галузі: у цьому розділі описати різні види шаблонів, їх призначення, переваги та недоліки, методи та засоби розробки тощо; види веб-сайтів, їх складові модулі, методи та етапи розробки тощо.<br>\r\n2 Структура сайту: в цьому розділі необхідно описати складові веб-вузла (html/php сторінки, css/js файли, структура бази даних), ієрархію сторінок та схематично зобразити навігацію.<br>\r\n3 Сценарії та основні модулі інформаційної системи:<br>\r\nкод головної сторінки в цьому розділі приводиться призначення, короткий опис головного сценарія, екранний знімок, що ілюструє роботу модуля і програмний текст;<br>\r\nкод шаблону: в цьому розділі приводиться короткий опис коду шаблона та програмний текст;<br>\r\nкод сторінки адміністративної панелі: аналогічно до попереднього розділу;<br>\r\nопис інтерактивних елементів: в цьому розділі приводиться опис елементів та їх призначення, програмний текст сценаріїв;<br>\r\nвисновок: в цьому розділі необхідно вказати, які результати були отримані в процесі виконання роботи, провести стислий аналіз отриманих даних;<br>\r\nсписок літератури: в цьому розділі необхідно навести список літератури, яку студент використовував при виконанні курсової роботи.<br>\r\n4.6 Умови захисту<br>\r\nПри захисті роботи необхідно мати:<br>\r\nроздруковану пояснювальну записку роботи;<br>\r\nпояснювальну записку оформлену в Word в електронному вигляді;<br>\r\nтексти програми в електронному вигляді;<br>\r\nпрограмний продукт на електронному носії (або розміщений на хостингу).<br>\r\nГрафік виконання курсової роботи<br>\r\nГрафік виконання курсової роботи наведено в табл. 1.</p>\r\n\r\n<p>Таблиця 1– Графік контролю<br>\r\nТермін <br>\r\n(№ тижня)<br>\r\n№ етапу<br>\r\nНазва роботи<br>\r\nУ % від загального<br>\r\n1<br>\r\n1<br>\r\nОтримання індивідуального завдання та розробка ТЗ<br>\r\n5<br>\r\n2<br>\r\n2<br>\r\nАналіз предметної області<br>\r\n10<br>\r\n3<br>\r\n3<br>\r\nОгляд та аналіз спеціальної літератури. <br>\r\nВибір технологій програмування.<br>\r\n5<br>\r\n4<br>\r\n4<br>\r\nФормування структури інформаційної системи. <br>\r\nРозробка сценаріїв. <br>\r\nРозробка дизайну<br>\r\n50<br>\r\n5<br>\r\n6<br>\r\n7<br>\r\n5<br>\r\nРеалізація алгоритму функціонування <br>\r\n20<br>\r\n8<br>\r\n6<br>\r\nОформлення супроводжувальної документації<br>\r\n10<br>\r\n9<br>\r\n7<br>\r\nЗахист роботи</p><br>\r\n<br>\r\n<br>\r\n<p> </p><br>\r\n<br>\r\n', 3, 5),
(32, 'Теми до КП', '<p>Додаток 1<br>\r\nТематика інформаційних систем</p>\r\n\r\n<p>410-і<br>\r\nРозробити та програмно реалізувати<br>\r\nВаріант 1<br>\r\nАлексенко<br>\r\nБлог вчителя інформатики (або блог програміста)<br>\r\nВаріант 2<br>\r\nБаришов<br>\r\nІнтернет-каталог систем безпеки та відеоспостереження<br>\r\nВаріант 3<br>\r\nБойко<br>\r\nІнтернет-каталог чоловічого одягу<br>\r\nВаріант 4<br>\r\nВащенко<br>\r\nІнтернет-каталог промислових товарів<br>\r\nВаріант 5<br>\r\nВініченко<br>\r\nІнтернет-каталог меблів для садових будинків<br>\r\nВаріант 6<br>\r\nГаніченко<br>\r\nІнтернет-каталог спецодягу<br>\r\nВаріант 7<br>\r\nГлуховцов<br>\r\nІнтернет-каталог кабельно-провідникової продукції<br>\r\nВаріант 8<br>\r\nДавиденко<br>\r\nІнтернет-каталог товарів для велоспорту<br>\r\nВаріант 9<br>\r\nКоваленко<br>\r\nІнтернет-каталог цифрової техніки<br>\r\nВаріант 10<br>\r\nКрижанівський<br>\r\nІС реєстрації замовлень для доставки їжі<br>\r\nВаріант 11<br>\r\nЛещенко<br>\r\nВеб-орієнтований додаток для заповнення та друку офіційної документації відповідно до стандарту МОН<br>\r\nВаріант 12<br>\r\nЛіпка<br>\r\nБлог<br>\r\nВаріант 13<br>\r\nМайборода<br>\r\nБлог <br>\r\nВаріант 14<br>\r\nМакущенко<br>\r\nПортфоліо веб-розробника<br>\r\nВаріант 15<br>\r\nПодобрій<br>\r\nІнтернет-каталог керамічної плитки<br>\r\nВаріант 16<br>\r\nРибалка<br>\r\nІнтернет-каталог товарів для дитячої творчості<br>\r\nВаріант 17<br>\r\nСай<br>\r\nІнтернет-каталог оздоблювальних матеріалів<br>\r\nВаріант 18<br>\r\nСидорук<br>\r\nІнтернет-каталог товарів для туризму<br>\r\nВаріант 19<br>\r\nСолоха<br>\r\nІС реєстрації пацієнтів медичного центру<br>\r\nВаріант 20<br>\r\nТесленко<br>\r\nІнтернет-каталог товарів для інтер\'єру<br>\r\nВаріант 21<br>\r\nТитаренко<br>\r\nІнтернет-каталог покриття для підлоги <br>\r\nВаріант 22<br>\r\nФоменко<br>\r\nІнтернет-каталог програмного забезпечення<br>\r\nВаріант 23<br>\r\nХарченко<br>\r\nІнтернет-каталог іграшок<br>\r\nВаріант 24<br>\r\nХвостов<br>\r\nІнтернет-каталог камінів та обігрівачів<br>\r\nВаріант 25<br>\r\nШкарупа<br>\r\nІС агенції з нерухомості<br>\r\nВаріант 26<br>\r\nКовальов<br>\r\nІнтернет-каталог автотоварів</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n', 5, 5),
(33, 'Приклад створення БД', '<p>Приклад створення БД, виведення даних <br>\r\nна сторінку та створення адмін-панелі.<br>\r\n <br>\r\nСтворити БД, таблицю \"Products\" з полями \"ID\", \"Name\", \"Price\";</p>\r\n\r\n<p> <br>\r\nВстановлити з\'єднання з БД MySql.<br>\r\nОсновні функції php для роботи з БД MySql.<br>\r\nmysqli_connect<br>\r\nmysqli_connect (<хост>, <користувач БД »,« пароль »,« база даних») - встановлює з\'єднання з базою даних.<br>\r\nmysqli_query<br>\r\nmysqli_query (<встановлене з\'єднання \",\" запит SQL>) - виконує запит до БД, написаний на мові SQL.<br>\r\nmysqli_fetch_array<br>\r\nmysqli_fetch_array (<виконаний запит SQL>) - по черзі повертає по одному рядку з результату запиту.<br>\r\nВиведення змінної всередині рядка<br>\r\nЗауважте, що якщо ви виводите рядок оператором echo і рядок укладена в подвійні лапки (саме подвійні), то всередину рядка можна вставляти змінні в фігурних дужках і вони будуть підставлені в цей шаблон.<br>\r\n <br>\r\nСтворити з\'єднання (connect) з базою даних MySql<br>\r\nПерше, що слід зробити для того, щоб отримати дані з таблиці бази даних, - встановити з\'єднання з БД.<br>\r\n <br>\r\n<?php<br>\r\n$Host = \'localhost\'; // Хост<br>\r\n$User = \'root\'; // Ім\'я користувача<br>\r\n$Pass = \'\'; // Пароль користувача<br>\r\n$Db_name = \'my_bd\'; // Ім\'я БД<br>\r\n$Link = mysqli_connect ($host, $user, $pass, $db_name); // Підключення до БД<br>\r\n <br>\r\n // Помилка, Якщо не удалось підключітіся до БД<br>\r\n if (! $ link) {<br>\r\necho \'Чи не можу підключітіся до БД. Код помилки: \'. mysqli_connect_errno (). \', Помилка:\'. mysqli_connect_error ();<br>\r\n exit;<br>\r\n }<br>\r\n?><br>\r\n <br>\r\n <br>\r\nВивести дані з таблиці MySql<br>\r\nПісля того, як встановили з\'єднання з БД, c допомогою запиту можна отримати дані з будь-якої таблиці. А за допомогою циклу whileїх вивести.<br>\r\n <br>\r\n$Sql = mysqli_query ($ link, \'SELECT `ID`,` Name`, `Price` FROM` products`\');<br>\r\n while ($ result = mysqli_fetch_array ($ sql)) {<br>\r\n echo \"<div class = \'title\'> {$ result [ \'Name\']} </ div> <div class = \'price\'> {$ result [ \'Price\']} грн <br> </ div>\";<br>\r\n }</p><br>\r\n<br>\r\n<br>\r\n<p>Створення форми для додавання записів<br>\r\nДля початку необхідно створити звичайну форму, в яку будемо записувати дані, і після відправки форми, вони будуть записуватися в таблицю MySql.<br>\r\nСтворимо нову сторінку, Наприклад \"product_admin.php\" з встановленим з\'єднанням з БД:</p>\r\n\r\n<p><! Doctype html><br>\r\n<Html lang =\"Ru\"><br>\r\n<Head><br>\r\n <Title> Адмін </ title><br>\r\n</ Head><br>\r\n<Body><br>\r\n <? Php<br>\r\n $Host = \'Localhost\'; // Хост<br>\r\n $User = \'User_bd\'; // Ім\'я користувача<br>\r\n $Pass = \'1q2w3e4r5t\'; // пароль користувача<br>\r\n $Db_name = \'My_bd\'; // Ім\'я бази даних<br>\r\n $Link = mysqli_connect ($host, $user, $pass, $db_name); // Зʼєднання з базою</p>\r\n\r\n<p> // Помилка, якщо з\'єднання встановити не вдалося<br>\r\n if (!$link) {<br>\r\n echo “Не можу з\'єднатися з БД. Код помилки: “.mysqli_connect_errno (). “, Помилка:”. mysqli_connect_error ();<br>\r\n exit;<br>\r\n }<br>\r\n ?><br>\r\n</Body><br>\r\n</Html><br>\r\n <br>\r\nТепер в блок <body> </body> після підключення до БД додамо HTML форму:<br>\r\n <br>\r\n<Form action =\"\" method =\"Post\"><br>\r\n <Table><br>\r\n <Tr><br>\r\n <Td> Назва: </td><br>\r\n <Td> <input type =\"Text\" name =\"Name\"> </Td><br>\r\n </Tr><br>\r\n <Tr><br>\r\n <Td> Ціна: </td><br>\r\n <Td> <input type =\"Text\" name =\"Price\" size =\"3\"> грн. </Td><br>\r\n </Tr><br>\r\n <Tr><br>\r\n <Td colspan =\"2\"> <Input type =\"Submit\" value =\"OK\"> </Td><br>\r\n </Tr><br>\r\n </Table><br>\r\n</Form></p>\r\n\r\n<p>Обробка (вставка) отриманих з форми даних<br>\r\nПісля того, як дані з форми будуть відправлені, їх треба прийняти і записати в таблицю БД.<br>\r\nДавайте перевіримо, передані дані і, якщо передані, то збережемо їх. Цей код краще вставити перед формою, але після підключення до БД:<br>\r\n<? Php<br>\r\n // Якщо змінна Name передана<br>\r\n if (isset ($ _ POST [\"Name\"])) {<br>\r\n // Вставляємо дані, підставляючи їх в запит<br>\r\n $ Sql = mysqli_query ($ link, \"INSERT INTO` products` ( `Name`,` Price`) VALUES ( \'{$ _POST [\' Name \']}\', \'{$ _POST [\' Price \']}\') \");<br>\r\n // Якщо вставка пройшла успішно<br>\r\n if ($ sql) {<br>\r\n echo \'<P> Дані успішно додані в таблицю. </ P>\';<br>\r\n } Else {<br>\r\n echo \'<P> Помилка:\'. mysqli_error ($ link).\'</ P>\';<br>\r\n }<br>\r\n }<br>\r\n?><br>\r\nТепер після відправки форми в таблиці у вас повинна з\'явитися нова терміну - новий товар.<br>\r\nНіколи без перевірок прийнятих змінних не вставляйте дані безпосередньо в базу даних. У цьому випадку вас буде дуже легко зламати. Детальніше про це в google:про sql ін\'єкціях. Але оскільки ми тільки вчимося, і ускладнювати все нема чого, то ми будемо робити так :)<br>\r\nВидалення рядків з Mysql<br>\r\nДавайте спробуємовивести всі товари, А поруч з кожним товаром кнопку видалити (код вставляємо в самий низ сторінки перед тегом</ Body>):<br>\r\n <br>\r\n<?Php<br>\r\n // Отримуємо дані<br>\r\n $Sql = mysqli_query ($ link, \'SELECT `ID`,` Name` FROM `products`\');<br>\r\n while ($result = mysqli_fetch_array ($sql)) {<br>\r\n echo \"{$result[\'ID\']}) {$result[\'Name\']} - <br>\r\n<a href=\'?del={$result[\'ID\']}\'> Видалити </a> <br>\";<br>\r\n }<br>\r\n?><br>\r\n <br>\r\nТепер перед виведенням товарів потрібно перевірити, чи не була передана змінна на їх видалення, і якщо була, то видалити товар:<br>\r\n <br>\r\n<?Php<br>\r\n // Видаляємо, якщо що<br>\r\n if (isset ($ _ GET [\'Del\'])) {<br>\r\n $Sql = mysqli_query ($ link, \"DELETE FROM` products` WHERE `ID` = {$ _GET [ \'del\']}\");<br>\r\n if ($ sql) {<br>\r\n echo \"<P> Товар вилучено. </ P>\";<br>\r\n } Else {<br>\r\n echo \'<P> Помилка:\'. mysqli_error ($ link).\'</ P>\';<br>\r\n }<br>\r\n }<br>\r\n?><br>\r\n <br>\r\nСпробуйте доопрацювати даний приклад і зробити самостійно редагування даних про товар. Шляхів вирішення багато. Один з них: поруч з посиланням \"Видалити\" додаємо \"Редагувати\", при кліці по якому передаємо змінну \"red\". Перед формуванням форми перевіряємо, А чи немає цієї змінної, і якщо є, то витягуємо і підставляємо дані в форму. Перед новою вставкою, якщо все ще є \"red\", то робимо UPDATE, а не INSERT. </p>\r\n\r\n<p>Повний лістинг адміністративної панелі (Додавання-Редагування-Видалення товару)<br>\r\n<!doctype html><br>\r\n<html lang=\"ru\"><br>\r\n<head><br>\r\n <title>Адмін-панель</title><br>\r\n</head><br>\r\n<body><br>\r\n <?php<br>\r\n $host = \'localhost\'; <br>\r\n $user = \'root\'; <br>\r\n $pass = \'\'; <br>\r\n $db_name = \'my_bd\'; <br>\r\n $link = mysqli_connect($host, $user, $pass, $db_name); <br>\r\n <br>\r\n if (!$link) {<br>\r\n echo \'Не можу підключилися до БД. Код помилки: \' . mysqli_connect_errno() . \', помилка: \' . mysqli_connect_error();<br>\r\n exit;<br>\r\n }<br>\r\n //Якщо змінну Name передано<br>\r\n if (isset($_POST[\"Name\"])) {<br>\r\n //оновлюємо, якщо це запит на оновлення<br>\r\n if (isset($_GET[\'red\'])) {<br>\r\n $sql = mysqli_query($link, \"UPDATE `products` SET `Name` = \'{$_POST[\'Name\']}\',`Price` = \'{$_POST[\'Price\']}\' WHERE `ID`={$_GET[\'red\']}\");<br>\r\n } else {<br>\r\n <br>\r\n//Інакше додаємо дані, підставляючи їх у запит<br>\r\n $sql = mysqli_query($link, \"INSERT INTO `products` (`Name`, `Price`) VALUES (\'{$_POST[\'Name\']}\', \'{$_POST[\'Price\']}\')\");<br>\r\n }</p>\r\n\r\n<p> //Якщо вставка виконана успішно<br>\r\n if ($sql) {<br>\r\n echo \'<p>Товар додано!</p>\';<br>\r\n } else {<br>\r\n echo \'<p>Виникла помилка: \' . mysqli_error($link) . \'</p>\';<br>\r\n }<br>\r\n }</p>\r\n\r\n<p> //Видаляємо<br>\r\n if (isset($_GET[\'del\'])) {<br>\r\n $sql = mysqli_query($link, \"DELETE FROM `products` WHERE `ID` = {$_GET[\'del\']}\");<br>\r\n if ($sql) {<br>\r\n echo \"<p>Товар видалено.</p>\";<br>\r\n } else {<br>\r\n echo \'<p>Виникла помилка: \' . mysqli_error($link) . \'</p>\';<br>\r\n }<br>\r\n }</p>\r\n\r\n<p> //Якщо передано змінну red, то потрібно оновити дані. Спочатку потрібно їх вивести з БД<br>\r\n if (isset($_GET[\'red\'])) {<br>\r\n $sql = mysqli_query($link, \"SELECT `ID`, `Name`, `Price` FROM `products` WHERE `ID`={$_GET[\'red\']}\");<br>\r\n $product = mysqli_fetch_array($sql);<br>\r\n }<br>\r\n ?></p>\r\n\r\n<p> <form action=\"\" method=\"post\"><br>\r\n <table><br>\r\n <tr><br>\r\n <td>Назва:</td><br>\r\n <td><input type=\"text\" name=\"Name\" value=\"<?= isset($_GET[\'red\']) ? $product[\'Name\'] : \'\'; ?>\"></td><br>\r\n </tr><br>\r\n <tr><br>\r\n <td>Ціна:</td><br>\r\n <td><input type=\"text\" name=\"Price\" size=\"3\" value=\"<?= isset($_GET[\'red\']) ? $product[\'Price\'] : \'\'; ?>\"> грн</td><br>\r\n </tr><br>\r\n <tr><br>\r\n <td colspan=\"2\"><input type=\"submit\" value=\"OK\"></td><br>\r\n </tr><br>\r\n </table><br>\r\n </form><br>\r\n <br>\r\n <?php<br>\r\n //отримуємо дані<br>\r\n $sql = mysqli_query($link, \'SELECT `ID`, `Name`, `Price` FROM `products`\');<br>\r\n while ($result = mysqli_fetch_array($sql)) {<br>\r\n echo \"<p>{$result[\'ID\']}) {$result[\'Name\']} - {$result[\'Price\']} грн - <a href=\'?del={$result[\'ID\']}\'>Видалити</a> - <a href=\'?red={$result[\'ID\']}\'>Редагувати</a></p>\";<br>\r\n }<br>\r\n ?><br>\r\n <p><a href=\"?add=new\">Додати новий товар</a></p></p>\r\n\r\n<p></body><br>\r\n</html><br>\r\n</p>', 5, 5),
(34, 'Практична СР CSS', '<p>Практична самостійна робота<br>\r\n«Каскадні таблиці стилів»<br>\r\n2 варіант<br>\r\nСтворити веб-сторінку з блочною структурою, на якій розмістити: <br>\r\nЗаголовок «Самостійна робота з теми «CSS» студента 41_ групи Прізвище Ім’я Варіант___»,<br>\r\nтри зображення + фонове зображення, <br>\r\nнумерований список (не менше 3 пунктів). </p>\r\n\r\n<p>Підключити внутрішню таблицю стилів, де описані властивості з коментарями:<br>\r\nЗаголовок – тип шрифту arial, розмір - 22px, накреслення – напівжирний курсив, додати ефект затінювання.<br>\r\n1 зображення – фонове та закріплене, інші 3 зображення розташувати каскадом (див.схему) та призначити закруглення кутів.<br>\r\nсписок - у окремому блоці, текст пунктів перевести у верхній регістр, вирівнювання по центру, призначити обрамлення для кожного пункту при наведенні курсора.<br>\r\nВсі властивості, вказані у завданні, реалізовуються ТІЛЬКИ у таблиці стилів!!!</p>\r\n\r\n<br>\r\n<p>Схема блокової структури сторінки</p>\r\n\r\n<br>\r\n<p></p>', 2, 2),
(35, 'Практична СР JS', '<p>Створити веб-сторінку з формою реєстрації:<br>\r\n- Ім’я<br>\r\n- Рік народження<br>\r\n- Стать: жіноча, чоловіча<br>\r\n- Країна<br>\r\n- Логін<br>\r\n- Пароль</p>\r\n\r\n<p>Перевірити правильність та кількість заповнених полів. Заповнені дані зібрати у повідомлення та вивести у новому блоці на поточній сторінці. Призначити для всіх полів форми обрамлення зеленого кольору при наведенні покажчика миші.<br>\r\nДодати на сторінку зображення. Організувати подію появи інформаційного повідомлення з поточною датою та виділення зображення з червоним обрамленням при кліку миші.</p>', 3, 2),
(36, 'Практична СР HTML', '<p>Практична самостійна робота</p>\r\n\r\n<p>Створіть HTML-код веб-сторінок: <br>\r\n1.html - таблиця, комірки з даними оформити різними кольорами.</p>\r\n\r\n<br>\r\n<p>Заголовок 1<br>\r\nЗаголовок 2<br>\r\nПункт 1<br>\r\n1<br>\r\n3<br>\r\n4<br>\r\n6<br>\r\nПункт 2<br>\r\n2<br>\r\n5</p>\r\n\r\n<p> <br>\r\n2.html - з текстом (1 абзац, використання різного накреслення, типу та кольору шрифтів, відформатувати тегами логічного та фізичного форматування); <br>\r\n3.html – сторінка із списком гіперпосилань на створені веб-сторінки, що виконує роль навігаційної панелі:<br>\r\nТаблиця<br>\r\nТекст<br>\r\nЗображення; <br>\r\nindex.html - головної сторінки сайту з фреймовою структурою згідно варіанту.</p>\r\n\r\n<p>Тема: «Самостійна робота студента __П.І.__ група____»<br>\r\nУ фреймі «Навігаційна панель» завантажити веб-сторінку 3.html.<br>\r\nУ фреймі «Основна інформація» - завантажуються веб-сторінки при переході по гіперпосиланням навігаційної панелі.<br>\r\nУ фреймі «Зображення» - завантажити будь-який графічний файл.</p><br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<p>Варіанти схеми поділу сторінки на фрейми<br>\r\nВаріант 1</p>\r\n\r\n<p>Основна інформація <br>\r\nТема <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nЗображення</p><br>\r\n<br>\r\n<p>Культура Київської Русі – яскраве явище європейської середньовічної культури. Київська Русь залишила помітний слід у світовій історії. Вона проіснувала з IX до середини XIIІ ст. То була одна з найбільших монархій раннього Середньовіччя, яку можна порівняти хіба що з імперією Карла Великого. В часи свого найвищого розквіту вона простягалася від Чорного до Балтійського моря і Льодовитого океану, від Закарпаття до Північного Передуралля та Волго-Окського межиріччя.</p>\r\n\r\n<p>Варіант 2</p>\r\n\r\n<p>Зображення<br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nТема<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Київська Русь підтримувала політичні, економічні й культурні відносини з ближніми і далекими сусідами - з Великим Степом і Візантійською імперією, з Болгарським царством, Польським, Чеським і Угорським королівствами, з італійськими і німецькими містами, з Данією, Швецією і Норвегією, з Францією та Англією. Династичні зв\'язки київських монархів, особливо Ярослава Мудрого і Володимира Мономаха, стали хрестоматійними. Давньоруські купецькі човни і каравани проклали шлях “з варяг у греки”, чималою мірою вплинула на культуру і мистецтво сусідів.</p>\r\n\r\n<br>\r\n<p>Варіант 3</p>\r\n\r\n<p>Навігаційна панель – список текстових гіперпосилань<br>\r\nТема<br>\r\nЗображення <br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>У Х ст. християнство стало панівною релігією в Європі. На Русі про християнство також було відомо задовго до релігійних реформ Володимира Великого: християнами були Аскольд і Дір. Достовірним є факт хрещення княгині Ольги у 958 р. Але вирішальним для процесу християнізації нашої країни було введення цієї релігії як державної в 988-990 рр/ Спочатку князь Володимир зробив спробу модернізації язичництва, спробу пристосувати його до потреб централізованої держави.</p>\r\n\r\n<p>Варіант 4</p>\r\n\r\n<p>Навігаційна панель – список текстових гіперпосилань</p>\r\n\r\n<p>Основна інформація<br>\r\nЗображення <br>\r\nТема</p>\r\n\r\n<br>\r\n<p>На початку X ст. Русь була вже добре відома візантійцям. Визначний історик того часу, шанувальник наук і літератури імператор Константин VII Багрянородний (Порфірородний) у своїй книзі “Про управління державою” розказав про сусідні з Візантією народи, у тому числі і про русів. В цій книзі він, зокрема, зазначає: “Цей народ ми називаємо скіфами або гунами. Щоправда, самі себе вони звуть русами”. Йому належить перший опис полюддя - збору данини київськими правителями з підвладних їм земель і племен.</p>\r\n\r\n<p>Варіант 5</p>\r\n\r\n<p>Тема<br>\r\nЗображення <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nОсновна інформація </p>\r\n\r\n<br>\r\n<p>Вивчення культури Київської Русі у всьому її багатстві і різноманітті можливе тільки на основі комплексного використання всіх існуючих історичних джерел. До цих джерел, крім уже названих, безперечно належать фундаментальні праці видатного українського вченого М.Грушевського “Історія України-Руси”, північнонімецького хроніста другої половини ХІ ст. Адама Бременського (Гельмольда) “Хроніка слов\'ян”, відомі “Ізборники Святослава” та ін.</p>\r\n\r\n<br>\r\n<p>Варіант 6</p>\r\n\r\n<p>Тема<br>\r\nЗображення <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Мережні адаптери (вони ж контролери, карти, плати, інтерфейси, NIC – Network Interface Card) – це основна частина апаратури локальної мережі. Призначення мережного адаптера – сполучення комп\'ютера (або іншого абонента) з мережею, тобто забезпечення обміну інформацією між комп\'ютером і каналом зв\'язку відповідно до прийнятих правил обміну. Саме вони реалізують функції двох нижніх рівнів моделі OSI. Як правило, мережні адаптери виконуються у вигляді плати ( рис. 5.5), вставляються в слоти розширення системної магістралі (шини) комп\'ютера (найчастіше PCI, ISA або PC-Card). Плата мережного адаптера звичайно має також один або кілька зовнішніх роз’ємів для підключення до неї кабелю мережі.<br>\r\nВаріант 7</p>\r\n\r\n<p>Зображення <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nТема<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Досить високого рівня досягло до Х віку і ремесло. Виготовленням виробів із заліза і кольорових металів займалися переважно майстри-професіонали. Ковальська справа вважалася заняттям почесним і навіть чаклунським. У Київській Русі склався переказ про братів-ковалів, які перемогли в битві жахливого дракона. Вони запрягли чудовисько у величезний плуг і проорали ним борозну “змійових валів” - оборонних споруд навколо Києва (довжина їх в Україні – понад 2000 км, датуються І тисячоліттям до н.е. – І тисячоліттям н.е.). </p>\r\n\r\n<p>Варіант 8</p>\r\n\r\n<p>Тема<br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nОсновна інформація<br>\r\nзображення</p><br>\r\n<br>\r\n<p>Розвивалися гончарна справа, ткацтво, вичинка й обробка шкіри, різьблення по каменю і дереву. З льону, конопель і вовни слов\'янки ткали чудові сукна і полотна, їм було знайоме складне малюнкове ткання і вишивка. Високим умінням відрізнялися майстри обробки шкір. Недаремно в усній народній творчості склалися оповіді про кожем\'як - людей умілих, сильних і відважних. Усього ж дослідники нараховують у названий час в давньоруських містах від шістдесяти до ста різних ремісничих спеціальностей.</p>\r\n\r\n<br>\r\n<p>Варіант 9</p>\r\n\r\n<p>Тема<br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nЗображення <br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Торгівля продуктами сільського господарства і ремесла, що зароджувалася, спочатку мала характер обміну як всередині общини, так і між племенами та землями. Згодом зародилися товарно-грошові відносини. Про це свідчать скарби срібних римських, візантійських і арабських монет. До речі монети візантійських імператорів Анастасія I (491-518 рр.) і Юстиніана I (527-565 рр.), знайдені археологами на Замковій горі, послужили одним з доказів дати виникнення Києва принаймні в кінці V ст.н.е. </p>\r\n\r\n<br>\r\n<p>Варіант 10</p>\r\n\r\n<p>Навігаційна панель – список текстових гіперпосилань<br>\r\nЗображення <br>\r\nТема<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Родова община називалася \"мир\" або \"вервь\" (вірьовкою відмірювали наділи землі общинникам). За спостереженнями середньовічних західних письменників, крадіжка і обман у слов\'ян зустрічалися настільки рідко, що вони не замикали своїх скринь з добром. Члени общини були пов\'язані круговою порукою, діяв закон кровної помсти. Пізніше традиційне (звичаєве) право було нелегко замінити державним. Процес впровадження першого писаного закону “Руської правди” (ХІ-ХІІ ст.) супроводився численними конфліктами, описаними літописом.</p>\r\n\r\n<p>Варіант 11</p>\r\n\r\n<p>Навігаційна панель – список текстових гіперпосилань<br>\r\nзображення<br>\r\nТема<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Найбільше вражали слов\'ян явища природи, пов\'язані з виявом сили та міці: блискавка, грім, сильний вітер, палахкотіння вогню. Не випадково верховним божеством був Перун - бог блискавки і грому, який, як і всі інші боги, втілював у собі добрий і злий початок: він міг уразити людину, її житло блискавкою, але водночас він, згідно з міфом, переслідує Змія, який переховується в будь-якому предметі, наздоганяє і вбиває його. Після перемоги над Змієм іде дощ і очищає землю від нечистої сили.</p>\r\n\r\n<br>\r\n<p>Варіант 12</p>\r\n\r\n<p>Зображення <br>\r\nОсновна інформація <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nТема</p>\r\n\r\n<br>\r\n<p>У пантеоні східнослов\'янських божеств, на відміну від давньогрецького та давньоримського, було порівняно мало богів, які безпосередньо втілюють інтереси і заняття людини. Можна назвати тільки Велеса (Волоса) - бога багатства, худоби і торгівлі, Мокош (Мокошу) - богиню дощу і води, яка в той же час протегувала ткацтву. а також Дану – богиню річок (згадка про неї є у багатьох піснях) та різні берегині.</p>\r\n\r\n<p>Варіант 13</p>\r\n\r\n<p>Навігаційна панель – список текстових гіперпосилань + зображення<br>\r\nТема<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>4 Статичні змінні<br>\r\nЩоб використати змінні тільки усередині функції, при цьому зберігаючи їхнє значення й після виходу з функції, потрібно оголосити ці змінні як статичні. Статичні змінні видні тільки усередині функції й не гублять свого значення, якщо виконання програми виходить за межі функції. Оголошення таких змінних здійснюється за допомогою ключового слова static:<br>\r\nstatic $var1, $var2;<br>\r\nСтатичній змінній може бути привласнене будь-яке значення, але не посилання.<br>\r\n <br>\r\nВаріант 14</p>\r\n\r\n<p>Тема<br>\r\nОсновна інформація<br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nЗображення</p>\r\n\r\n<br>\r\n<p>1 Еталонна модель OSI<br>\r\nМодель OSI була запропонована Міжнародною організацією стандартів ISO (International Standards Organization) в 1984 році. З тих пір її використають (більш-менш строго) всі виробники мережних продуктів. Як і будь-яка універсальна модель, OSI досить громіздка, надлишкова, і не занадто гнучка. Тому реальні мережні засоби, пропоновані різними фірмами, не обов\'язково дотримуються прийнятого поділу функцій. Однак знайомство з моделлю OSI дозволяє краще зрозуміти, що ж відбувається в мережі.<br>\r\n </p>\r\n\r\n<br>\r\n<p>Варіант 15</p>\r\n\r\n<p>Тема<br>\r\nЗображення <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>Культи божеств – прийняті ритуали жертвоприношень і звертань, священні атрибути, слова молитов - відомі дуже мало. Шкоду, марноту, негативні властивості втілювали в дохристиянських народних віруваннях злі духи: лісовик, біс, водяний, русалки, полуденниця - дух літньої полуденної спеки, крикси - духи крику і плачу тощо. Злі духи вважалися безпечними для тих, хто дотримувався всіх обрядів і заборон.</p>\r\n\r\n<p>Варіант 16</p>\r\n\r\n<p>Тема<br>\r\nЗображення <br>\r\nНавігаційна панель – список текстових гіперпосилань<br>\r\nОсновна інформація</p>\r\n\r\n<br>\r\n<p>1 Класи та об’єкти<br>\r\nПочнемо з основних понять об’єктно-орієнтованого програмування - класу й об’єкта. Існує безліч визначень цих понять. Ми дамо наступне: об’єкт - це структурована змінна, утримуюча всю інформацію про деякий фізичний предмет або реалізоване в програмі понятті, клас - це опис таких об’єктів і дій, які можна з ними виконувати.<br>\r\nВ PHP клас визначається за допомогою наступного синтаксису:<br>\r\nclass Ім’я_класу{<br>\r\nvar $ім’я_властивості; /*список властивостей*/<br>\r\nfunction ім’я_методу( ){ /* визначення методу */ }<br>\r\n/*список методів*/}<br>\r\n <br>\r\n</p>', 1, 2);

-- --------------------------------------------------------

--
-- Структура таблицы `theams`
--

CREATE TABLE `theams` (
  `id_theam` int(11) NOT NULL,
  `name` text COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `theams`
--

INSERT INTO `theams` (`id_theam`, `name`) VALUES
(1, 'html'),
(2, 'css'),
(3, 'js'),
(4, 'sr'),
(5, 'kp');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id_cat`);

--
-- Индексы таблицы `docs`
--
ALTER TABLE `docs`
  ADD PRIMARY KEY (`id_doc`),
  ADD KEY `id_theam` (`id_theam`),
  ADD KEY `id_cat` (`id_cat`);

--
-- Индексы таблицы `theams`
--
ALTER TABLE `theams`
  ADD PRIMARY KEY (`id_theam`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `category`
--
ALTER TABLE `category`
  MODIFY `id_cat` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT для таблицы `docs`
--
ALTER TABLE `docs`
  MODIFY `id_doc` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=37;

--
-- AUTO_INCREMENT для таблицы `theams`
--
ALTER TABLE `theams`
  MODIFY `id_theam` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `docs`
--
ALTER TABLE `docs`
  ADD CONSTRAINT `docs_ibfk_1` FOREIGN KEY (`id_theam`) REFERENCES `theams` (`id_theam`),
  ADD CONSTRAINT `docs_ibfk_2` FOREIGN KEY (`id_cat`) REFERENCES `category` (`id_cat`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
